In archive libSmart_Home_project.a:

GIE_program.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000360  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000006c7  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.GIE_Enable 0000001c  00000000  00000000  00000a5b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.GIE_Disable 0000001c  00000000  00000000  00000a77  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text.GIE_Enable:

00000000 <GIE_Enable>:
/*****************************< MCAL *****************************/
#include "GIE_interface.h"
#include "GIE_private.h"
#include "GIE_config.h"
/*****************************< Function Implementations *****************************/
void GIE_Enable(void) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG_REG, I_BIT); /**< Set the Global Interrupt Enable bit */
   8:	af e5       	ldi	r26, 0x5F	; 95
   a:	b0 e0       	ldi	r27, 0x00	; 0
   c:	ef e5       	ldi	r30, 0x5F	; 95
   e:	f0 e0       	ldi	r31, 0x00	; 0
  10:	80 81       	ld	r24, Z
  12:	80 68       	ori	r24, 0x80	; 128
  14:	8c 93       	st	X, r24
}
  16:	cf 91       	pop	r28
  18:	df 91       	pop	r29
  1a:	08 95       	ret

Disassembly of section .text.GIE_Disable:

00000000 <GIE_Disable>:
/*****************************< MCAL *****************************/
#include "GIE_interface.h"
#include "GIE_private.h"
#include "GIE_config.h"
/*****************************< Function Implementations *****************************/
void GIE_Enable(void) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG_REG, I_BIT); /**< Set the Global Interrupt Enable bit */
   8:	af e5       	ldi	r26, 0x5F	; 95
   a:	b0 e0       	ldi	r27, 0x00	; 0
   c:	ef e5       	ldi	r30, 0x5F	; 95
   e:	f0 e0       	ldi	r31, 0x00	; 0
  10:	80 81       	ld	r24, Z
  12:	8f 77       	andi	r24, 0x7F	; 127
  14:	8c 93       	st	X, r24
}
  16:	cf 91       	pop	r28
  18:	df 91       	pop	r29
  1a:	08 95       	ret

EXTI_program.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000075c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000858  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .bss.EXTICallback 00000006  00000000  00000000  00000fe8  2**0
                  ALLOC
  6 .text.EXTI_Enable 000002b2  00000000  00000000  00000fe8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.EXTI_Disable 0000007a  00000000  00000000  0000129a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.EXTI_SetCallback 00000050  00000000  00000000  00001314  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.__vector_1 00000066  00000000  00000000  00001364  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.__vector_2 00000066  00000000  00000000  000013ca  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.__vector_3 00000066  00000000  00000000  00001430  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.EXTI_Enable:

00000000 <EXTI_Enable>:
 * signature defined by the typedef `VoidFunctionPointer_t`.
 * It is initialized to NULL and can be assigned a valid function address to serve as a callback.
 */
EXTI_NotificationCallback_t EXTICallback[3] = {NULL};
/*****************************< Function Implementations *****************************/
Std_ReturnType EXTI_Enable(u8 EXTIIndex,u8 EdgeIndex) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2b 97       	sbiw	r28, 0x0b	; 11
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8a 83       	std	Y+2, r24	; 0x02
  16:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType Local_ErrorStatus = E_OK; 
  18:	81 e0       	ldi	r24, 0x01	; 1
  1a:	89 83       	std	Y+1, r24	; 0x01

	switch(EXTIIndex) {
  1c:	8a 81       	ldd	r24, Y+2	; 0x02
  1e:	28 2f       	mov	r18, r24
  20:	30 e0       	ldi	r19, 0x00	; 0
  22:	3b 87       	std	Y+11, r19	; 0x0b
  24:	2a 87       	std	Y+10, r18	; 0x0a
  26:	8a 85       	ldd	r24, Y+10	; 0x0a
  28:	9b 85       	ldd	r25, Y+11	; 0x0b
  2a:	81 30       	cpi	r24, 0x01	; 1
  2c:	91 05       	cpc	r25, r1
  2e:	01 f4       	brne	.+0      	; 0x30 <EXTI_Enable+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <EXTI_Enable+0x32>
  32:	2a 85       	ldd	r18, Y+10	; 0x0a
  34:	3b 85       	ldd	r19, Y+11	; 0x0b
  36:	22 30       	cpi	r18, 0x02	; 2
  38:	31 05       	cpc	r19, r1
  3a:	01 f4       	brne	.+0      	; 0x3c <EXTI_Enable+0x3c>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <EXTI_Enable+0x3e>
  3e:	8a 85       	ldd	r24, Y+10	; 0x0a
  40:	9b 85       	ldd	r25, Y+11	; 0x0b
  42:	00 97       	sbiw	r24, 0x00	; 0
  44:	01 f0       	breq	.+0      	; 0x46 <EXTI_Enable+0x46>
  46:	00 c0       	rjmp	.+0      	; 0x48 <EXTI_Enable+0x48>
		case EXTI_INT0:
			switch(EdgeIndex) {
  48:	8b 81       	ldd	r24, Y+3	; 0x03
  4a:	28 2f       	mov	r18, r24
  4c:	30 e0       	ldi	r19, 0x00	; 0
  4e:	39 87       	std	Y+9, r19	; 0x09
  50:	28 87       	std	Y+8, r18	; 0x08
  52:	88 85       	ldd	r24, Y+8	; 0x08
  54:	99 85       	ldd	r25, Y+9	; 0x09
  56:	81 30       	cpi	r24, 0x01	; 1
  58:	91 05       	cpc	r25, r1
  5a:	01 f0       	breq	.+0      	; 0x5c <EXTI_Enable+0x5c>
  5c:	28 85       	ldd	r18, Y+8	; 0x08
  5e:	39 85       	ldd	r19, Y+9	; 0x09
  60:	22 30       	cpi	r18, 0x02	; 2
  62:	31 05       	cpc	r19, r1
  64:	04 f4       	brge	.+0      	; 0x66 <EXTI_Enable+0x66>
  66:	88 85       	ldd	r24, Y+8	; 0x08
  68:	99 85       	ldd	r25, Y+9	; 0x09
  6a:	00 97       	sbiw	r24, 0x00	; 0
  6c:	01 f0       	breq	.+0      	; 0x6e <EXTI_Enable+0x6e>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <EXTI_Enable+0x70>
  70:	28 85       	ldd	r18, Y+8	; 0x08
  72:	39 85       	ldd	r19, Y+9	; 0x09
  74:	22 30       	cpi	r18, 0x02	; 2
  76:	31 05       	cpc	r19, r1
  78:	01 f0       	breq	.+0      	; 0x7a <EXTI_Enable+0x7a>
  7a:	88 85       	ldd	r24, Y+8	; 0x08
  7c:	99 85       	ldd	r25, Y+9	; 0x09
  7e:	83 30       	cpi	r24, 0x03	; 3
  80:	91 05       	cpc	r25, r1
  82:	01 f4       	brne	.+0      	; 0x84 <EXTI_Enable+0x84>
  84:	00 c0       	rjmp	.+0      	; 0x86 <EXTI_Enable+0x86>
  86:	00 c0       	rjmp	.+0      	; 0x88 <EXTI_Enable+0x88>
				case EXTI_RAISING_EDGE:
				SET_BIT(EXTI_MCUCR_REG,ISC00_BIT);
  88:	a5 e5       	ldi	r26, 0x55	; 85
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e5 e5       	ldi	r30, 0x55	; 85
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	81 60       	ori	r24, 0x01	; 1
  94:	8c 93       	st	X, r24
				SET_BIT(EXTI_MCUCR_REG,ISC01_BIT);
  96:	a5 e5       	ldi	r26, 0x55	; 85
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	e5 e5       	ldi	r30, 0x55	; 85
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	8c 93       	st	X, r24
				SET_BIT(EXTI_GICR_REG,INT0_BIT);
  a4:	ab e5       	ldi	r26, 0x5B	; 91
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	eb e5       	ldi	r30, 0x5B	; 91
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	8c 93       	st	X, r24
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <EXTI_Enable+0xb4>
				break;

				case EXTI_FALLING_EDGE:
				CLR_BIT(EXTI_MCUCR_REG,ISC00_BIT);
  b4:	a5 e5       	ldi	r26, 0x55	; 85
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e5 e5       	ldi	r30, 0x55	; 85
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8e 7f       	andi	r24, 0xFE	; 254
  c0:	8c 93       	st	X, r24
				SET_BIT(EXTI_MCUCR_REG,ISC01_BIT);
  c2:	a5 e5       	ldi	r26, 0x55	; 85
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e5 e5       	ldi	r30, 0x55	; 85
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	8c 93       	st	X, r24
				SET_BIT(EXTI_GICR_REG,INT0_BIT);
  d0:	ab e5       	ldi	r26, 0x5B	; 91
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	eb e5       	ldi	r30, 0x5B	; 91
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	8c 93       	st	X, r24
  de:	00 c0       	rjmp	.+0      	; 0xe0 <EXTI_Enable+0xe0>
				break;

				case EXTI_ANY_LOGICAL_CHANGE:
				SET_BIT(EXTI_MCUCR_REG,ISC00_BIT);
  e0:	a5 e5       	ldi	r26, 0x55	; 85
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e5 e5       	ldi	r30, 0x55	; 85
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	8c 93       	st	X, r24
				CLR_BIT(EXTI_MCUCR_REG,ISC01_BIT);
  ee:	a5 e5       	ldi	r26, 0x55	; 85
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e5 e5       	ldi	r30, 0x55	; 85
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	8d 7f       	andi	r24, 0xFD	; 253
  fa:	8c 93       	st	X, r24
				SET_BIT(EXTI_GICR_REG,INT0_BIT);
  fc:	ab e5       	ldi	r26, 0x5B	; 91
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	eb e5       	ldi	r30, 0x5B	; 91
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	8c 93       	st	X, r24
 10a:	00 c0       	rjmp	.+0      	; 0x10c <EXTI_Enable+0x10c>
				break;

				case EXTI_U8_LOW_LEVEL:
				CLR_BIT(EXTI_MCUCR_REG,ISC00_BIT);
 10c:	a5 e5       	ldi	r26, 0x55	; 85
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	e5 e5       	ldi	r30, 0x55	; 85
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	8c 93       	st	X, r24
				CLR_BIT(EXTI_MCUCR_REG,ISC01_BIT);
 11a:	a5 e5       	ldi	r26, 0x55	; 85
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e5 e5       	ldi	r30, 0x55	; 85
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8d 7f       	andi	r24, 0xFD	; 253
 126:	8c 93       	st	X, r24
				SET_BIT(EXTI_GICR_REG,INT0_BIT);
 128:	ab e5       	ldi	r26, 0x5B	; 91
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	eb e5       	ldi	r30, 0x5B	; 91
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 64       	ori	r24, 0x40	; 64
 134:	8c 93       	st	X, r24
 136:	00 c0       	rjmp	.+0      	; 0x138 <EXTI_Enable+0x138>
				break;
				
				default : Local_ErrorStatus = E_NOT_OK;
 138:	19 82       	std	Y+1, r1	; 0x01
 13a:	00 c0       	rjmp	.+0      	; 0x13c <EXTI_Enable+0x13c>
				break;
			}
		break;
		case EXTI_INT1:
			switch(EdgeIndex) {
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	28 2f       	mov	r18, r24
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	3f 83       	std	Y+7, r19	; 0x07
 144:	2e 83       	std	Y+6, r18	; 0x06
 146:	8e 81       	ldd	r24, Y+6	; 0x06
 148:	9f 81       	ldd	r25, Y+7	; 0x07
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	91 05       	cpc	r25, r1
 14e:	01 f0       	breq	.+0      	; 0x150 <EXTI_Enable+0x150>
 150:	2e 81       	ldd	r18, Y+6	; 0x06
 152:	3f 81       	ldd	r19, Y+7	; 0x07
 154:	22 30       	cpi	r18, 0x02	; 2
 156:	31 05       	cpc	r19, r1
 158:	04 f4       	brge	.+0      	; 0x15a <EXTI_Enable+0x15a>
 15a:	8e 81       	ldd	r24, Y+6	; 0x06
 15c:	9f 81       	ldd	r25, Y+7	; 0x07
 15e:	00 97       	sbiw	r24, 0x00	; 0
 160:	01 f0       	breq	.+0      	; 0x162 <EXTI_Enable+0x162>
 162:	00 c0       	rjmp	.+0      	; 0x164 <EXTI_Enable+0x164>
 164:	2e 81       	ldd	r18, Y+6	; 0x06
 166:	3f 81       	ldd	r19, Y+7	; 0x07
 168:	22 30       	cpi	r18, 0x02	; 2
 16a:	31 05       	cpc	r19, r1
 16c:	01 f0       	breq	.+0      	; 0x16e <EXTI_Enable+0x16e>
 16e:	8e 81       	ldd	r24, Y+6	; 0x06
 170:	9f 81       	ldd	r25, Y+7	; 0x07
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	91 05       	cpc	r25, r1
 176:	01 f4       	brne	.+0      	; 0x178 <EXTI_Enable+0x178>
 178:	00 c0       	rjmp	.+0      	; 0x17a <EXTI_Enable+0x17a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <EXTI_Enable+0x17c>
				case EXTI_RAISING_EDGE:
				SET_BIT(EXTI_MCUCR_REG,ISC10_BIT);
 17c:	a5 e5       	ldi	r26, 0x55	; 85
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	e5 e5       	ldi	r30, 0x55	; 85
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	84 60       	ori	r24, 0x04	; 4
 188:	8c 93       	st	X, r24
				SET_BIT(EXTI_MCUCR_REG,ISC11_BIT);
 18a:	a5 e5       	ldi	r26, 0x55	; 85
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	e5 e5       	ldi	r30, 0x55	; 85
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	88 60       	ori	r24, 0x08	; 8
 196:	8c 93       	st	X, r24
				SET_BIT(EXTI_GICR_REG,INT1_BIT);
 198:	ab e5       	ldi	r26, 0x5B	; 91
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	eb e5       	ldi	r30, 0x5B	; 91
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	80 68       	ori	r24, 0x80	; 128
 1a4:	8c 93       	st	X, r24
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <EXTI_Enable+0x1a8>
				break;

				case EXTI_FALLING_EDGE:
				CLR_BIT(EXTI_MCUCR_REG,ISC10_BIT);
 1a8:	a5 e5       	ldi	r26, 0x55	; 85
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	e5 e5       	ldi	r30, 0x55	; 85
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	8b 7f       	andi	r24, 0xFB	; 251
 1b4:	8c 93       	st	X, r24
				SET_BIT(EXTI_MCUCR_REG,ISC11_BIT);
 1b6:	a5 e5       	ldi	r26, 0x55	; 85
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	e5 e5       	ldi	r30, 0x55	; 85
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	8c 93       	st	X, r24
				SET_BIT(EXTI_GICR_REG,INT1_BIT);
 1c4:	ab e5       	ldi	r26, 0x5B	; 91
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	eb e5       	ldi	r30, 0x5B	; 91
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	80 68       	ori	r24, 0x80	; 128
 1d0:	8c 93       	st	X, r24
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <EXTI_Enable+0x1d4>
				break;

				case EXTI_ANY_LOGICAL_CHANGE:
				SET_BIT(EXTI_MCUCR_REG,ISC10_BIT);
 1d4:	a5 e5       	ldi	r26, 0x55	; 85
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e5 e5       	ldi	r30, 0x55	; 85
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	84 60       	ori	r24, 0x04	; 4
 1e0:	8c 93       	st	X, r24
				CLR_BIT(EXTI_MCUCR_REG,ISC11_BIT);
 1e2:	a5 e5       	ldi	r26, 0x55	; 85
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	e5 e5       	ldi	r30, 0x55	; 85
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	87 7f       	andi	r24, 0xF7	; 247
 1ee:	8c 93       	st	X, r24
				SET_BIT(EXTI_GICR_REG,INT1_BIT);
 1f0:	ab e5       	ldi	r26, 0x5B	; 91
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	eb e5       	ldi	r30, 0x5B	; 91
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	80 68       	ori	r24, 0x80	; 128
 1fc:	8c 93       	st	X, r24
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <EXTI_Enable+0x200>
				break;

				case EXTI_U8_LOW_LEVEL:
				CLR_BIT(EXTI_MCUCR_REG,ISC10_BIT);
 200:	a5 e5       	ldi	r26, 0x55	; 85
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	e5 e5       	ldi	r30, 0x55	; 85
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	8b 7f       	andi	r24, 0xFB	; 251
 20c:	8c 93       	st	X, r24
				CLR_BIT(EXTI_MCUCR_REG,ISC11_BIT);
 20e:	a5 e5       	ldi	r26, 0x55	; 85
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	e5 e5       	ldi	r30, 0x55	; 85
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	87 7f       	andi	r24, 0xF7	; 247
 21a:	8c 93       	st	X, r24
				SET_BIT(EXTI_GICR_REG,INT1_BIT);
 21c:	ab e5       	ldi	r26, 0x5B	; 91
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	eb e5       	ldi	r30, 0x5B	; 91
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	80 68       	ori	r24, 0x80	; 128
 228:	8c 93       	st	X, r24
 22a:	00 c0       	rjmp	.+0      	; 0x22c <EXTI_Enable+0x22c>
				break;

				default : Local_ErrorStatus = E_NOT_OK;
 22c:	19 82       	std	Y+1, r1	; 0x01
 22e:	00 c0       	rjmp	.+0      	; 0x230 <EXTI_Enable+0x230>
				break;
			}
		break;		
		case EXTI_INT2:
			switch(EdgeIndex) {
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	28 2f       	mov	r18, r24
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	3d 83       	std	Y+5, r19	; 0x05
 238:	2c 83       	std	Y+4, r18	; 0x04
 23a:	8c 81       	ldd	r24, Y+4	; 0x04
 23c:	9d 81       	ldd	r25, Y+5	; 0x05
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	01 f0       	breq	.+0      	; 0x242 <EXTI_Enable+0x242>
 242:	2c 81       	ldd	r18, Y+4	; 0x04
 244:	3d 81       	ldd	r19, Y+5	; 0x05
 246:	21 30       	cpi	r18, 0x01	; 1
 248:	31 05       	cpc	r19, r1
 24a:	01 f0       	breq	.+0      	; 0x24c <EXTI_Enable+0x24c>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <EXTI_Enable+0x24e>
				case EXTI_RAISING_EDGE:
				SET_BIT(EXTI_MCUCR_REG,ISC10_BIT);
 24e:	a5 e5       	ldi	r26, 0x55	; 85
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	e5 e5       	ldi	r30, 0x55	; 85
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	84 60       	ori	r24, 0x04	; 4
 25a:	8c 93       	st	X, r24
				SET_BIT(EXTI_MCUCR_REG,ISC11_BIT);
 25c:	a5 e5       	ldi	r26, 0x55	; 85
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	e5 e5       	ldi	r30, 0x55	; 85
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	88 60       	ori	r24, 0x08	; 8
 268:	8c 93       	st	X, r24
				SET_BIT(EXTI_GICR_REG,INT1_BIT);
 26a:	ab e5       	ldi	r26, 0x5B	; 91
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	eb e5       	ldi	r30, 0x5B	; 91
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	80 68       	ori	r24, 0x80	; 128
 276:	8c 93       	st	X, r24
 278:	00 c0       	rjmp	.+0      	; 0x27a <EXTI_Enable+0x27a>
				break;

				case EXTI_FALLING_EDGE:
				CLR_BIT(EXTI_MCUCSR_REG, ISC2_BIT);
 27a:	a4 e5       	ldi	r26, 0x54	; 84
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	e4 e5       	ldi	r30, 0x54	; 84
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	8f 7b       	andi	r24, 0xBF	; 191
 286:	8c 93       	st	X, r24
				SET_BIT(EXTI_GICR_REG, INT2_BIT);
 288:	ab e5       	ldi	r26, 0x5B	; 91
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	eb e5       	ldi	r30, 0x5B	; 91
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	80 62       	ori	r24, 0x20	; 32
 294:	8c 93       	st	X, r24
 296:	00 c0       	rjmp	.+0      	; 0x298 <EXTI_Enable+0x298>
				break;

				default : Local_ErrorStatus = E_NOT_OK;
 298:	19 82       	std	Y+1, r1	; 0x01
 29a:	00 c0       	rjmp	.+0      	; 0x29c <EXTI_Enable+0x29c>
				break;
			}
		break;	
		default : Local_ErrorStatus = E_NOT_OK;
 29c:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return Local_ErrorStatus;
 29e:	89 81       	ldd	r24, Y+1	; 0x01
}
 2a0:	2b 96       	adiw	r28, 0x0b	; 11
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	de bf       	out	0x3e, r29	; 62
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	cd bf       	out	0x3d, r28	; 61
 2ac:	cf 91       	pop	r28
 2ae:	df 91       	pop	r29
 2b0:	08 95       	ret

Disassembly of section .text.EXTI_Disable:

00000000 <EXTI_Disable>:
 * signature defined by the typedef `VoidFunctionPointer_t`.
 * It is initialized to NULL and can be assigned a valid function address to serve as a callback.
 */
EXTI_NotificationCallback_t EXTICallback[3] = {NULL};
/*****************************< Function Implementations *****************************/
Std_ReturnType EXTI_Enable(u8 EXTIIndex,u8 EdgeIndex) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <EXTI_Disable+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <EXTI_Disable+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	8a 83       	std	Y+2, r24	; 0x02
   e:	81 e0       	ldi	r24, 0x01	; 1
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	8a 81       	ldd	r24, Y+2	; 0x02
  14:	28 2f       	mov	r18, r24
  16:	30 e0       	ldi	r19, 0x00	; 0
	Std_ReturnType Local_ErrorStatus = E_OK; 
  18:	3c 83       	std	Y+4, r19	; 0x04
  1a:	2b 83       	std	Y+3, r18	; 0x03

	switch(EXTIIndex) {
  1c:	8b 81       	ldd	r24, Y+3	; 0x03
  1e:	9c 81       	ldd	r25, Y+4	; 0x04
  20:	81 30       	cpi	r24, 0x01	; 1
  22:	91 05       	cpc	r25, r1
  24:	01 f0       	breq	.+0      	; 0x26 <EXTI_Disable+0x26>
  26:	2b 81       	ldd	r18, Y+3	; 0x03
  28:	3c 81       	ldd	r19, Y+4	; 0x04
  2a:	22 30       	cpi	r18, 0x02	; 2
  2c:	31 05       	cpc	r19, r1
  2e:	01 f0       	breq	.+0      	; 0x30 <EXTI_Disable+0x30>
  30:	8b 81       	ldd	r24, Y+3	; 0x03
  32:	9c 81       	ldd	r25, Y+4	; 0x04
  34:	00 97       	sbiw	r24, 0x00	; 0
  36:	01 f4       	brne	.+0      	; 0x38 <EXTI_Disable+0x38>
  38:	ab e5       	ldi	r26, 0x5B	; 91
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	eb e5       	ldi	r30, 0x5B	; 91
  3e:	f0 e0       	ldi	r31, 0x00	; 0
  40:	80 81       	ld	r24, Z
  42:	8f 7b       	andi	r24, 0xBF	; 191
  44:	8c 93       	st	X, r24
  46:	00 c0       	rjmp	.+0      	; 0x48 <EXTI_Disable+0x48>
		case EXTI_INT0:
			switch(EdgeIndex) {
  48:	ab e5       	ldi	r26, 0x5B	; 91
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	eb e5       	ldi	r30, 0x5B	; 91
  4e:	f0 e0       	ldi	r31, 0x00	; 0
  50:	80 81       	ld	r24, Z
  52:	8f 77       	andi	r24, 0x7F	; 127
  54:	8c 93       	st	X, r24
  56:	00 c0       	rjmp	.+0      	; 0x58 <EXTI_Disable+0x58>
  58:	ab e5       	ldi	r26, 0x5B	; 91
  5a:	b0 e0       	ldi	r27, 0x00	; 0
  5c:	eb e5       	ldi	r30, 0x5B	; 91
  5e:	f0 e0       	ldi	r31, 0x00	; 0
  60:	80 81       	ld	r24, Z
  62:	8f 7d       	andi	r24, 0xDF	; 223
  64:	8c 93       	st	X, r24
  66:	00 c0       	rjmp	.+0      	; 0x68 <EXTI_Disable+0x68>
  68:	19 82       	std	Y+1, r1	; 0x01
  6a:	89 81       	ldd	r24, Y+1	; 0x01
  6c:	0f 90       	pop	r0
  6e:	0f 90       	pop	r0
  70:	0f 90       	pop	r0
  72:	0f 90       	pop	r0
  74:	cf 91       	pop	r28
  76:	df 91       	pop	r29
  78:	08 95       	ret

Disassembly of section .text.EXTI_SetCallback:

00000000 <EXTI_SetCallback>:
 * signature defined by the typedef `VoidFunctionPointer_t`.
 * It is initialized to NULL and can be assigned a valid function address to serve as a callback.
 */
EXTI_NotificationCallback_t EXTICallback[3] = {NULL};
/*****************************< Function Implementations *****************************/
Std_ReturnType EXTI_Enable(u8 EXTIIndex,u8 EdgeIndex) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <EXTI_SetCallback+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <EXTI_SetCallback+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9b 83       	std	Y+3, r25	; 0x03
   e:	8a 83       	std	Y+2, r24	; 0x02
  10:	6c 83       	std	Y+4, r22	; 0x04
  12:	81 e0       	ldi	r24, 0x01	; 1
  14:	89 83       	std	Y+1, r24	; 0x01
  16:	8a 81       	ldd	r24, Y+2	; 0x02
	Std_ReturnType Local_ErrorStatus = E_OK; 
  18:	9b 81       	ldd	r25, Y+3	; 0x03
  1a:	00 97       	sbiw	r24, 0x00	; 0

	switch(EXTIIndex) {
  1c:	01 f0       	breq	.+0      	; 0x1e <EXTI_SetCallback+0x1e>
  1e:	8c 81       	ldd	r24, Y+4	; 0x04
  20:	83 30       	cpi	r24, 0x03	; 3
  22:	00 f4       	brcc	.+0      	; 0x24 <EXTI_SetCallback+0x24>
  24:	8c 81       	ldd	r24, Y+4	; 0x04
  26:	88 2f       	mov	r24, r24
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	88 0f       	add	r24, r24
  2c:	99 1f       	adc	r25, r25
  2e:	fc 01       	movw	r30, r24
  30:	e0 50       	subi	r30, 0x00	; 0
  32:	f0 40       	sbci	r31, 0x00	; 0
  34:	8a 81       	ldd	r24, Y+2	; 0x02
  36:	9b 81       	ldd	r25, Y+3	; 0x03
  38:	91 83       	std	Z+1, r25	; 0x01
  3a:	80 83       	st	Z, r24
  3c:	00 c0       	rjmp	.+0      	; 0x3e <EXTI_SetCallback+0x3e>
  3e:	19 82       	std	Y+1, r1	; 0x01
  40:	89 81       	ldd	r24, Y+1	; 0x01
  42:	0f 90       	pop	r0
  44:	0f 90       	pop	r0
  46:	0f 90       	pop	r0
		case EXTI_INT0:
			switch(EdgeIndex) {
  48:	0f 90       	pop	r0
  4a:	cf 91       	pop	r28
  4c:	df 91       	pop	r29
  4e:	08 95       	ret

Disassembly of section .text.__vector_1:

00000000 <__vector_1>:
 * signature defined by the typedef `VoidFunctionPointer_t`.
 * It is initialized to NULL and can be assigned a valid function address to serve as a callback.
 */
EXTI_NotificationCallback_t EXTICallback[3] = {NULL};
/*****************************< Function Implementations *****************************/
Std_ReturnType EXTI_Enable(u8 EXTIIndex,u8 EdgeIndex) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
	Std_ReturnType Local_ErrorStatus = E_OK; 
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26

	switch(EXTIIndex) {
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	df 93       	push	r29
  24:	cf 93       	push	r28
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
  2a:	80 91 00 00 	lds	r24, 0x0000
  2e:	90 91 00 00 	lds	r25, 0x0000
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <__vector_1+0x36>
  36:	e0 91 00 00 	lds	r30, 0x0000
  3a:	f0 91 00 00 	lds	r31, 0x0000
  3e:	09 95       	icall
  40:	cf 91       	pop	r28
  42:	df 91       	pop	r29
  44:	ff 91       	pop	r31
  46:	ef 91       	pop	r30
		case EXTI_INT0:
			switch(EdgeIndex) {
  48:	bf 91       	pop	r27
  4a:	af 91       	pop	r26
  4c:	9f 91       	pop	r25
  4e:	8f 91       	pop	r24
  50:	7f 91       	pop	r23
  52:	6f 91       	pop	r22
  54:	5f 91       	pop	r21
  56:	4f 91       	pop	r20
  58:	3f 91       	pop	r19
  5a:	2f 91       	pop	r18
  5c:	0f 90       	pop	r0
  5e:	0f be       	out	0x3f, r0	; 63
  60:	0f 90       	pop	r0
  62:	1f 90       	pop	r1
  64:	18 95       	reti

Disassembly of section .text.__vector_2:

00000000 <__vector_2>:
 * signature defined by the typedef `VoidFunctionPointer_t`.
 * It is initialized to NULL and can be assigned a valid function address to serve as a callback.
 */
EXTI_NotificationCallback_t EXTICallback[3] = {NULL};
/*****************************< Function Implementations *****************************/
Std_ReturnType EXTI_Enable(u8 EXTIIndex,u8 EdgeIndex) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
	Std_ReturnType Local_ErrorStatus = E_OK; 
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26

	switch(EXTIIndex) {
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	df 93       	push	r29
  24:	cf 93       	push	r28
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
  2a:	80 91 00 00 	lds	r24, 0x0000
  2e:	90 91 00 00 	lds	r25, 0x0000
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <__vector_2+0x36>
  36:	e0 91 00 00 	lds	r30, 0x0000
  3a:	f0 91 00 00 	lds	r31, 0x0000
  3e:	09 95       	icall
  40:	cf 91       	pop	r28
  42:	df 91       	pop	r29
  44:	ff 91       	pop	r31
  46:	ef 91       	pop	r30
		case EXTI_INT0:
			switch(EdgeIndex) {
  48:	bf 91       	pop	r27
  4a:	af 91       	pop	r26
  4c:	9f 91       	pop	r25
  4e:	8f 91       	pop	r24
  50:	7f 91       	pop	r23
  52:	6f 91       	pop	r22
  54:	5f 91       	pop	r21
  56:	4f 91       	pop	r20
  58:	3f 91       	pop	r19
  5a:	2f 91       	pop	r18
  5c:	0f 90       	pop	r0
  5e:	0f be       	out	0x3f, r0	; 63
  60:	0f 90       	pop	r0
  62:	1f 90       	pop	r1
  64:	18 95       	reti

Disassembly of section .text.__vector_3:

00000000 <__vector_3>:
 * signature defined by the typedef `VoidFunctionPointer_t`.
 * It is initialized to NULL and can be assigned a valid function address to serve as a callback.
 */
EXTI_NotificationCallback_t EXTICallback[3] = {NULL};
/*****************************< Function Implementations *****************************/
Std_ReturnType EXTI_Enable(u8 EXTIIndex,u8 EdgeIndex) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
	Std_ReturnType Local_ErrorStatus = E_OK; 
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26

	switch(EXTIIndex) {
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	df 93       	push	r29
  24:	cf 93       	push	r28
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
  2a:	80 91 00 00 	lds	r24, 0x0000
  2e:	90 91 00 00 	lds	r25, 0x0000
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <__vector_3+0x36>
  36:	e0 91 00 00 	lds	r30, 0x0000
  3a:	f0 91 00 00 	lds	r31, 0x0000
  3e:	09 95       	icall
  40:	cf 91       	pop	r28
  42:	df 91       	pop	r29
  44:	ff 91       	pop	r31
  46:	ef 91       	pop	r30
		case EXTI_INT0:
			switch(EdgeIndex) {
  48:	bf 91       	pop	r27
  4a:	af 91       	pop	r26
  4c:	9f 91       	pop	r25
  4e:	8f 91       	pop	r24
  50:	7f 91       	pop	r23
  52:	6f 91       	pop	r22
  54:	5f 91       	pop	r21
  56:	4f 91       	pop	r20
  58:	3f 91       	pop	r19
  5a:	2f 91       	pop	r18
  5c:	0f 90       	pop	r0
  5e:	0f be       	out	0x3f, r0	; 63
  60:	0f 90       	pop	r0
  62:	1f 90       	pop	r1
  64:	18 95       	reti

DIO_program.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000abc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000008f4  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.DIO_vInit 00000046  00000000  00000000  000013e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.DIO_SetPinDirection 00000258  00000000  00000000  0000142a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.DIO_SetPinValue 0000024c  00000000  00000000  00001682  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.DIO_GetPinValue 000001fa  00000000  00000000  000018ce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.DIO_SetPortDirection 0000014c  00000000  00000000  00001ac8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.DIO_SetPortValue 00000090  00000000  00000000  00001c14  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.DIO_GetPortValue 000000b0  00000000  00000000  00001ca4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.DIO_vInit:

00000000 <DIO_vInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
/*****************************< Function Implementations *****************************/
void DIO_vInit(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
	/**< Configure the data direction registers (DDRx) */ 
    DIO_DDRA_R = Conc(DIO_PA7_INITIAL_DIRECTION, DIO_PA6_INITIAL_DIRECTION, DIO_PA5_INITIAL_DIRECTION, DIO_PA4_INITIAL_DIRECTION,
   8:	ea e3       	ldi	r30, 0x3A	; 58
   a:	f0 e0       	ldi	r31, 0x00	; 0
   c:	8f ef       	ldi	r24, 0xFF	; 255
   e:	80 83       	st	Z, r24
                      DIO_PA3_INITIAL_DIRECTION, DIO_PA2_INITIAL_DIRECTION, DIO_PA1_INITIAL_DIRECTION, DIO_PA0_INITIAL_DIRECTION);

    DIO_DDRB_R = Conc(DIO_PB7_INITIAL_DIRECTION, DIO_PB6_INITIAL_DIRECTION, DIO_PB5_INITIAL_DIRECTION, DIO_PB4_INITIAL_DIRECTION,
  10:	e7 e3       	ldi	r30, 0x37	; 55
  12:	f0 e0       	ldi	r31, 0x00	; 0
  14:	8f ef       	ldi	r24, 0xFF	; 255
  16:	80 83       	st	Z, r24
                      DIO_PB3_INITIAL_DIRECTION, DIO_PB2_INITIAL_DIRECTION, DIO_PB1_INITIAL_DIRECTION, DIO_PB0_INITIAL_DIRECTION);

    DIO_DDRC_R = Conc(DIO_PC7_INITIAL_DIRECTION, DIO_PC6_INITIAL_DIRECTION, DIO_PC5_INITIAL_DIRECTION, DIO_PC4_INITIAL_DIRECTION,
  18:	e4 e3       	ldi	r30, 0x34	; 52
  1a:	f0 e0       	ldi	r31, 0x00	; 0
  1c:	8f ef       	ldi	r24, 0xFF	; 255
  1e:	80 83       	st	Z, r24
                      DIO_PC3_INITIAL_DIRECTION, DIO_PC2_INITIAL_DIRECTION, DIO_PC1_INITIAL_DIRECTION, DIO_PC0_INITIAL_DIRECTION);

    DIO_DDRD_R = Conc(DIO_PD7_INITIAL_DIRECTION, DIO_PD6_INITIAL_DIRECTION, DIO_PD5_INITIAL_DIRECTION, DIO_PD4_INITIAL_DIRECTION,
  20:	e1 e3       	ldi	r30, 0x31	; 49
  22:	f0 e0       	ldi	r31, 0x00	; 0
  24:	8f ef       	ldi	r24, 0xFF	; 255
  26:	80 83       	st	Z, r24
                      DIO_PD3_INITIAL_DIRECTION, DIO_PD2_INITIAL_DIRECTION, DIO_PD1_INITIAL_DIRECTION, DIO_PD0_INITIAL_DIRECTION);
    
    /**< Set the initial output values for the ports */
    DIO_PORTA_R = Conc(DIO_PA7_INITIAL_VALUE, DIO_PA6_INITIAL_VALUE, DIO_PA5_INITIAL_VALUE, DIO_PA4_INITIAL_VALUE,
  28:	eb e3       	ldi	r30, 0x3B	; 59
  2a:	f0 e0       	ldi	r31, 0x00	; 0
  2c:	10 82       	st	Z, r1
                       DIO_PA3_INITIAL_VALUE, DIO_PA2_INITIAL_VALUE, DIO_PA1_INITIAL_VALUE, DIO_PA0_INITIAL_VALUE);

    DIO_PORTB_R = Conc(DIO_PB7_INITIAL_VALUE, DIO_PB6_INITIAL_VALUE, DIO_PB5_INITIAL_VALUE, DIO_PB4_INITIAL_VALUE,
  2e:	e8 e3       	ldi	r30, 0x38	; 56
  30:	f0 e0       	ldi	r31, 0x00	; 0
  32:	10 82       	st	Z, r1
                       DIO_PB3_INITIAL_VALUE, DIO_PB2_INITIAL_VALUE, DIO_PB1_INITIAL_VALUE, DIO_PB0_INITIAL_VALUE);

    DIO_PORTC_R = Conc(DIO_PC7_INITIAL_VALUE, DIO_PC6_INITIAL_VALUE, DIO_PC5_INITIAL_VALUE, DIO_PC4_INITIAL_VALUE,
  34:	e5 e3       	ldi	r30, 0x35	; 53
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	10 82       	st	Z, r1
                       DIO_PC3_INITIAL_VALUE, DIO_PC2_INITIAL_VALUE, DIO_PC1_INITIAL_VALUE, DIO_PC0_INITIAL_VALUE);

    DIO_PORTD_R = Conc(DIO_PD7_INITIAL_VALUE, DIO_PD6_INITIAL_VALUE, DIO_PD5_INITIAL_VALUE, DIO_PD4_INITIAL_VALUE,
  3a:	e2 e3       	ldi	r30, 0x32	; 50
  3c:	f0 e0       	ldi	r31, 0x00	; 0
  3e:	10 82       	st	Z, r1
                       DIO_PD3_INITIAL_VALUE, DIO_PD2_INITIAL_VALUE, DIO_PD1_INITIAL_VALUE, DIO_PD0_INITIAL_VALUE);
    
}
  40:	cf 91       	pop	r28
  42:	df 91       	pop	r29
  44:	08 95       	ret

Disassembly of section .text.DIO_SetPinDirection:

00000000 <DIO_SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
/*****************************< Function Implementations *****************************/
void DIO_vInit(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
	/**< Configure the data direction registers (DDRx) */ 
    DIO_DDRA_R = Conc(DIO_PA7_INITIAL_DIRECTION, DIO_PA6_INITIAL_DIRECTION, DIO_PA5_INITIAL_DIRECTION, DIO_PA4_INITIAL_DIRECTION,
   8:	2e 97       	sbiw	r28, 0x0e	; 14
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
                      DIO_PA3_INITIAL_DIRECTION, DIO_PA2_INITIAL_DIRECTION, DIO_PA1_INITIAL_DIRECTION, DIO_PA0_INITIAL_DIRECTION);

    DIO_DDRB_R = Conc(DIO_PB7_INITIAL_DIRECTION, DIO_PB6_INITIAL_DIRECTION, DIO_PB5_INITIAL_DIRECTION, DIO_PB4_INITIAL_DIRECTION,
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8a 83       	std	Y+2, r24	; 0x02
  16:	6b 83       	std	Y+3, r22	; 0x03
                      DIO_PB3_INITIAL_DIRECTION, DIO_PB2_INITIAL_DIRECTION, DIO_PB1_INITIAL_DIRECTION, DIO_PB0_INITIAL_DIRECTION);

    DIO_DDRC_R = Conc(DIO_PC7_INITIAL_DIRECTION, DIO_PC6_INITIAL_DIRECTION, DIO_PC5_INITIAL_DIRECTION, DIO_PC4_INITIAL_DIRECTION,
  18:	4c 83       	std	Y+4, r20	; 0x04
  1a:	81 e0       	ldi	r24, 0x01	; 1
  1c:	89 83       	std	Y+1, r24	; 0x01
  1e:	8a 81       	ldd	r24, Y+2	; 0x02
                      DIO_PC3_INITIAL_DIRECTION, DIO_PC2_INITIAL_DIRECTION, DIO_PC1_INITIAL_DIRECTION, DIO_PC0_INITIAL_DIRECTION);

    DIO_DDRD_R = Conc(DIO_PD7_INITIAL_DIRECTION, DIO_PD6_INITIAL_DIRECTION, DIO_PD5_INITIAL_DIRECTION, DIO_PD4_INITIAL_DIRECTION,
  20:	84 30       	cpi	r24, 0x04	; 4
  22:	00 f0       	brcs	.+0      	; 0x24 <DIO_SetPinDirection+0x24>
  24:	00 c0       	rjmp	.+0      	; 0x26 <DIO_SetPinDirection+0x26>
  26:	8b 81       	ldd	r24, Y+3	; 0x03
                      DIO_PD3_INITIAL_DIRECTION, DIO_PD2_INITIAL_DIRECTION, DIO_PD1_INITIAL_DIRECTION, DIO_PD0_INITIAL_DIRECTION);
    
    /**< Set the initial output values for the ports */
    DIO_PORTA_R = Conc(DIO_PA7_INITIAL_VALUE, DIO_PA6_INITIAL_VALUE, DIO_PA5_INITIAL_VALUE, DIO_PA4_INITIAL_VALUE,
  28:	88 30       	cpi	r24, 0x08	; 8
  2a:	00 f0       	brcs	.+0      	; 0x2c <DIO_SetPinDirection+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <DIO_SetPinDirection+0x2e>
                       DIO_PA3_INITIAL_VALUE, DIO_PA2_INITIAL_VALUE, DIO_PA1_INITIAL_VALUE, DIO_PA0_INITIAL_VALUE);

    DIO_PORTB_R = Conc(DIO_PB7_INITIAL_VALUE, DIO_PB6_INITIAL_VALUE, DIO_PB5_INITIAL_VALUE, DIO_PB4_INITIAL_VALUE,
  2e:	8c 81       	ldd	r24, Y+4	; 0x04
  30:	81 30       	cpi	r24, 0x01	; 1
  32:	01 f0       	breq	.+0      	; 0x34 <DIO_SetPinDirection+0x34>
                       DIO_PB3_INITIAL_VALUE, DIO_PB2_INITIAL_VALUE, DIO_PB1_INITIAL_VALUE, DIO_PB0_INITIAL_VALUE);

    DIO_PORTC_R = Conc(DIO_PC7_INITIAL_VALUE, DIO_PC6_INITIAL_VALUE, DIO_PC5_INITIAL_VALUE, DIO_PC4_INITIAL_VALUE,
  34:	8c 81       	ldd	r24, Y+4	; 0x04
  36:	88 23       	and	r24, r24
  38:	01 f0       	breq	.+0      	; 0x3a <DIO_SetPinDirection+0x3a>
                       DIO_PC3_INITIAL_VALUE, DIO_PC2_INITIAL_VALUE, DIO_PC1_INITIAL_VALUE, DIO_PC0_INITIAL_VALUE);

    DIO_PORTD_R = Conc(DIO_PD7_INITIAL_VALUE, DIO_PD6_INITIAL_VALUE, DIO_PD5_INITIAL_VALUE, DIO_PD4_INITIAL_VALUE,
  3a:	00 c0       	rjmp	.+0      	; 0x3c <DIO_SetPinDirection+0x3c>
  3c:	8a 81       	ldd	r24, Y+2	; 0x02
  3e:	28 2f       	mov	r18, r24
                       DIO_PD3_INITIAL_VALUE, DIO_PD2_INITIAL_VALUE, DIO_PD1_INITIAL_VALUE, DIO_PD0_INITIAL_VALUE);
    
}
  40:	30 e0       	ldi	r19, 0x00	; 0
  42:	3e 87       	std	Y+14, r19	; 0x0e
  44:	2d 87       	std	Y+13, r18	; 0x0d
  46:	8d 85       	ldd	r24, Y+13	; 0x0d
  48:	9e 85       	ldd	r25, Y+14	; 0x0e
  4a:	81 30       	cpi	r24, 0x01	; 1
  4c:	91 05       	cpc	r25, r1
  4e:	01 f4       	brne	.+0      	; 0x50 <DIO_SetPinDirection+0x50>
  50:	00 c0       	rjmp	.+0      	; 0x52 <DIO_SetPinDirection+0x52>
  52:	2d 85       	ldd	r18, Y+13	; 0x0d
  54:	3e 85       	ldd	r19, Y+14	; 0x0e
  56:	22 30       	cpi	r18, 0x02	; 2
  58:	31 05       	cpc	r19, r1
  5a:	04 f4       	brge	.+0      	; 0x5c <DIO_SetPinDirection+0x5c>
  5c:	8d 85       	ldd	r24, Y+13	; 0x0d
  5e:	9e 85       	ldd	r25, Y+14	; 0x0e
  60:	00 97       	sbiw	r24, 0x00	; 0
  62:	01 f0       	breq	.+0      	; 0x64 <DIO_SetPinDirection+0x64>
  64:	00 c0       	rjmp	.+0      	; 0x66 <DIO_SetPinDirection+0x66>
  66:	2d 85       	ldd	r18, Y+13	; 0x0d
  68:	3e 85       	ldd	r19, Y+14	; 0x0e
  6a:	22 30       	cpi	r18, 0x02	; 2
  6c:	31 05       	cpc	r19, r1
  6e:	01 f4       	brne	.+0      	; 0x70 <DIO_SetPinDirection+0x70>
  70:	00 c0       	rjmp	.+0      	; 0x72 <DIO_SetPinDirection+0x72>
  72:	8d 85       	ldd	r24, Y+13	; 0x0d
  74:	9e 85       	ldd	r25, Y+14	; 0x0e
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	91 05       	cpc	r25, r1
  7a:	01 f4       	brne	.+0      	; 0x7c <DIO_SetPinDirection+0x7c>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <DIO_SetPinDirection+0x7e>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <DIO_SetPinDirection+0x80>
  80:	8c 81       	ldd	r24, Y+4	; 0x04
  82:	28 2f       	mov	r18, r24
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	3c 87       	std	Y+12, r19	; 0x0c
  88:	2b 87       	std	Y+11, r18	; 0x0b
  8a:	8b 85       	ldd	r24, Y+11	; 0x0b
  8c:	9c 85       	ldd	r25, Y+12	; 0x0c
  8e:	00 97       	sbiw	r24, 0x00	; 0
  90:	01 f0       	breq	.+0      	; 0x92 <DIO_SetPinDirection+0x92>
  92:	2b 85       	ldd	r18, Y+11	; 0x0b
  94:	3c 85       	ldd	r19, Y+12	; 0x0c
  96:	21 30       	cpi	r18, 0x01	; 1
  98:	31 05       	cpc	r19, r1
  9a:	01 f4       	brne	.+0      	; 0x9c <DIO_SetPinDirection+0x9c>
  9c:	aa e3       	ldi	r26, 0x3A	; 58
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	ea e3       	ldi	r30, 0x3A	; 58
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	48 2f       	mov	r20, r24
  a8:	8b 81       	ldd	r24, Y+3	; 0x03
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 2e       	mov	r0, r18
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <DIO_SetPinDirection+0xb6>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	0a 94       	dec	r0
  bc:	02 f4       	brpl	.+0      	; 0xbe <DIO_SetPinDirection+0xbe>
  be:	84 2b       	or	r24, r20
  c0:	8c 93       	st	X, r24
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <DIO_SetPinDirection+0xc4>
  c4:	aa e3       	ldi	r26, 0x3A	; 58
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	ea e3       	ldi	r30, 0x3A	; 58
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	48 2f       	mov	r20, r24
  d0:	8b 81       	ldd	r24, Y+3	; 0x03
  d2:	28 2f       	mov	r18, r24
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 2e       	mov	r0, r18
  dc:	00 c0       	rjmp	.+0      	; 0xde <DIO_SetPinDirection+0xde>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	0a 94       	dec	r0
  e4:	02 f4       	brpl	.+0      	; 0xe6 <DIO_SetPinDirection+0xe6>
  e6:	80 95       	com	r24
  e8:	84 23       	and	r24, r20
  ea:	8c 93       	st	X, r24
  ec:	00 c0       	rjmp	.+0      	; 0xee <DIO_SetPinDirection+0xee>
  ee:	19 82       	std	Y+1, r1	; 0x01
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <DIO_SetPinDirection+0xf2>
  f2:	8c 81       	ldd	r24, Y+4	; 0x04
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	3a 87       	std	Y+10, r19	; 0x0a
  fa:	29 87       	std	Y+9, r18	; 0x09
  fc:	89 85       	ldd	r24, Y+9	; 0x09
  fe:	9a 85       	ldd	r25, Y+10	; 0x0a
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	01 f0       	breq	.+0      	; 0x104 <DIO_SetPinDirection+0x104>
 104:	29 85       	ldd	r18, Y+9	; 0x09
 106:	3a 85       	ldd	r19, Y+10	; 0x0a
 108:	21 30       	cpi	r18, 0x01	; 1
 10a:	31 05       	cpc	r19, r1
 10c:	01 f4       	brne	.+0      	; 0x10e <DIO_SetPinDirection+0x10e>
 10e:	a7 e3       	ldi	r26, 0x37	; 55
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	e7 e3       	ldi	r30, 0x37	; 55
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	48 2f       	mov	r20, r24
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	28 2f       	mov	r18, r24
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 2e       	mov	r0, r18
 126:	00 c0       	rjmp	.+0      	; 0x128 <DIO_SetPinDirection+0x128>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	0a 94       	dec	r0
 12e:	02 f4       	brpl	.+0      	; 0x130 <DIO_SetPinDirection+0x130>
 130:	84 2b       	or	r24, r20
 132:	8c 93       	st	X, r24
 134:	00 c0       	rjmp	.+0      	; 0x136 <DIO_SetPinDirection+0x136>
 136:	a7 e3       	ldi	r26, 0x37	; 55
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	e7 e3       	ldi	r30, 0x37	; 55
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	48 2f       	mov	r20, r24
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	28 2f       	mov	r18, r24
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 2e       	mov	r0, r18
 14e:	00 c0       	rjmp	.+0      	; 0x150 <DIO_SetPinDirection+0x150>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	0a 94       	dec	r0
 156:	02 f4       	brpl	.+0      	; 0x158 <DIO_SetPinDirection+0x158>
 158:	80 95       	com	r24
 15a:	84 23       	and	r24, r20
 15c:	8c 93       	st	X, r24
 15e:	00 c0       	rjmp	.+0      	; 0x160 <DIO_SetPinDirection+0x160>
 160:	19 82       	std	Y+1, r1	; 0x01
 162:	00 c0       	rjmp	.+0      	; 0x164 <DIO_SetPinDirection+0x164>
 164:	8c 81       	ldd	r24, Y+4	; 0x04
 166:	28 2f       	mov	r18, r24
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	38 87       	std	Y+8, r19	; 0x08
 16c:	2f 83       	std	Y+7, r18	; 0x07
 16e:	8f 81       	ldd	r24, Y+7	; 0x07
 170:	98 85       	ldd	r25, Y+8	; 0x08
 172:	00 97       	sbiw	r24, 0x00	; 0
 174:	01 f0       	breq	.+0      	; 0x176 <DIO_SetPinDirection+0x176>
 176:	2f 81       	ldd	r18, Y+7	; 0x07
 178:	38 85       	ldd	r19, Y+8	; 0x08
 17a:	21 30       	cpi	r18, 0x01	; 1
 17c:	31 05       	cpc	r19, r1
 17e:	01 f0       	breq	.+0      	; 0x180 <DIO_SetPinDirection+0x180>
 180:	00 c0       	rjmp	.+0      	; 0x182 <DIO_SetPinDirection+0x182>
 182:	a4 e3       	ldi	r26, 0x34	; 52
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	e4 e3       	ldi	r30, 0x34	; 52
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	48 2f       	mov	r20, r24
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 2e       	mov	r0, r18
 19a:	00 c0       	rjmp	.+0      	; 0x19c <DIO_SetPinDirection+0x19c>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	0a 94       	dec	r0
 1a2:	02 f4       	brpl	.+0      	; 0x1a4 <DIO_SetPinDirection+0x1a4>
 1a4:	84 2b       	or	r24, r20
 1a6:	8c 93       	st	X, r24
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <DIO_SetPinDirection+0x1aa>
 1aa:	a4 e3       	ldi	r26, 0x34	; 52
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	e4 e3       	ldi	r30, 0x34	; 52
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	48 2f       	mov	r20, r24
 1b6:	8b 81       	ldd	r24, Y+3	; 0x03
 1b8:	28 2f       	mov	r18, r24
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 2e       	mov	r0, r18
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <DIO_SetPinDirection+0x1c4>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	02 f4       	brpl	.+0      	; 0x1cc <DIO_SetPinDirection+0x1cc>
 1cc:	80 95       	com	r24
 1ce:	84 23       	and	r24, r20
 1d0:	8c 93       	st	X, r24
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <DIO_SetPinDirection+0x1d4>
 1d4:	8c 81       	ldd	r24, Y+4	; 0x04
 1d6:	28 2f       	mov	r18, r24
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	3e 83       	std	Y+6, r19	; 0x06
 1dc:	2d 83       	std	Y+5, r18	; 0x05
 1de:	8d 81       	ldd	r24, Y+5	; 0x05
 1e0:	9e 81       	ldd	r25, Y+6	; 0x06
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	01 f0       	breq	.+0      	; 0x1e6 <DIO_SetPinDirection+0x1e6>
 1e6:	2d 81       	ldd	r18, Y+5	; 0x05
 1e8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ea:	21 30       	cpi	r18, 0x01	; 1
 1ec:	31 05       	cpc	r19, r1
 1ee:	01 f4       	brne	.+0      	; 0x1f0 <DIO_SetPinDirection+0x1f0>
 1f0:	a1 e3       	ldi	r26, 0x31	; 49
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	e1 e3       	ldi	r30, 0x31	; 49
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	48 2f       	mov	r20, r24
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	28 2f       	mov	r18, r24
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 2e       	mov	r0, r18
 208:	00 c0       	rjmp	.+0      	; 0x20a <DIO_SetPinDirection+0x20a>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	0a 94       	dec	r0
 210:	02 f4       	brpl	.+0      	; 0x212 <DIO_SetPinDirection+0x212>
 212:	84 2b       	or	r24, r20
 214:	8c 93       	st	X, r24
 216:	00 c0       	rjmp	.+0      	; 0x218 <DIO_SetPinDirection+0x218>
 218:	a1 e3       	ldi	r26, 0x31	; 49
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	e1 e3       	ldi	r30, 0x31	; 49
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	00 c0       	rjmp	.+0      	; 0x232 <DIO_SetPinDirection+0x232>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	02 f4       	brpl	.+0      	; 0x23a <DIO_SetPinDirection+0x23a>
 23a:	80 95       	com	r24
 23c:	84 23       	and	r24, r20
 23e:	8c 93       	st	X, r24
 240:	00 c0       	rjmp	.+0      	; 0x242 <DIO_SetPinDirection+0x242>
 242:	19 82       	std	Y+1, r1	; 0x01
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	2e 96       	adiw	r28, 0x0e	; 14
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	0f be       	out	0x3f, r0	; 63
 250:	cd bf       	out	0x3d, r28	; 61
 252:	cf 91       	pop	r28
 254:	df 91       	pop	r29
 256:	08 95       	ret

Disassembly of section .text.DIO_SetPinValue:

00000000 <DIO_SetPinValue>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
/*****************************< Function Implementations *****************************/
void DIO_vInit(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
	/**< Configure the data direction registers (DDRx) */ 
    DIO_DDRA_R = Conc(DIO_PA7_INITIAL_DIRECTION, DIO_PA6_INITIAL_DIRECTION, DIO_PA5_INITIAL_DIRECTION, DIO_PA4_INITIAL_DIRECTION,
   8:	2e 97       	sbiw	r28, 0x0e	; 14
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
                      DIO_PA3_INITIAL_DIRECTION, DIO_PA2_INITIAL_DIRECTION, DIO_PA1_INITIAL_DIRECTION, DIO_PA0_INITIAL_DIRECTION);

    DIO_DDRB_R = Conc(DIO_PB7_INITIAL_DIRECTION, DIO_PB6_INITIAL_DIRECTION, DIO_PB5_INITIAL_DIRECTION, DIO_PB4_INITIAL_DIRECTION,
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8a 83       	std	Y+2, r24	; 0x02
  16:	6b 83       	std	Y+3, r22	; 0x03
                      DIO_PB3_INITIAL_DIRECTION, DIO_PB2_INITIAL_DIRECTION, DIO_PB1_INITIAL_DIRECTION, DIO_PB0_INITIAL_DIRECTION);

    DIO_DDRC_R = Conc(DIO_PC7_INITIAL_DIRECTION, DIO_PC6_INITIAL_DIRECTION, DIO_PC5_INITIAL_DIRECTION, DIO_PC4_INITIAL_DIRECTION,
  18:	4c 83       	std	Y+4, r20	; 0x04
  1a:	81 e0       	ldi	r24, 0x01	; 1
  1c:	89 83       	std	Y+1, r24	; 0x01
  1e:	8b 81       	ldd	r24, Y+3	; 0x03
                      DIO_PC3_INITIAL_DIRECTION, DIO_PC2_INITIAL_DIRECTION, DIO_PC1_INITIAL_DIRECTION, DIO_PC0_INITIAL_DIRECTION);

    DIO_DDRD_R = Conc(DIO_PD7_INITIAL_DIRECTION, DIO_PD6_INITIAL_DIRECTION, DIO_PD5_INITIAL_DIRECTION, DIO_PD4_INITIAL_DIRECTION,
  20:	88 30       	cpi	r24, 0x08	; 8
  22:	00 f0       	brcs	.+0      	; 0x24 <DIO_SetPinValue+0x24>
  24:	00 c0       	rjmp	.+0      	; 0x26 <DIO_SetPinValue+0x26>
  26:	8a 81       	ldd	r24, Y+2	; 0x02
                      DIO_PD3_INITIAL_DIRECTION, DIO_PD2_INITIAL_DIRECTION, DIO_PD1_INITIAL_DIRECTION, DIO_PD0_INITIAL_DIRECTION);
    
    /**< Set the initial output values for the ports */
    DIO_PORTA_R = Conc(DIO_PA7_INITIAL_VALUE, DIO_PA6_INITIAL_VALUE, DIO_PA5_INITIAL_VALUE, DIO_PA4_INITIAL_VALUE,
  28:	28 2f       	mov	r18, r24
  2a:	30 e0       	ldi	r19, 0x00	; 0
  2c:	3e 87       	std	Y+14, r19	; 0x0e
                       DIO_PA3_INITIAL_VALUE, DIO_PA2_INITIAL_VALUE, DIO_PA1_INITIAL_VALUE, DIO_PA0_INITIAL_VALUE);

    DIO_PORTB_R = Conc(DIO_PB7_INITIAL_VALUE, DIO_PB6_INITIAL_VALUE, DIO_PB5_INITIAL_VALUE, DIO_PB4_INITIAL_VALUE,
  2e:	2d 87       	std	Y+13, r18	; 0x0d
  30:	8d 85       	ldd	r24, Y+13	; 0x0d
  32:	9e 85       	ldd	r25, Y+14	; 0x0e
                       DIO_PB3_INITIAL_VALUE, DIO_PB2_INITIAL_VALUE, DIO_PB1_INITIAL_VALUE, DIO_PB0_INITIAL_VALUE);

    DIO_PORTC_R = Conc(DIO_PC7_INITIAL_VALUE, DIO_PC6_INITIAL_VALUE, DIO_PC5_INITIAL_VALUE, DIO_PC4_INITIAL_VALUE,
  34:	81 30       	cpi	r24, 0x01	; 1
  36:	91 05       	cpc	r25, r1
  38:	01 f4       	brne	.+0      	; 0x3a <DIO_SetPinValue+0x3a>
                       DIO_PC3_INITIAL_VALUE, DIO_PC2_INITIAL_VALUE, DIO_PC1_INITIAL_VALUE, DIO_PC0_INITIAL_VALUE);

    DIO_PORTD_R = Conc(DIO_PD7_INITIAL_VALUE, DIO_PD6_INITIAL_VALUE, DIO_PD5_INITIAL_VALUE, DIO_PD4_INITIAL_VALUE,
  3a:	00 c0       	rjmp	.+0      	; 0x3c <DIO_SetPinValue+0x3c>
  3c:	2d 85       	ldd	r18, Y+13	; 0x0d
  3e:	3e 85       	ldd	r19, Y+14	; 0x0e
                       DIO_PD3_INITIAL_VALUE, DIO_PD2_INITIAL_VALUE, DIO_PD1_INITIAL_VALUE, DIO_PD0_INITIAL_VALUE);
    
}
  40:	22 30       	cpi	r18, 0x02	; 2
  42:	31 05       	cpc	r19, r1
  44:	04 f4       	brge	.+0      	; 0x46 <DIO_SetPinValue+0x46>
  46:	8d 85       	ldd	r24, Y+13	; 0x0d
  48:	9e 85       	ldd	r25, Y+14	; 0x0e
  4a:	00 97       	sbiw	r24, 0x00	; 0
  4c:	01 f0       	breq	.+0      	; 0x4e <DIO_SetPinValue+0x4e>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <DIO_SetPinValue+0x50>
  50:	2d 85       	ldd	r18, Y+13	; 0x0d
  52:	3e 85       	ldd	r19, Y+14	; 0x0e
  54:	22 30       	cpi	r18, 0x02	; 2
  56:	31 05       	cpc	r19, r1
  58:	01 f4       	brne	.+0      	; 0x5a <DIO_SetPinValue+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <DIO_SetPinValue+0x5c>
  5c:	8d 85       	ldd	r24, Y+13	; 0x0d
  5e:	9e 85       	ldd	r25, Y+14	; 0x0e
  60:	83 30       	cpi	r24, 0x03	; 3
  62:	91 05       	cpc	r25, r1
  64:	01 f4       	brne	.+0      	; 0x66 <DIO_SetPinValue+0x66>
  66:	00 c0       	rjmp	.+0      	; 0x68 <DIO_SetPinValue+0x68>
  68:	00 c0       	rjmp	.+0      	; 0x6a <DIO_SetPinValue+0x6a>
  6a:	8c 81       	ldd	r24, Y+4	; 0x04
  6c:	28 2f       	mov	r18, r24
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	3c 87       	std	Y+12, r19	; 0x0c
  72:	2b 87       	std	Y+11, r18	; 0x0b
  74:	8b 85       	ldd	r24, Y+11	; 0x0b
  76:	9c 85       	ldd	r25, Y+12	; 0x0c
  78:	00 97       	sbiw	r24, 0x00	; 0
  7a:	01 f0       	breq	.+0      	; 0x7c <DIO_SetPinValue+0x7c>
  7c:	2b 85       	ldd	r18, Y+11	; 0x0b
  7e:	3c 85       	ldd	r19, Y+12	; 0x0c
  80:	21 30       	cpi	r18, 0x01	; 1
  82:	31 05       	cpc	r19, r1
  84:	01 f4       	brne	.+0      	; 0x86 <DIO_SetPinValue+0x86>
  86:	ab e3       	ldi	r26, 0x3B	; 59
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	eb e3       	ldi	r30, 0x3B	; 59
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	48 2f       	mov	r20, r24
  92:	8b 81       	ldd	r24, Y+3	; 0x03
  94:	28 2f       	mov	r18, r24
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 2e       	mov	r0, r18
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <DIO_SetPinValue+0xa0>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	0a 94       	dec	r0
  a6:	02 f4       	brpl	.+0      	; 0xa8 <DIO_SetPinValue+0xa8>
  a8:	84 2b       	or	r24, r20
  aa:	8c 93       	st	X, r24
  ac:	00 c0       	rjmp	.+0      	; 0xae <DIO_SetPinValue+0xae>
  ae:	ab e3       	ldi	r26, 0x3B	; 59
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	eb e3       	ldi	r30, 0x3B	; 59
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	48 2f       	mov	r20, r24
  ba:	8b 81       	ldd	r24, Y+3	; 0x03
  bc:	28 2f       	mov	r18, r24
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 2e       	mov	r0, r18
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <DIO_SetPinValue+0xc8>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	0a 94       	dec	r0
  ce:	02 f4       	brpl	.+0      	; 0xd0 <DIO_SetPinValue+0xd0>
  d0:	80 95       	com	r24
  d2:	84 23       	and	r24, r20
  d4:	8c 93       	st	X, r24
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <DIO_SetPinValue+0xd8>
  d8:	19 82       	std	Y+1, r1	; 0x01
  da:	00 c0       	rjmp	.+0      	; 0xdc <DIO_SetPinValue+0xdc>
  dc:	8c 81       	ldd	r24, Y+4	; 0x04
  de:	28 2f       	mov	r18, r24
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	3a 87       	std	Y+10, r19	; 0x0a
  e4:	29 87       	std	Y+9, r18	; 0x09
  e6:	89 85       	ldd	r24, Y+9	; 0x09
  e8:	9a 85       	ldd	r25, Y+10	; 0x0a
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	01 f0       	breq	.+0      	; 0xee <DIO_SetPinValue+0xee>
  ee:	29 85       	ldd	r18, Y+9	; 0x09
  f0:	3a 85       	ldd	r19, Y+10	; 0x0a
  f2:	21 30       	cpi	r18, 0x01	; 1
  f4:	31 05       	cpc	r19, r1
  f6:	01 f4       	brne	.+0      	; 0xf8 <DIO_SetPinValue+0xf8>
  f8:	a8 e3       	ldi	r26, 0x38	; 56
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	e8 e3       	ldi	r30, 0x38	; 56
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	48 2f       	mov	r20, r24
 104:	8b 81       	ldd	r24, Y+3	; 0x03
 106:	28 2f       	mov	r18, r24
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 2e       	mov	r0, r18
 110:	00 c0       	rjmp	.+0      	; 0x112 <DIO_SetPinValue+0x112>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	0a 94       	dec	r0
 118:	02 f4       	brpl	.+0      	; 0x11a <DIO_SetPinValue+0x11a>
 11a:	84 2b       	or	r24, r20
 11c:	8c 93       	st	X, r24
 11e:	00 c0       	rjmp	.+0      	; 0x120 <DIO_SetPinValue+0x120>
 120:	a8 e3       	ldi	r26, 0x38	; 56
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e8 e3       	ldi	r30, 0x38	; 56
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	48 2f       	mov	r20, r24
 12c:	8b 81       	ldd	r24, Y+3	; 0x03
 12e:	28 2f       	mov	r18, r24
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 2e       	mov	r0, r18
 138:	00 c0       	rjmp	.+0      	; 0x13a <DIO_SetPinValue+0x13a>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	0a 94       	dec	r0
 140:	02 f4       	brpl	.+0      	; 0x142 <DIO_SetPinValue+0x142>
 142:	80 95       	com	r24
 144:	84 23       	and	r24, r20
 146:	8c 93       	st	X, r24
 148:	00 c0       	rjmp	.+0      	; 0x14a <DIO_SetPinValue+0x14a>
 14a:	19 82       	std	Y+1, r1	; 0x01
 14c:	00 c0       	rjmp	.+0      	; 0x14e <DIO_SetPinValue+0x14e>
 14e:	8c 81       	ldd	r24, Y+4	; 0x04
 150:	28 2f       	mov	r18, r24
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	38 87       	std	Y+8, r19	; 0x08
 156:	2f 83       	std	Y+7, r18	; 0x07
 158:	8f 81       	ldd	r24, Y+7	; 0x07
 15a:	98 85       	ldd	r25, Y+8	; 0x08
 15c:	00 97       	sbiw	r24, 0x00	; 0
 15e:	01 f0       	breq	.+0      	; 0x160 <DIO_SetPinValue+0x160>
 160:	2f 81       	ldd	r18, Y+7	; 0x07
 162:	38 85       	ldd	r19, Y+8	; 0x08
 164:	21 30       	cpi	r18, 0x01	; 1
 166:	31 05       	cpc	r19, r1
 168:	01 f4       	brne	.+0      	; 0x16a <DIO_SetPinValue+0x16a>
 16a:	a5 e3       	ldi	r26, 0x35	; 53
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	e5 e3       	ldi	r30, 0x35	; 53
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	48 2f       	mov	r20, r24
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 2e       	mov	r0, r18
 182:	00 c0       	rjmp	.+0      	; 0x184 <DIO_SetPinValue+0x184>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	0a 94       	dec	r0
 18a:	02 f4       	brpl	.+0      	; 0x18c <DIO_SetPinValue+0x18c>
 18c:	84 2b       	or	r24, r20
 18e:	8c 93       	st	X, r24
 190:	00 c0       	rjmp	.+0      	; 0x192 <DIO_SetPinValue+0x192>
 192:	a5 e3       	ldi	r26, 0x35	; 53
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	e5 e3       	ldi	r30, 0x35	; 53
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	48 2f       	mov	r20, r24
 19e:	8b 81       	ldd	r24, Y+3	; 0x03
 1a0:	28 2f       	mov	r18, r24
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 2e       	mov	r0, r18
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <DIO_SetPinValue+0x1ac>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	0a 94       	dec	r0
 1b2:	02 f4       	brpl	.+0      	; 0x1b4 <DIO_SetPinValue+0x1b4>
 1b4:	80 95       	com	r24
 1b6:	84 23       	and	r24, r20
 1b8:	8c 93       	st	X, r24
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <DIO_SetPinValue+0x1bc>
 1bc:	19 82       	std	Y+1, r1	; 0x01
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <DIO_SetPinValue+0x1c0>
 1c0:	8c 81       	ldd	r24, Y+4	; 0x04
 1c2:	28 2f       	mov	r18, r24
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	3e 83       	std	Y+6, r19	; 0x06
 1c8:	2d 83       	std	Y+5, r18	; 0x05
 1ca:	8d 81       	ldd	r24, Y+5	; 0x05
 1cc:	9e 81       	ldd	r25, Y+6	; 0x06
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	01 f0       	breq	.+0      	; 0x1d2 <DIO_SetPinValue+0x1d2>
 1d2:	2d 81       	ldd	r18, Y+5	; 0x05
 1d4:	3e 81       	ldd	r19, Y+6	; 0x06
 1d6:	21 30       	cpi	r18, 0x01	; 1
 1d8:	31 05       	cpc	r19, r1
 1da:	01 f4       	brne	.+0      	; 0x1dc <DIO_SetPinValue+0x1dc>
 1dc:	a2 e3       	ldi	r26, 0x32	; 50
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	e2 e3       	ldi	r30, 0x32	; 50
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	48 2f       	mov	r20, r24
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 2e       	mov	r0, r18
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <DIO_SetPinValue+0x1f6>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	0a 94       	dec	r0
 1fc:	02 f4       	brpl	.+0      	; 0x1fe <DIO_SetPinValue+0x1fe>
 1fe:	84 2b       	or	r24, r20
 200:	8c 93       	st	X, r24
 202:	00 c0       	rjmp	.+0      	; 0x204 <DIO_SetPinValue+0x204>
 204:	a2 e3       	ldi	r26, 0x32	; 50
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e2 e3       	ldi	r30, 0x32	; 50
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 2e       	mov	r0, r18
 21c:	00 c0       	rjmp	.+0      	; 0x21e <DIO_SetPinValue+0x21e>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	0a 94       	dec	r0
 224:	02 f4       	brpl	.+0      	; 0x226 <DIO_SetPinValue+0x226>
 226:	80 95       	com	r24
 228:	84 23       	and	r24, r20
 22a:	8c 93       	st	X, r24
 22c:	00 c0       	rjmp	.+0      	; 0x22e <DIO_SetPinValue+0x22e>
 22e:	19 82       	std	Y+1, r1	; 0x01
 230:	00 c0       	rjmp	.+0      	; 0x232 <DIO_SetPinValue+0x232>
 232:	19 82       	std	Y+1, r1	; 0x01
 234:	00 c0       	rjmp	.+0      	; 0x236 <DIO_SetPinValue+0x236>
 236:	19 82       	std	Y+1, r1	; 0x01
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	2e 96       	adiw	r28, 0x0e	; 14
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	cf 91       	pop	r28
 248:	df 91       	pop	r29
 24a:	08 95       	ret

Disassembly of section .text.DIO_GetPinValue:

00000000 <DIO_GetPinValue>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
/*****************************< Function Implementations *****************************/
void DIO_vInit(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
	/**< Configure the data direction registers (DDRx) */ 
    DIO_DDRA_R = Conc(DIO_PA7_INITIAL_DIRECTION, DIO_PA6_INITIAL_DIRECTION, DIO_PA5_INITIAL_DIRECTION, DIO_PA4_INITIAL_DIRECTION,
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
                      DIO_PA3_INITIAL_DIRECTION, DIO_PA2_INITIAL_DIRECTION, DIO_PA1_INITIAL_DIRECTION, DIO_PA0_INITIAL_DIRECTION);

    DIO_DDRB_R = Conc(DIO_PB7_INITIAL_DIRECTION, DIO_PB6_INITIAL_DIRECTION, DIO_PB5_INITIAL_DIRECTION, DIO_PB4_INITIAL_DIRECTION,
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8a 83       	std	Y+2, r24	; 0x02
  16:	6b 83       	std	Y+3, r22	; 0x03
                      DIO_PB3_INITIAL_DIRECTION, DIO_PB2_INITIAL_DIRECTION, DIO_PB1_INITIAL_DIRECTION, DIO_PB0_INITIAL_DIRECTION);

    DIO_DDRC_R = Conc(DIO_PC7_INITIAL_DIRECTION, DIO_PC6_INITIAL_DIRECTION, DIO_PC5_INITIAL_DIRECTION, DIO_PC4_INITIAL_DIRECTION,
  18:	5d 83       	std	Y+5, r21	; 0x05
  1a:	4c 83       	std	Y+4, r20	; 0x04
  1c:	81 e0       	ldi	r24, 0x01	; 1
  1e:	89 83       	std	Y+1, r24	; 0x01
                      DIO_PC3_INITIAL_DIRECTION, DIO_PC2_INITIAL_DIRECTION, DIO_PC1_INITIAL_DIRECTION, DIO_PC0_INITIAL_DIRECTION);

    DIO_DDRD_R = Conc(DIO_PD7_INITIAL_DIRECTION, DIO_PD6_INITIAL_DIRECTION, DIO_PD5_INITIAL_DIRECTION, DIO_PD4_INITIAL_DIRECTION,
  20:	8a 81       	ldd	r24, Y+2	; 0x02
  22:	88 30       	cpi	r24, 0x08	; 8
  24:	00 f0       	brcs	.+0      	; 0x26 <DIO_GetPinValue+0x26>
  26:	00 c0       	rjmp	.+0      	; 0x28 <DIO_GetPinValue+0x28>
                      DIO_PD3_INITIAL_DIRECTION, DIO_PD2_INITIAL_DIRECTION, DIO_PD1_INITIAL_DIRECTION, DIO_PD0_INITIAL_DIRECTION);
    
    /**< Set the initial output values for the ports */
    DIO_PORTA_R = Conc(DIO_PA7_INITIAL_VALUE, DIO_PA6_INITIAL_VALUE, DIO_PA5_INITIAL_VALUE, DIO_PA4_INITIAL_VALUE,
  28:	8c 81       	ldd	r24, Y+4	; 0x04
  2a:	9d 81       	ldd	r25, Y+5	; 0x05
  2c:	00 97       	sbiw	r24, 0x00	; 0
                       DIO_PA3_INITIAL_VALUE, DIO_PA2_INITIAL_VALUE, DIO_PA1_INITIAL_VALUE, DIO_PA0_INITIAL_VALUE);

    DIO_PORTB_R = Conc(DIO_PB7_INITIAL_VALUE, DIO_PB6_INITIAL_VALUE, DIO_PB5_INITIAL_VALUE, DIO_PB4_INITIAL_VALUE,
  2e:	01 f4       	brne	.+0      	; 0x30 <DIO_GetPinValue+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <DIO_GetPinValue+0x32>
  32:	8a 81       	ldd	r24, Y+2	; 0x02
                       DIO_PB3_INITIAL_VALUE, DIO_PB2_INITIAL_VALUE, DIO_PB1_INITIAL_VALUE, DIO_PB0_INITIAL_VALUE);

    DIO_PORTC_R = Conc(DIO_PC7_INITIAL_VALUE, DIO_PC6_INITIAL_VALUE, DIO_PC5_INITIAL_VALUE, DIO_PC4_INITIAL_VALUE,
  34:	28 2f       	mov	r18, r24
  36:	30 e0       	ldi	r19, 0x00	; 0
  38:	3f 83       	std	Y+7, r19	; 0x07
                       DIO_PC3_INITIAL_VALUE, DIO_PC2_INITIAL_VALUE, DIO_PC1_INITIAL_VALUE, DIO_PC0_INITIAL_VALUE);

    DIO_PORTD_R = Conc(DIO_PD7_INITIAL_VALUE, DIO_PD6_INITIAL_VALUE, DIO_PD5_INITIAL_VALUE, DIO_PD4_INITIAL_VALUE,
  3a:	2e 83       	std	Y+6, r18	; 0x06
  3c:	4e 81       	ldd	r20, Y+6	; 0x06
  3e:	5f 81       	ldd	r21, Y+7	; 0x07
                       DIO_PD3_INITIAL_VALUE, DIO_PD2_INITIAL_VALUE, DIO_PD1_INITIAL_VALUE, DIO_PD0_INITIAL_VALUE);
    
}
  40:	41 30       	cpi	r20, 0x01	; 1
  42:	51 05       	cpc	r21, r1
  44:	01 f4       	brne	.+0      	; 0x46 <DIO_GetPinValue+0x46>
  46:	00 c0       	rjmp	.+0      	; 0x48 <DIO_GetPinValue+0x48>
  48:	8e 81       	ldd	r24, Y+6	; 0x06
  4a:	9f 81       	ldd	r25, Y+7	; 0x07
  4c:	82 30       	cpi	r24, 0x02	; 2
  4e:	91 05       	cpc	r25, r1
  50:	04 f4       	brge	.+0      	; 0x52 <DIO_GetPinValue+0x52>
  52:	2e 81       	ldd	r18, Y+6	; 0x06
  54:	3f 81       	ldd	r19, Y+7	; 0x07
  56:	21 15       	cp	r18, r1
  58:	31 05       	cpc	r19, r1
  5a:	01 f0       	breq	.+0      	; 0x5c <DIO_GetPinValue+0x5c>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <DIO_GetPinValue+0x5e>
  5e:	4e 81       	ldd	r20, Y+6	; 0x06
  60:	5f 81       	ldd	r21, Y+7	; 0x07
  62:	42 30       	cpi	r20, 0x02	; 2
  64:	51 05       	cpc	r21, r1
  66:	01 f4       	brne	.+0      	; 0x68 <DIO_GetPinValue+0x68>
  68:	00 c0       	rjmp	.+0      	; 0x6a <DIO_GetPinValue+0x6a>
  6a:	8e 81       	ldd	r24, Y+6	; 0x06
  6c:	9f 81       	ldd	r25, Y+7	; 0x07
  6e:	83 30       	cpi	r24, 0x03	; 3
  70:	91 05       	cpc	r25, r1
  72:	01 f4       	brne	.+0      	; 0x74 <DIO_GetPinValue+0x74>
  74:	00 c0       	rjmp	.+0      	; 0x76 <DIO_GetPinValue+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <DIO_GetPinValue+0x78>
  78:	e9 e3       	ldi	r30, 0x39	; 57
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	48 2f       	mov	r20, r24
  80:	50 e0       	ldi	r21, 0x00	; 0
  82:	8b 81       	ldd	r24, Y+3	; 0x03
  84:	28 2f       	mov	r18, r24
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	00 c0       	rjmp	.+0      	; 0x8e <DIO_GetPinValue+0x8e>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	2a 95       	dec	r18
  94:	02 f4       	brpl	.+0      	; 0x96 <DIO_GetPinValue+0x96>
  96:	9a 01       	movw	r18, r20
  98:	28 23       	and	r18, r24
  9a:	39 23       	and	r19, r25
  9c:	8b 81       	ldd	r24, Y+3	; 0x03
  9e:	88 2f       	mov	r24, r24
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	a9 01       	movw	r20, r18
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <DIO_GetPinValue+0xa6>
  a6:	55 95       	asr	r21
  a8:	47 95       	ror	r20
  aa:	8a 95       	dec	r24
  ac:	02 f4       	brpl	.+0      	; 0xae <DIO_GetPinValue+0xae>
  ae:	ca 01       	movw	r24, r20
  b0:	ec 81       	ldd	r30, Y+4	; 0x04
  b2:	fd 81       	ldd	r31, Y+5	; 0x05
  b4:	80 83       	st	Z, r24
  b6:	ec 81       	ldd	r30, Y+4	; 0x04
  b8:	fd 81       	ldd	r31, Y+5	; 0x05
  ba:	80 81       	ld	r24, Z
  bc:	88 23       	and	r24, r24
  be:	01 f4       	brne	.+0      	; 0xc0 <DIO_GetPinValue+0xc0>
  c0:	ec 81       	ldd	r30, Y+4	; 0x04
  c2:	fd 81       	ldd	r31, Y+5	; 0x05
  c4:	10 82       	st	Z, r1
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <DIO_GetPinValue+0xc8>
  c8:	ec 81       	ldd	r30, Y+4	; 0x04
  ca:	fd 81       	ldd	r31, Y+5	; 0x05
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 83       	st	Z, r24
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <DIO_GetPinValue+0xd2>
  d2:	e6 e3       	ldi	r30, 0x36	; 54
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	48 2f       	mov	r20, r24
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	8b 81       	ldd	r24, Y+3	; 0x03
  de:	28 2f       	mov	r18, r24
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <DIO_GetPinValue+0xe8>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	2a 95       	dec	r18
  ee:	02 f4       	brpl	.+0      	; 0xf0 <DIO_GetPinValue+0xf0>
  f0:	9a 01       	movw	r18, r20
  f2:	28 23       	and	r18, r24
  f4:	39 23       	and	r19, r25
  f6:	8b 81       	ldd	r24, Y+3	; 0x03
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	a9 01       	movw	r20, r18
  fe:	00 c0       	rjmp	.+0      	; 0x100 <DIO_GetPinValue+0x100>
 100:	55 95       	asr	r21
 102:	47 95       	ror	r20
 104:	8a 95       	dec	r24
 106:	02 f4       	brpl	.+0      	; 0x108 <DIO_GetPinValue+0x108>
 108:	ca 01       	movw	r24, r20
 10a:	ec 81       	ldd	r30, Y+4	; 0x04
 10c:	fd 81       	ldd	r31, Y+5	; 0x05
 10e:	80 83       	st	Z, r24
 110:	ec 81       	ldd	r30, Y+4	; 0x04
 112:	fd 81       	ldd	r31, Y+5	; 0x05
 114:	80 81       	ld	r24, Z
 116:	88 23       	and	r24, r24
 118:	01 f4       	brne	.+0      	; 0x11a <DIO_GetPinValue+0x11a>
 11a:	ec 81       	ldd	r30, Y+4	; 0x04
 11c:	fd 81       	ldd	r31, Y+5	; 0x05
 11e:	10 82       	st	Z, r1
 120:	00 c0       	rjmp	.+0      	; 0x122 <DIO_GetPinValue+0x122>
 122:	ec 81       	ldd	r30, Y+4	; 0x04
 124:	fd 81       	ldd	r31, Y+5	; 0x05
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
 12a:	00 c0       	rjmp	.+0      	; 0x12c <DIO_GetPinValue+0x12c>
 12c:	e3 e3       	ldi	r30, 0x33	; 51
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	48 2f       	mov	r20, r24
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	8b 81       	ldd	r24, Y+3	; 0x03
 138:	28 2f       	mov	r18, r24
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	00 c0       	rjmp	.+0      	; 0x142 <DIO_GetPinValue+0x142>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	2a 95       	dec	r18
 148:	02 f4       	brpl	.+0      	; 0x14a <DIO_GetPinValue+0x14a>
 14a:	9a 01       	movw	r18, r20
 14c:	28 23       	and	r18, r24
 14e:	39 23       	and	r19, r25
 150:	8b 81       	ldd	r24, Y+3	; 0x03
 152:	88 2f       	mov	r24, r24
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	a9 01       	movw	r20, r18
 158:	00 c0       	rjmp	.+0      	; 0x15a <DIO_GetPinValue+0x15a>
 15a:	55 95       	asr	r21
 15c:	47 95       	ror	r20
 15e:	8a 95       	dec	r24
 160:	02 f4       	brpl	.+0      	; 0x162 <DIO_GetPinValue+0x162>
 162:	ca 01       	movw	r24, r20
 164:	ec 81       	ldd	r30, Y+4	; 0x04
 166:	fd 81       	ldd	r31, Y+5	; 0x05
 168:	80 83       	st	Z, r24
 16a:	ec 81       	ldd	r30, Y+4	; 0x04
 16c:	fd 81       	ldd	r31, Y+5	; 0x05
 16e:	80 81       	ld	r24, Z
 170:	88 23       	and	r24, r24
 172:	01 f4       	brne	.+0      	; 0x174 <DIO_GetPinValue+0x174>
 174:	ec 81       	ldd	r30, Y+4	; 0x04
 176:	fd 81       	ldd	r31, Y+5	; 0x05
 178:	10 82       	st	Z, r1
 17a:	00 c0       	rjmp	.+0      	; 0x17c <DIO_GetPinValue+0x17c>
 17c:	ec 81       	ldd	r30, Y+4	; 0x04
 17e:	fd 81       	ldd	r31, Y+5	; 0x05
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 83       	st	Z, r24
 184:	00 c0       	rjmp	.+0      	; 0x186 <DIO_GetPinValue+0x186>
 186:	e0 e3       	ldi	r30, 0x30	; 48
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	48 2f       	mov	r20, r24
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	8b 81       	ldd	r24, Y+3	; 0x03
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	00 c0       	rjmp	.+0      	; 0x19c <DIO_GetPinValue+0x19c>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	2a 95       	dec	r18
 1a2:	02 f4       	brpl	.+0      	; 0x1a4 <DIO_GetPinValue+0x1a4>
 1a4:	9a 01       	movw	r18, r20
 1a6:	28 23       	and	r18, r24
 1a8:	39 23       	and	r19, r25
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	88 2f       	mov	r24, r24
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	a9 01       	movw	r20, r18
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <DIO_GetPinValue+0x1b4>
 1b4:	55 95       	asr	r21
 1b6:	47 95       	ror	r20
 1b8:	8a 95       	dec	r24
 1ba:	02 f4       	brpl	.+0      	; 0x1bc <DIO_GetPinValue+0x1bc>
 1bc:	ca 01       	movw	r24, r20
 1be:	ec 81       	ldd	r30, Y+4	; 0x04
 1c0:	fd 81       	ldd	r31, Y+5	; 0x05
 1c2:	80 83       	st	Z, r24
 1c4:	ec 81       	ldd	r30, Y+4	; 0x04
 1c6:	fd 81       	ldd	r31, Y+5	; 0x05
 1c8:	80 81       	ld	r24, Z
 1ca:	88 23       	and	r24, r24
 1cc:	01 f4       	brne	.+0      	; 0x1ce <DIO_GetPinValue+0x1ce>
 1ce:	ec 81       	ldd	r30, Y+4	; 0x04
 1d0:	fd 81       	ldd	r31, Y+5	; 0x05
 1d2:	10 82       	st	Z, r1
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <DIO_GetPinValue+0x1d6>
 1d6:	ec 81       	ldd	r30, Y+4	; 0x04
 1d8:	fd 81       	ldd	r31, Y+5	; 0x05
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 83       	st	Z, r24
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <DIO_GetPinValue+0x1e0>
 1e0:	19 82       	std	Y+1, r1	; 0x01
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <DIO_GetPinValue+0x1e4>
 1e4:	19 82       	std	Y+1, r1	; 0x01
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	27 96       	adiw	r28, 0x07	; 7
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
 1f4:	cf 91       	pop	r28
 1f6:	df 91       	pop	r29
 1f8:	08 95       	ret

Disassembly of section .text.DIO_SetPortDirection:

00000000 <DIO_SetPortDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
/*****************************< Function Implementations *****************************/
void DIO_vInit(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
	/**< Configure the data direction registers (DDRx) */ 
    DIO_DDRA_R = Conc(DIO_PA7_INITIAL_DIRECTION, DIO_PA6_INITIAL_DIRECTION, DIO_PA5_INITIAL_DIRECTION, DIO_PA4_INITIAL_DIRECTION,
   8:	2d 97       	sbiw	r28, 0x0d	; 13
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
                      DIO_PA3_INITIAL_DIRECTION, DIO_PA2_INITIAL_DIRECTION, DIO_PA1_INITIAL_DIRECTION, DIO_PA0_INITIAL_DIRECTION);

    DIO_DDRB_R = Conc(DIO_PB7_INITIAL_DIRECTION, DIO_PB6_INITIAL_DIRECTION, DIO_PB5_INITIAL_DIRECTION, DIO_PB4_INITIAL_DIRECTION,
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8a 83       	std	Y+2, r24	; 0x02
  16:	6b 83       	std	Y+3, r22	; 0x03
                      DIO_PB3_INITIAL_DIRECTION, DIO_PB2_INITIAL_DIRECTION, DIO_PB1_INITIAL_DIRECTION, DIO_PB0_INITIAL_DIRECTION);

    DIO_DDRC_R = Conc(DIO_PC7_INITIAL_DIRECTION, DIO_PC6_INITIAL_DIRECTION, DIO_PC5_INITIAL_DIRECTION, DIO_PC4_INITIAL_DIRECTION,
  18:	81 e0       	ldi	r24, 0x01	; 1
  1a:	89 83       	std	Y+1, r24	; 0x01
  1c:	8b 81       	ldd	r24, Y+3	; 0x03
  1e:	81 30       	cpi	r24, 0x01	; 1
                      DIO_PC3_INITIAL_DIRECTION, DIO_PC2_INITIAL_DIRECTION, DIO_PC1_INITIAL_DIRECTION, DIO_PC0_INITIAL_DIRECTION);

    DIO_DDRD_R = Conc(DIO_PD7_INITIAL_DIRECTION, DIO_PD6_INITIAL_DIRECTION, DIO_PD5_INITIAL_DIRECTION, DIO_PD4_INITIAL_DIRECTION,
  20:	01 f0       	breq	.+0      	; 0x22 <DIO_SetPortDirection+0x22>
  22:	8b 81       	ldd	r24, Y+3	; 0x03
  24:	88 23       	and	r24, r24
  26:	01 f0       	breq	.+0      	; 0x28 <DIO_SetPortDirection+0x28>
                      DIO_PD3_INITIAL_DIRECTION, DIO_PD2_INITIAL_DIRECTION, DIO_PD1_INITIAL_DIRECTION, DIO_PD0_INITIAL_DIRECTION);
    
    /**< Set the initial output values for the ports */
    DIO_PORTA_R = Conc(DIO_PA7_INITIAL_VALUE, DIO_PA6_INITIAL_VALUE, DIO_PA5_INITIAL_VALUE, DIO_PA4_INITIAL_VALUE,
  28:	00 c0       	rjmp	.+0      	; 0x2a <DIO_SetPortDirection+0x2a>
  2a:	8a 81       	ldd	r24, Y+2	; 0x02
  2c:	28 2f       	mov	r18, r24
                       DIO_PA3_INITIAL_VALUE, DIO_PA2_INITIAL_VALUE, DIO_PA1_INITIAL_VALUE, DIO_PA0_INITIAL_VALUE);

    DIO_PORTB_R = Conc(DIO_PB7_INITIAL_VALUE, DIO_PB6_INITIAL_VALUE, DIO_PB5_INITIAL_VALUE, DIO_PB4_INITIAL_VALUE,
  2e:	30 e0       	ldi	r19, 0x00	; 0
  30:	3d 87       	std	Y+13, r19	; 0x0d
  32:	2c 87       	std	Y+12, r18	; 0x0c
                       DIO_PB3_INITIAL_VALUE, DIO_PB2_INITIAL_VALUE, DIO_PB1_INITIAL_VALUE, DIO_PB0_INITIAL_VALUE);

    DIO_PORTC_R = Conc(DIO_PC7_INITIAL_VALUE, DIO_PC6_INITIAL_VALUE, DIO_PC5_INITIAL_VALUE, DIO_PC4_INITIAL_VALUE,
  34:	8c 85       	ldd	r24, Y+12	; 0x0c
  36:	9d 85       	ldd	r25, Y+13	; 0x0d
  38:	81 30       	cpi	r24, 0x01	; 1
                       DIO_PC3_INITIAL_VALUE, DIO_PC2_INITIAL_VALUE, DIO_PC1_INITIAL_VALUE, DIO_PC0_INITIAL_VALUE);

    DIO_PORTD_R = Conc(DIO_PD7_INITIAL_VALUE, DIO_PD6_INITIAL_VALUE, DIO_PD5_INITIAL_VALUE, DIO_PD4_INITIAL_VALUE,
  3a:	91 05       	cpc	r25, r1
  3c:	01 f0       	breq	.+0      	; 0x3e <DIO_SetPortDirection+0x3e>
  3e:	2c 85       	ldd	r18, Y+12	; 0x0c
                       DIO_PD3_INITIAL_VALUE, DIO_PD2_INITIAL_VALUE, DIO_PD1_INITIAL_VALUE, DIO_PD0_INITIAL_VALUE);
    
}
  40:	3d 85       	ldd	r19, Y+13	; 0x0d
  42:	22 30       	cpi	r18, 0x02	; 2
  44:	31 05       	cpc	r19, r1
  46:	04 f4       	brge	.+0      	; 0x48 <DIO_SetPortDirection+0x48>
  48:	8c 85       	ldd	r24, Y+12	; 0x0c
  4a:	9d 85       	ldd	r25, Y+13	; 0x0d
  4c:	00 97       	sbiw	r24, 0x00	; 0
  4e:	01 f0       	breq	.+0      	; 0x50 <DIO_SetPortDirection+0x50>
  50:	00 c0       	rjmp	.+0      	; 0x52 <DIO_SetPortDirection+0x52>
  52:	2c 85       	ldd	r18, Y+12	; 0x0c
  54:	3d 85       	ldd	r19, Y+13	; 0x0d
  56:	22 30       	cpi	r18, 0x02	; 2
  58:	31 05       	cpc	r19, r1
  5a:	01 f0       	breq	.+0      	; 0x5c <DIO_SetPortDirection+0x5c>
  5c:	8c 85       	ldd	r24, Y+12	; 0x0c
  5e:	9d 85       	ldd	r25, Y+13	; 0x0d
  60:	83 30       	cpi	r24, 0x03	; 3
  62:	91 05       	cpc	r25, r1
  64:	01 f4       	brne	.+0      	; 0x66 <DIO_SetPortDirection+0x66>
  66:	00 c0       	rjmp	.+0      	; 0x68 <DIO_SetPortDirection+0x68>
  68:	00 c0       	rjmp	.+0      	; 0x6a <DIO_SetPortDirection+0x6a>
  6a:	8b 81       	ldd	r24, Y+3	; 0x03
  6c:	28 2f       	mov	r18, r24
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	3b 87       	std	Y+11, r19	; 0x0b
  72:	2a 87       	std	Y+10, r18	; 0x0a
  74:	8a 85       	ldd	r24, Y+10	; 0x0a
  76:	9b 85       	ldd	r25, Y+11	; 0x0b
  78:	00 97       	sbiw	r24, 0x00	; 0
  7a:	01 f0       	breq	.+0      	; 0x7c <DIO_SetPortDirection+0x7c>
  7c:	2a 85       	ldd	r18, Y+10	; 0x0a
  7e:	3b 85       	ldd	r19, Y+11	; 0x0b
  80:	21 30       	cpi	r18, 0x01	; 1
  82:	31 05       	cpc	r19, r1
  84:	01 f4       	brne	.+0      	; 0x86 <DIO_SetPortDirection+0x86>
  86:	ea e3       	ldi	r30, 0x3A	; 58
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	80 83       	st	Z, r24
  8e:	00 c0       	rjmp	.+0      	; 0x90 <DIO_SetPortDirection+0x90>
  90:	ea e3       	ldi	r30, 0x3A	; 58
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
  96:	00 c0       	rjmp	.+0      	; 0x98 <DIO_SetPortDirection+0x98>
  98:	19 82       	std	Y+1, r1	; 0x01
  9a:	00 c0       	rjmp	.+0      	; 0x9c <DIO_SetPortDirection+0x9c>
  9c:	8b 81       	ldd	r24, Y+3	; 0x03
  9e:	28 2f       	mov	r18, r24
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	39 87       	std	Y+9, r19	; 0x09
  a4:	28 87       	std	Y+8, r18	; 0x08
  a6:	88 85       	ldd	r24, Y+8	; 0x08
  a8:	99 85       	ldd	r25, Y+9	; 0x09
  aa:	00 97       	sbiw	r24, 0x00	; 0
  ac:	01 f0       	breq	.+0      	; 0xae <DIO_SetPortDirection+0xae>
  ae:	28 85       	ldd	r18, Y+8	; 0x08
  b0:	39 85       	ldd	r19, Y+9	; 0x09
  b2:	21 30       	cpi	r18, 0x01	; 1
  b4:	31 05       	cpc	r19, r1
  b6:	01 f4       	brne	.+0      	; 0xb8 <DIO_SetPortDirection+0xb8>
  b8:	e7 e3       	ldi	r30, 0x37	; 55
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	80 83       	st	Z, r24
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <DIO_SetPortDirection+0xc2>
  c2:	e7 e3       	ldi	r30, 0x37	; 55
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
  c8:	00 c0       	rjmp	.+0      	; 0xca <DIO_SetPortDirection+0xca>
  ca:	19 82       	std	Y+1, r1	; 0x01
  cc:	00 c0       	rjmp	.+0      	; 0xce <DIO_SetPortDirection+0xce>
  ce:	8b 81       	ldd	r24, Y+3	; 0x03
  d0:	28 2f       	mov	r18, r24
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	3f 83       	std	Y+7, r19	; 0x07
  d6:	2e 83       	std	Y+6, r18	; 0x06
  d8:	8e 81       	ldd	r24, Y+6	; 0x06
  da:	9f 81       	ldd	r25, Y+7	; 0x07
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	01 f0       	breq	.+0      	; 0xe0 <DIO_SetPortDirection+0xe0>
  e0:	2e 81       	ldd	r18, Y+6	; 0x06
  e2:	3f 81       	ldd	r19, Y+7	; 0x07
  e4:	21 30       	cpi	r18, 0x01	; 1
  e6:	31 05       	cpc	r19, r1
  e8:	01 f4       	brne	.+0      	; 0xea <DIO_SetPortDirection+0xea>
  ea:	e4 e3       	ldi	r30, 0x34	; 52
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	80 83       	st	Z, r24
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <DIO_SetPortDirection+0xf4>
  f4:	e4 e3       	ldi	r30, 0x34	; 52
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	10 82       	st	Z, r1
  fa:	00 c0       	rjmp	.+0      	; 0xfc <DIO_SetPortDirection+0xfc>
  fc:	19 82       	std	Y+1, r1	; 0x01
  fe:	00 c0       	rjmp	.+0      	; 0x100 <DIO_SetPortDirection+0x100>
 100:	8b 81       	ldd	r24, Y+3	; 0x03
 102:	28 2f       	mov	r18, r24
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	3d 83       	std	Y+5, r19	; 0x05
 108:	2c 83       	std	Y+4, r18	; 0x04
 10a:	8c 81       	ldd	r24, Y+4	; 0x04
 10c:	9d 81       	ldd	r25, Y+5	; 0x05
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	01 f0       	breq	.+0      	; 0x112 <DIO_SetPortDirection+0x112>
 112:	2c 81       	ldd	r18, Y+4	; 0x04
 114:	3d 81       	ldd	r19, Y+5	; 0x05
 116:	21 30       	cpi	r18, 0x01	; 1
 118:	31 05       	cpc	r19, r1
 11a:	01 f4       	brne	.+0      	; 0x11c <DIO_SetPortDirection+0x11c>
 11c:	e1 e3       	ldi	r30, 0x31	; 49
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	80 83       	st	Z, r24
 124:	00 c0       	rjmp	.+0      	; 0x126 <DIO_SetPortDirection+0x126>
 126:	e1 e3       	ldi	r30, 0x31	; 49
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	10 82       	st	Z, r1
 12c:	00 c0       	rjmp	.+0      	; 0x12e <DIO_SetPortDirection+0x12e>
 12e:	19 82       	std	Y+1, r1	; 0x01
 130:	00 c0       	rjmp	.+0      	; 0x132 <DIO_SetPortDirection+0x132>
 132:	19 82       	std	Y+1, r1	; 0x01
 134:	00 c0       	rjmp	.+0      	; 0x136 <DIO_SetPortDirection+0x136>
 136:	19 82       	std	Y+1, r1	; 0x01
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	2d 96       	adiw	r28, 0x0d	; 13
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
 146:	cf 91       	pop	r28
 148:	df 91       	pop	r29
 14a:	08 95       	ret

Disassembly of section .text.DIO_SetPortValue:

00000000 <DIO_SetPortValue>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
/*****************************< Function Implementations *****************************/
void DIO_vInit(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <DIO_SetPortValue+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <DIO_SetPortValue+0x8>
	/**< Configure the data direction registers (DDRx) */ 
    DIO_DDRA_R = Conc(DIO_PA7_INITIAL_DIRECTION, DIO_PA6_INITIAL_DIRECTION, DIO_PA5_INITIAL_DIRECTION, DIO_PA4_INITIAL_DIRECTION,
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8a 83       	std	Y+2, r24	; 0x02
                      DIO_PA3_INITIAL_DIRECTION, DIO_PA2_INITIAL_DIRECTION, DIO_PA1_INITIAL_DIRECTION, DIO_PA0_INITIAL_DIRECTION);

    DIO_DDRB_R = Conc(DIO_PB7_INITIAL_DIRECTION, DIO_PB6_INITIAL_DIRECTION, DIO_PB5_INITIAL_DIRECTION, DIO_PB4_INITIAL_DIRECTION,
  10:	6b 83       	std	Y+3, r22	; 0x03
  12:	81 e0       	ldi	r24, 0x01	; 1
  14:	89 83       	std	Y+1, r24	; 0x01
  16:	8a 81       	ldd	r24, Y+2	; 0x02
                      DIO_PB3_INITIAL_DIRECTION, DIO_PB2_INITIAL_DIRECTION, DIO_PB1_INITIAL_DIRECTION, DIO_PB0_INITIAL_DIRECTION);

    DIO_DDRC_R = Conc(DIO_PC7_INITIAL_DIRECTION, DIO_PC6_INITIAL_DIRECTION, DIO_PC5_INITIAL_DIRECTION, DIO_PC4_INITIAL_DIRECTION,
  18:	28 2f       	mov	r18, r24
  1a:	30 e0       	ldi	r19, 0x00	; 0
  1c:	3d 83       	std	Y+5, r19	; 0x05
  1e:	2c 83       	std	Y+4, r18	; 0x04
                      DIO_PC3_INITIAL_DIRECTION, DIO_PC2_INITIAL_DIRECTION, DIO_PC1_INITIAL_DIRECTION, DIO_PC0_INITIAL_DIRECTION);

    DIO_DDRD_R = Conc(DIO_PD7_INITIAL_DIRECTION, DIO_PD6_INITIAL_DIRECTION, DIO_PD5_INITIAL_DIRECTION, DIO_PD4_INITIAL_DIRECTION,
  20:	8c 81       	ldd	r24, Y+4	; 0x04
  22:	9d 81       	ldd	r25, Y+5	; 0x05
  24:	81 30       	cpi	r24, 0x01	; 1
  26:	91 05       	cpc	r25, r1
                      DIO_PD3_INITIAL_DIRECTION, DIO_PD2_INITIAL_DIRECTION, DIO_PD1_INITIAL_DIRECTION, DIO_PD0_INITIAL_DIRECTION);
    
    /**< Set the initial output values for the ports */
    DIO_PORTA_R = Conc(DIO_PA7_INITIAL_VALUE, DIO_PA6_INITIAL_VALUE, DIO_PA5_INITIAL_VALUE, DIO_PA4_INITIAL_VALUE,
  28:	01 f0       	breq	.+0      	; 0x2a <DIO_SetPortValue+0x2a>
  2a:	2c 81       	ldd	r18, Y+4	; 0x04
  2c:	3d 81       	ldd	r19, Y+5	; 0x05
                       DIO_PA3_INITIAL_VALUE, DIO_PA2_INITIAL_VALUE, DIO_PA1_INITIAL_VALUE, DIO_PA0_INITIAL_VALUE);

    DIO_PORTB_R = Conc(DIO_PB7_INITIAL_VALUE, DIO_PB6_INITIAL_VALUE, DIO_PB5_INITIAL_VALUE, DIO_PB4_INITIAL_VALUE,
  2e:	22 30       	cpi	r18, 0x02	; 2
  30:	31 05       	cpc	r19, r1
  32:	04 f4       	brge	.+0      	; 0x34 <DIO_SetPortValue+0x34>
                       DIO_PB3_INITIAL_VALUE, DIO_PB2_INITIAL_VALUE, DIO_PB1_INITIAL_VALUE, DIO_PB0_INITIAL_VALUE);

    DIO_PORTC_R = Conc(DIO_PC7_INITIAL_VALUE, DIO_PC6_INITIAL_VALUE, DIO_PC5_INITIAL_VALUE, DIO_PC4_INITIAL_VALUE,
  34:	8c 81       	ldd	r24, Y+4	; 0x04
  36:	9d 81       	ldd	r25, Y+5	; 0x05
  38:	00 97       	sbiw	r24, 0x00	; 0
                       DIO_PC3_INITIAL_VALUE, DIO_PC2_INITIAL_VALUE, DIO_PC1_INITIAL_VALUE, DIO_PC0_INITIAL_VALUE);

    DIO_PORTD_R = Conc(DIO_PD7_INITIAL_VALUE, DIO_PD6_INITIAL_VALUE, DIO_PD5_INITIAL_VALUE, DIO_PD4_INITIAL_VALUE,
  3a:	01 f0       	breq	.+0      	; 0x3c <DIO_SetPortValue+0x3c>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <DIO_SetPortValue+0x3e>
  3e:	2c 81       	ldd	r18, Y+4	; 0x04
                       DIO_PD3_INITIAL_VALUE, DIO_PD2_INITIAL_VALUE, DIO_PD1_INITIAL_VALUE, DIO_PD0_INITIAL_VALUE);
    
}
  40:	3d 81       	ldd	r19, Y+5	; 0x05
  42:	22 30       	cpi	r18, 0x02	; 2
  44:	31 05       	cpc	r19, r1
  46:	01 f0       	breq	.+0      	; 0x48 <DIO_SetPortValue+0x48>
  48:	8c 81       	ldd	r24, Y+4	; 0x04
  4a:	9d 81       	ldd	r25, Y+5	; 0x05
  4c:	83 30       	cpi	r24, 0x03	; 3
  4e:	91 05       	cpc	r25, r1
  50:	01 f0       	breq	.+0      	; 0x52 <DIO_SetPortValue+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <DIO_SetPortValue+0x54>
  54:	eb e3       	ldi	r30, 0x3B	; 59
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	8b 81       	ldd	r24, Y+3	; 0x03
  5a:	80 83       	st	Z, r24
  5c:	00 c0       	rjmp	.+0      	; 0x5e <DIO_SetPortValue+0x5e>
  5e:	e8 e3       	ldi	r30, 0x38	; 56
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	8b 81       	ldd	r24, Y+3	; 0x03
  64:	80 83       	st	Z, r24
  66:	00 c0       	rjmp	.+0      	; 0x68 <DIO_SetPortValue+0x68>
  68:	e5 e3       	ldi	r30, 0x35	; 53
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	8b 81       	ldd	r24, Y+3	; 0x03
  6e:	80 83       	st	Z, r24
  70:	00 c0       	rjmp	.+0      	; 0x72 <DIO_SetPortValue+0x72>
  72:	e2 e3       	ldi	r30, 0x32	; 50
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	8b 81       	ldd	r24, Y+3	; 0x03
  78:	80 83       	st	Z, r24
  7a:	00 c0       	rjmp	.+0      	; 0x7c <DIO_SetPortValue+0x7c>
  7c:	19 82       	std	Y+1, r1	; 0x01
  7e:	89 81       	ldd	r24, Y+1	; 0x01
  80:	0f 90       	pop	r0
  82:	0f 90       	pop	r0
  84:	0f 90       	pop	r0
  86:	0f 90       	pop	r0
  88:	0f 90       	pop	r0
  8a:	cf 91       	pop	r28
  8c:	df 91       	pop	r29
  8e:	08 95       	ret

Disassembly of section .text.DIO_GetPortValue:

00000000 <DIO_GetPortValue>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
/*****************************< Function Implementations *****************************/
void DIO_vInit(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <DIO_GetPortValue+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <DIO_GetPortValue+0x8>
	/**< Configure the data direction registers (DDRx) */ 
    DIO_DDRA_R = Conc(DIO_PA7_INITIAL_DIRECTION, DIO_PA6_INITIAL_DIRECTION, DIO_PA5_INITIAL_DIRECTION, DIO_PA4_INITIAL_DIRECTION,
   8:	00 d0       	rcall	.+0      	; 0xa <DIO_GetPortValue+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8a 83       	std	Y+2, r24	; 0x02
                      DIO_PA3_INITIAL_DIRECTION, DIO_PA2_INITIAL_DIRECTION, DIO_PA1_INITIAL_DIRECTION, DIO_PA0_INITIAL_DIRECTION);

    DIO_DDRB_R = Conc(DIO_PB7_INITIAL_DIRECTION, DIO_PB6_INITIAL_DIRECTION, DIO_PB5_INITIAL_DIRECTION, DIO_PB4_INITIAL_DIRECTION,
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	81 e0       	ldi	r24, 0x01	; 1
  16:	89 83       	std	Y+1, r24	; 0x01
                      DIO_PB3_INITIAL_DIRECTION, DIO_PB2_INITIAL_DIRECTION, DIO_PB1_INITIAL_DIRECTION, DIO_PB0_INITIAL_DIRECTION);

    DIO_DDRC_R = Conc(DIO_PC7_INITIAL_DIRECTION, DIO_PC6_INITIAL_DIRECTION, DIO_PC5_INITIAL_DIRECTION, DIO_PC4_INITIAL_DIRECTION,
  18:	8b 81       	ldd	r24, Y+3	; 0x03
  1a:	9c 81       	ldd	r25, Y+4	; 0x04
  1c:	00 97       	sbiw	r24, 0x00	; 0
  1e:	01 f0       	breq	.+0      	; 0x20 <DIO_GetPortValue+0x20>
                      DIO_PC3_INITIAL_DIRECTION, DIO_PC2_INITIAL_DIRECTION, DIO_PC1_INITIAL_DIRECTION, DIO_PC0_INITIAL_DIRECTION);

    DIO_DDRD_R = Conc(DIO_PD7_INITIAL_DIRECTION, DIO_PD6_INITIAL_DIRECTION, DIO_PD5_INITIAL_DIRECTION, DIO_PD4_INITIAL_DIRECTION,
  20:	8a 81       	ldd	r24, Y+2	; 0x02
  22:	28 2f       	mov	r18, r24
  24:	30 e0       	ldi	r19, 0x00	; 0
  26:	3e 83       	std	Y+6, r19	; 0x06
                      DIO_PD3_INITIAL_DIRECTION, DIO_PD2_INITIAL_DIRECTION, DIO_PD1_INITIAL_DIRECTION, DIO_PD0_INITIAL_DIRECTION);
    
    /**< Set the initial output values for the ports */
    DIO_PORTA_R = Conc(DIO_PA7_INITIAL_VALUE, DIO_PA6_INITIAL_VALUE, DIO_PA5_INITIAL_VALUE, DIO_PA4_INITIAL_VALUE,
  28:	2d 83       	std	Y+5, r18	; 0x05
  2a:	8d 81       	ldd	r24, Y+5	; 0x05
  2c:	9e 81       	ldd	r25, Y+6	; 0x06
                       DIO_PA3_INITIAL_VALUE, DIO_PA2_INITIAL_VALUE, DIO_PA1_INITIAL_VALUE, DIO_PA0_INITIAL_VALUE);

    DIO_PORTB_R = Conc(DIO_PB7_INITIAL_VALUE, DIO_PB6_INITIAL_VALUE, DIO_PB5_INITIAL_VALUE, DIO_PB4_INITIAL_VALUE,
  2e:	81 30       	cpi	r24, 0x01	; 1
  30:	91 05       	cpc	r25, r1
  32:	01 f0       	breq	.+0      	; 0x34 <DIO_GetPortValue+0x34>
                       DIO_PB3_INITIAL_VALUE, DIO_PB2_INITIAL_VALUE, DIO_PB1_INITIAL_VALUE, DIO_PB0_INITIAL_VALUE);

    DIO_PORTC_R = Conc(DIO_PC7_INITIAL_VALUE, DIO_PC6_INITIAL_VALUE, DIO_PC5_INITIAL_VALUE, DIO_PC4_INITIAL_VALUE,
  34:	2d 81       	ldd	r18, Y+5	; 0x05
  36:	3e 81       	ldd	r19, Y+6	; 0x06
  38:	22 30       	cpi	r18, 0x02	; 2
                       DIO_PC3_INITIAL_VALUE, DIO_PC2_INITIAL_VALUE, DIO_PC1_INITIAL_VALUE, DIO_PC0_INITIAL_VALUE);

    DIO_PORTD_R = Conc(DIO_PD7_INITIAL_VALUE, DIO_PD6_INITIAL_VALUE, DIO_PD5_INITIAL_VALUE, DIO_PD4_INITIAL_VALUE,
  3a:	31 05       	cpc	r19, r1
  3c:	04 f4       	brge	.+0      	; 0x3e <DIO_GetPortValue+0x3e>
  3e:	8d 81       	ldd	r24, Y+5	; 0x05
                       DIO_PD3_INITIAL_VALUE, DIO_PD2_INITIAL_VALUE, DIO_PD1_INITIAL_VALUE, DIO_PD0_INITIAL_VALUE);
    
}
  40:	9e 81       	ldd	r25, Y+6	; 0x06
  42:	00 97       	sbiw	r24, 0x00	; 0
  44:	01 f0       	breq	.+0      	; 0x46 <DIO_GetPortValue+0x46>
  46:	00 c0       	rjmp	.+0      	; 0x48 <DIO_GetPortValue+0x48>
  48:	2d 81       	ldd	r18, Y+5	; 0x05
  4a:	3e 81       	ldd	r19, Y+6	; 0x06
  4c:	22 30       	cpi	r18, 0x02	; 2
  4e:	31 05       	cpc	r19, r1
  50:	01 f0       	breq	.+0      	; 0x52 <DIO_GetPortValue+0x52>
  52:	8d 81       	ldd	r24, Y+5	; 0x05
  54:	9e 81       	ldd	r25, Y+6	; 0x06
  56:	83 30       	cpi	r24, 0x03	; 3
  58:	91 05       	cpc	r25, r1
  5a:	01 f0       	breq	.+0      	; 0x5c <DIO_GetPortValue+0x5c>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <DIO_GetPortValue+0x5e>
  5e:	e9 e3       	ldi	r30, 0x39	; 57
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	80 81       	ld	r24, Z
  64:	eb 81       	ldd	r30, Y+3	; 0x03
  66:	fc 81       	ldd	r31, Y+4	; 0x04
  68:	80 83       	st	Z, r24
  6a:	00 c0       	rjmp	.+0      	; 0x6c <DIO_GetPortValue+0x6c>
  6c:	e6 e3       	ldi	r30, 0x36	; 54
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	eb 81       	ldd	r30, Y+3	; 0x03
  74:	fc 81       	ldd	r31, Y+4	; 0x04
  76:	80 83       	st	Z, r24
  78:	00 c0       	rjmp	.+0      	; 0x7a <DIO_GetPortValue+0x7a>
  7a:	e3 e3       	ldi	r30, 0x33	; 51
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	eb 81       	ldd	r30, Y+3	; 0x03
  82:	fc 81       	ldd	r31, Y+4	; 0x04
  84:	80 83       	st	Z, r24
  86:	00 c0       	rjmp	.+0      	; 0x88 <DIO_GetPortValue+0x88>
  88:	e0 e3       	ldi	r30, 0x30	; 48
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	eb 81       	ldd	r30, Y+3	; 0x03
  90:	fc 81       	ldd	r31, Y+4	; 0x04
  92:	80 83       	st	Z, r24
  94:	00 c0       	rjmp	.+0      	; 0x96 <DIO_GetPortValue+0x96>
  96:	19 82       	std	Y+1, r1	; 0x01
  98:	00 c0       	rjmp	.+0      	; 0x9a <DIO_GetPortValue+0x9a>
  9a:	19 82       	std	Y+1, r1	; 0x01
  9c:	89 81       	ldd	r24, Y+1	; 0x01
  9e:	26 96       	adiw	r28, 0x06	; 6
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
  aa:	cf 91       	pop	r28
  ac:	df 91       	pop	r29
  ae:	08 95       	ret

ADC_program.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000690  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000086b  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .bss.callback 00000002  00000000  00000000  00000f2f  2**0
                  ALLOC
  6 .bss.ADC_BusyFlag 00000001  00000000  00000000  00000f2f  2**0
                  ALLOC
  7 .text.ADC_vInit 0000007e  00000000  00000000  00000f2f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text.ADC_GetDigitalValueSynchNonBlocking 00000112  00000000  00000000  00000fad  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.ADC_GetDigitalValueAsync 00000086  00000000  00000000  000010bf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.ADC_GetADCRegValue 0000003e  00000000  00000000  00001145  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.__vector_16 00000082  00000000  00000000  00001183  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.ADC_vInit:

00000000 <ADC_vInit>:
 * This variable represents the ADC busy flag, indicating whether the ADC is currently busy with a conversion or not.
 * When the ADC is busy, this flag is set to a non-zero value; otherwise, it is set to 0.
 */
static uint8_t ADC_BusyFlag = 0;
/*****************************< Function Implementations *****************************/
void ADC_vInit(void) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADC_ADMUX_REG, 7); /**< Select Vref = AVCC */
   8:	a7 e2       	ldi	r26, 0x27	; 39
   a:	b0 e0       	ldi	r27, 0x00	; 0
   c:	e7 e2       	ldi	r30, 0x27	; 39
   e:	f0 e0       	ldi	r31, 0x00	; 0
  10:	80 81       	ld	r24, Z
  12:	8f 77       	andi	r24, 0x7F	; 127
  14:	8c 93       	st	X, r24
    SET_BIT(ADC_ADMUX_REG, 6); /**< Select Vref = AVCC */
  16:	a7 e2       	ldi	r26, 0x27	; 39
  18:	b0 e0       	ldi	r27, 0x00	; 0
  1a:	e7 e2       	ldi	r30, 0x27	; 39
  1c:	f0 e0       	ldi	r31, 0x00	; 0
  1e:	80 81       	ld	r24, Z
  20:	80 64       	ori	r24, 0x40	; 64
  22:	8c 93       	st	X, r24

    CLR_BIT(ADC_ADMUX_REG, 5); /**< Right adjust the ADC result */
  24:	a7 e2       	ldi	r26, 0x27	; 39
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	e7 e2       	ldi	r30, 0x27	; 39
  2a:	f0 e0       	ldi	r31, 0x00	; 0
  2c:	80 81       	ld	r24, Z
  2e:	8f 7d       	andi	r24, 0xDF	; 223
  30:	8c 93       	st	X, r24

    CLR_BIT(ADC_ADCSRA_REG, 5); /**< Disable auto-triggering */
  32:	a6 e2       	ldi	r26, 0x26	; 38
  34:	b0 e0       	ldi	r27, 0x00	; 0
  36:	e6 e2       	ldi	r30, 0x26	; 38
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	80 81       	ld	r24, Z
  3c:	8f 7d       	andi	r24, 0xDF	; 223
  3e:	8c 93       	st	X, r24

    SET_BIT(ADC_ADCSRA_REG, 2); /**< Select ADC clock division factor CLK/64 */
  40:	a6 e2       	ldi	r26, 0x26	; 38
  42:	b0 e0       	ldi	r27, 0x00	; 0
  44:	e6 e2       	ldi	r30, 0x26	; 38
  46:	f0 e0       	ldi	r31, 0x00	; 0
  48:	80 81       	ld	r24, Z
  4a:	84 60       	ori	r24, 0x04	; 4
  4c:	8c 93       	st	X, r24
    SET_BIT(ADC_ADCSRA_REG, 1); /**< Select ADC clock division factor CLK/64 */
  4e:	a6 e2       	ldi	r26, 0x26	; 38
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	e6 e2       	ldi	r30, 0x26	; 38
  54:	f0 e0       	ldi	r31, 0x00	; 0
  56:	80 81       	ld	r24, Z
  58:	82 60       	ori	r24, 0x02	; 2
  5a:	8c 93       	st	X, r24
    CLR_BIT(ADC_ADCSRA_REG, 0); /**< Select ADC clock division factor CLK/64 */
  5c:	a6 e2       	ldi	r26, 0x26	; 38
  5e:	b0 e0       	ldi	r27, 0x00	; 0
  60:	e6 e2       	ldi	r30, 0x26	; 38
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	80 81       	ld	r24, Z
  66:	8e 7f       	andi	r24, 0xFE	; 254
  68:	8c 93       	st	X, r24

    SET_BIT(ADC_ADCSRA_REG, 7); /**< Enable the ADC module */
  6a:	a6 e2       	ldi	r26, 0x26	; 38
  6c:	b0 e0       	ldi	r27, 0x00	; 0
  6e:	e6 e2       	ldi	r30, 0x26	; 38
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	80 81       	ld	r24, Z
  74:	80 68       	ori	r24, 0x80	; 128
  76:	8c 93       	st	X, r24
}
  78:	cf 91       	pop	r28
  7a:	df 91       	pop	r29
  7c:	08 95       	ret

Disassembly of section .text.ADC_GetDigitalValueSynchNonBlocking:

00000000 <ADC_GetDigitalValueSynchNonBlocking>:
 * This variable represents the ADC busy flag, indicating whether the ADC is currently busy with a conversion or not.
 * When the ADC is busy, this flag is set to a non-zero value; otherwise, it is set to 0.
 */
static uint8_t ADC_BusyFlag = 0;
/*****************************< Function Implementations *****************************/
void ADC_vInit(void) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADC_ADMUX_REG, 7); /**< Select Vref = AVCC */
   8:	28 97       	sbiw	r28, 0x08	; 8
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8e 83       	std	Y+6, r24	; 0x06
    SET_BIT(ADC_ADMUX_REG, 6); /**< Select Vref = AVCC */
  16:	78 87       	std	Y+8, r23	; 0x08
  18:	6f 83       	std	Y+7, r22	; 0x07
  1a:	81 e0       	ldi	r24, 0x01	; 1
  1c:	8d 83       	std	Y+5, r24	; 0x05
  1e:	19 82       	std	Y+1, r1	; 0x01
  20:	1a 82       	std	Y+2, r1	; 0x02
  22:	1b 82       	std	Y+3, r1	; 0x03

    CLR_BIT(ADC_ADMUX_REG, 5); /**< Right adjust the ADC result */
  24:	1c 82       	std	Y+4, r1	; 0x04
  26:	8e 81       	ldd	r24, Y+6	; 0x06
  28:	80 32       	cpi	r24, 0x20	; 32
  2a:	00 f0       	brcs	.+0      	; 0x2c <ADC_GetDigitalValueSynchNonBlocking+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <ADC_GetDigitalValueSynchNonBlocking+0x2e>
  2e:	8f 81       	ldd	r24, Y+7	; 0x07
  30:	98 85       	ldd	r25, Y+8	; 0x08

    CLR_BIT(ADC_ADCSRA_REG, 5); /**< Disable auto-triggering */
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f4       	brne	.+0      	; 0x36 <ADC_GetDigitalValueSynchNonBlocking+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <ADC_GetDigitalValueSynchNonBlocking+0x38>
  38:	a7 e2       	ldi	r26, 0x27	; 39
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e7 e2       	ldi	r30, 0x27	; 39
  3e:	f0 e0       	ldi	r31, 0x00	; 0

    SET_BIT(ADC_ADCSRA_REG, 2); /**< Select ADC clock division factor CLK/64 */
  40:	80 81       	ld	r24, Z
  42:	80 7e       	andi	r24, 0xE0	; 224
  44:	8c 93       	st	X, r24
  46:	a7 e2       	ldi	r26, 0x27	; 39
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	e7 e2       	ldi	r30, 0x27	; 39
  4c:	f0 e0       	ldi	r31, 0x00	; 0
    SET_BIT(ADC_ADCSRA_REG, 1); /**< Select ADC clock division factor CLK/64 */
  4e:	90 81       	ld	r25, Z
  50:	8e 81       	ldd	r24, Y+6	; 0x06
  52:	89 2b       	or	r24, r25
  54:	8c 93       	st	X, r24
  56:	a6 e2       	ldi	r26, 0x26	; 38
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	e6 e2       	ldi	r30, 0x26	; 38
    CLR_BIT(ADC_ADCSRA_REG, 0); /**< Select ADC clock division factor CLK/64 */
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	80 81       	ld	r24, Z
  60:	80 64       	ori	r24, 0x40	; 64
  62:	8c 93       	st	X, r24
  64:	00 c0       	rjmp	.+0      	; 0x66 <ADC_GetDigitalValueSynchNonBlocking+0x66>
  66:	89 81       	ldd	r24, Y+1	; 0x01
  68:	9a 81       	ldd	r25, Y+2	; 0x02

    SET_BIT(ADC_ADCSRA_REG, 7); /**< Enable the ADC module */
  6a:	ab 81       	ldd	r26, Y+3	; 0x03
  6c:	bc 81       	ldd	r27, Y+4	; 0x04
  6e:	01 96       	adiw	r24, 0x01	; 1
  70:	a1 1d       	adc	r26, r1
  72:	b1 1d       	adc	r27, r1
  74:	89 83       	std	Y+1, r24	; 0x01
  76:	9a 83       	std	Y+2, r25	; 0x02
}
  78:	ab 83       	std	Y+3, r26	; 0x03
  7a:	bc 83       	std	Y+4, r27	; 0x04
  7c:	e6 e2       	ldi	r30, 0x26	; 38
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	88 2f       	mov	r24, r24
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	80 71       	andi	r24, 0x10	; 16
  88:	90 70       	andi	r25, 0x00	; 0
  8a:	95 95       	asr	r25
  8c:	87 95       	ror	r24
  8e:	95 95       	asr	r25
  90:	87 95       	ror	r24
  92:	95 95       	asr	r25
  94:	87 95       	ror	r24
  96:	95 95       	asr	r25
  98:	87 95       	ror	r24
  9a:	00 97       	sbiw	r24, 0x00	; 0
  9c:	01 f4       	brne	.+0      	; 0x9e <ADC_GetDigitalValueSynchNonBlocking+0x9e>
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	9a 81       	ldd	r25, Y+2	; 0x02
  a2:	ab 81       	ldd	r26, Y+3	; 0x03
  a4:	bc 81       	ldd	r27, Y+4	; 0x04
  a6:	80 35       	cpi	r24, 0x50	; 80
  a8:	23 ec       	ldi	r18, 0xC3	; 195
  aa:	92 07       	cpc	r25, r18
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	a2 07       	cpc	r26, r18
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	b2 07       	cpc	r27, r18
  b4:	00 f0       	brcs	.+0      	; 0xb6 <ADC_GetDigitalValueSynchNonBlocking+0xb6>
  b6:	e6 e2       	ldi	r30, 0x26	; 38
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	88 2f       	mov	r24, r24
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	80 71       	andi	r24, 0x10	; 16
  c2:	90 70       	andi	r25, 0x00	; 0
  c4:	95 95       	asr	r25
  c6:	87 95       	ror	r24
  c8:	95 95       	asr	r25
  ca:	87 95       	ror	r24
  cc:	95 95       	asr	r25
  ce:	87 95       	ror	r24
  d0:	95 95       	asr	r25
  d2:	87 95       	ror	r24
  d4:	00 97       	sbiw	r24, 0x00	; 0
  d6:	01 f0       	breq	.+0      	; 0xd8 <ADC_GetDigitalValueSynchNonBlocking+0xd8>
  d8:	a6 e2       	ldi	r26, 0x26	; 38
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e6 e2       	ldi	r30, 0x26	; 38
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	8c 93       	st	X, r24
  e6:	e4 e2       	ldi	r30, 0x24	; 36
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	91 81       	ldd	r25, Z+1	; 0x01
  ee:	ef 81       	ldd	r30, Y+7	; 0x07
  f0:	f8 85       	ldd	r31, Y+8	; 0x08
  f2:	91 83       	std	Z+1, r25	; 0x01
  f4:	80 83       	st	Z, r24
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <ADC_GetDigitalValueSynchNonBlocking+0xf8>
  f8:	1d 82       	std	Y+5, r1	; 0x05
  fa:	00 c0       	rjmp	.+0      	; 0xfc <ADC_GetDigitalValueSynchNonBlocking+0xfc>
  fc:	1d 82       	std	Y+5, r1	; 0x05
  fe:	8d 81       	ldd	r24, Y+5	; 0x05
 100:	28 96       	adiw	r28, 0x08	; 8
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
 10c:	cf 91       	pop	r28
 10e:	df 91       	pop	r29
 110:	08 95       	ret

Disassembly of section .text.ADC_GetDigitalValueAsync:

00000000 <ADC_GetDigitalValueAsync>:
 * This variable represents the ADC busy flag, indicating whether the ADC is currently busy with a conversion or not.
 * When the ADC is busy, this flag is set to a non-zero value; otherwise, it is set to 0.
 */
static uint8_t ADC_BusyFlag = 0;
/*****************************< Function Implementations *****************************/
void ADC_vInit(void) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <ADC_GetDigitalValueAsync+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <ADC_GetDigitalValueAsync+0x8>
    CLR_BIT(ADC_ADMUX_REG, 7); /**< Select Vref = AVCC */
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	8a 83       	std	Y+2, r24	; 0x02
   e:	7c 83       	std	Y+4, r23	; 0x04
  10:	6b 83       	std	Y+3, r22	; 0x03
  12:	81 e0       	ldi	r24, 0x01	; 1
  14:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(ADC_ADMUX_REG, 6); /**< Select Vref = AVCC */
  16:	8b 81       	ldd	r24, Y+3	; 0x03
  18:	9c 81       	ldd	r25, Y+4	; 0x04
  1a:	00 97       	sbiw	r24, 0x00	; 0
  1c:	01 f0       	breq	.+0      	; 0x1e <ADC_GetDigitalValueAsync+0x1e>
  1e:	80 91 00 00 	lds	r24, 0x0000
  22:	88 23       	and	r24, r24

    CLR_BIT(ADC_ADMUX_REG, 5); /**< Right adjust the ADC result */
  24:	01 f4       	brne	.+0      	; 0x26 <ADC_GetDigitalValueAsync+0x26>
  26:	81 e0       	ldi	r24, 0x01	; 1
  28:	80 93 00 00 	sts	0x0000, r24
  2c:	8b 81       	ldd	r24, Y+3	; 0x03
  2e:	9c 81       	ldd	r25, Y+4	; 0x04
  30:	90 93 00 00 	sts	0x0000, r25

    CLR_BIT(ADC_ADCSRA_REG, 5); /**< Disable auto-triggering */
  34:	80 93 00 00 	sts	0x0000, r24
  38:	a6 e2       	ldi	r26, 0x26	; 38
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e6 e2       	ldi	r30, 0x26	; 38
  3e:	f0 e0       	ldi	r31, 0x00	; 0

    SET_BIT(ADC_ADCSRA_REG, 2); /**< Select ADC clock division factor CLK/64 */
  40:	80 81       	ld	r24, Z
  42:	88 60       	ori	r24, 0x08	; 8
  44:	8c 93       	st	X, r24
  46:	a7 e2       	ldi	r26, 0x27	; 39
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	e7 e2       	ldi	r30, 0x27	; 39
  4c:	f0 e0       	ldi	r31, 0x00	; 0
    SET_BIT(ADC_ADCSRA_REG, 1); /**< Select ADC clock division factor CLK/64 */
  4e:	80 81       	ld	r24, Z
  50:	80 7e       	andi	r24, 0xE0	; 224
  52:	8c 93       	st	X, r24
  54:	a7 e2       	ldi	r26, 0x27	; 39
  56:	b0 e0       	ldi	r27, 0x00	; 0
  58:	e7 e2       	ldi	r30, 0x27	; 39
  5a:	f0 e0       	ldi	r31, 0x00	; 0
    CLR_BIT(ADC_ADCSRA_REG, 0); /**< Select ADC clock division factor CLK/64 */
  5c:	90 81       	ld	r25, Z
  5e:	8a 81       	ldd	r24, Y+2	; 0x02
  60:	89 2b       	or	r24, r25
  62:	8c 93       	st	X, r24
  64:	a6 e2       	ldi	r26, 0x26	; 38
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	e6 e2       	ldi	r30, 0x26	; 38

    SET_BIT(ADC_ADCSRA_REG, 7); /**< Enable the ADC module */
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	80 81       	ld	r24, Z
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	8c 93       	st	X, r24
  72:	00 c0       	rjmp	.+0      	; 0x74 <ADC_GetDigitalValueAsync+0x74>
  74:	19 82       	std	Y+1, r1	; 0x01
  76:	89 81       	ldd	r24, Y+1	; 0x01
}
  78:	0f 90       	pop	r0
  7a:	0f 90       	pop	r0
  7c:	0f 90       	pop	r0
  7e:	0f 90       	pop	r0
  80:	cf 91       	pop	r28
  82:	df 91       	pop	r29
  84:	08 95       	ret

Disassembly of section .text.ADC_GetADCRegValue:

00000000 <ADC_GetADCRegValue>:
 * This variable represents the ADC busy flag, indicating whether the ADC is currently busy with a conversion or not.
 * When the ADC is busy, this flag is set to a non-zero value; otherwise, it is set to 0.
 */
static uint8_t ADC_BusyFlag = 0;
/*****************************< Function Implementations *****************************/
void ADC_vInit(void) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <ADC_GetADCRegValue+0x6>
   6:	0f 92       	push	r0
    CLR_BIT(ADC_ADMUX_REG, 7); /**< Select Vref = AVCC */
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9b 83       	std	Y+3, r25	; 0x03
   e:	8a 83       	std	Y+2, r24	; 0x02
  10:	81 e0       	ldi	r24, 0x01	; 1
  12:	89 83       	std	Y+1, r24	; 0x01
  14:	8a 81       	ldd	r24, Y+2	; 0x02
    SET_BIT(ADC_ADMUX_REG, 6); /**< Select Vref = AVCC */
  16:	9b 81       	ldd	r25, Y+3	; 0x03
  18:	00 97       	sbiw	r24, 0x00	; 0
  1a:	01 f0       	breq	.+0      	; 0x1c <ADC_GetADCRegValue+0x1c>
  1c:	e4 e2       	ldi	r30, 0x24	; 36
  1e:	f0 e0       	ldi	r31, 0x00	; 0
  20:	80 81       	ld	r24, Z
  22:	91 81       	ldd	r25, Z+1	; 0x01

    CLR_BIT(ADC_ADMUX_REG, 5); /**< Right adjust the ADC result */
  24:	ea 81       	ldd	r30, Y+2	; 0x02
  26:	fb 81       	ldd	r31, Y+3	; 0x03
  28:	91 83       	std	Z+1, r25	; 0x01
  2a:	80 83       	st	Z, r24
  2c:	00 c0       	rjmp	.+0      	; 0x2e <ADC_GetADCRegValue+0x2e>
  2e:	19 82       	std	Y+1, r1	; 0x01
  30:	89 81       	ldd	r24, Y+1	; 0x01

    CLR_BIT(ADC_ADCSRA_REG, 5); /**< Disable auto-triggering */
  32:	0f 90       	pop	r0
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	cf 91       	pop	r28
  3a:	df 91       	pop	r29
  3c:	08 95       	ret

Disassembly of section .text.__vector_16:

00000000 <__vector_16>:
 * This variable represents the ADC busy flag, indicating whether the ADC is currently busy with a conversion or not.
 * When the ADC is busy, this flag is set to a non-zero value; otherwise, it is set to 0.
 */
static uint8_t ADC_BusyFlag = 0;
/*****************************< Function Implementations *****************************/
void ADC_vInit(void) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
    CLR_BIT(ADC_ADMUX_REG, 7); /**< Select Vref = AVCC */
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
    SET_BIT(ADC_ADMUX_REG, 6); /**< Select Vref = AVCC */
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	df 93       	push	r29

    CLR_BIT(ADC_ADMUX_REG, 5); /**< Right adjust the ADC result */
  24:	cf 93       	push	r28
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
  2a:	80 91 00 00 	lds	r24, 0x0000
  2e:	90 91 00 00 	lds	r25, 0x0000

    CLR_BIT(ADC_ADCSRA_REG, 5); /**< Disable auto-triggering */
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <__vector_16+0x36>
  36:	10 92 00 00 	sts	0x0000, r1
  3a:	a6 e2       	ldi	r26, 0x26	; 38
  3c:	b0 e0       	ldi	r27, 0x00	; 0
  3e:	e6 e2       	ldi	r30, 0x26	; 38

    SET_BIT(ADC_ADCSRA_REG, 2); /**< Select ADC clock division factor CLK/64 */
  40:	f0 e0       	ldi	r31, 0x00	; 0
  42:	80 81       	ld	r24, Z
  44:	87 7f       	andi	r24, 0xF7	; 247
  46:	8c 93       	st	X, r24
  48:	20 91 00 00 	lds	r18, 0x0000
  4c:	30 91 00 00 	lds	r19, 0x0000
    SET_BIT(ADC_ADCSRA_REG, 1); /**< Select ADC clock division factor CLK/64 */
  50:	e4 e2       	ldi	r30, 0x24	; 36
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	80 81       	ld	r24, Z
  56:	91 81       	ldd	r25, Z+1	; 0x01
  58:	f9 01       	movw	r30, r18
  5a:	09 95       	icall
    CLR_BIT(ADC_ADCSRA_REG, 0); /**< Select ADC clock division factor CLK/64 */
  5c:	cf 91       	pop	r28
  5e:	df 91       	pop	r29
  60:	ff 91       	pop	r31
  62:	ef 91       	pop	r30
  64:	bf 91       	pop	r27
  66:	af 91       	pop	r26
  68:	9f 91       	pop	r25

    SET_BIT(ADC_ADCSRA_REG, 7); /**< Enable the ADC module */
  6a:	8f 91       	pop	r24
  6c:	7f 91       	pop	r23
  6e:	6f 91       	pop	r22
  70:	5f 91       	pop	r21
  72:	4f 91       	pop	r20
  74:	3f 91       	pop	r19
  76:	2f 91       	pop	r18
}
  78:	0f 90       	pop	r0
  7a:	0f be       	out	0x3f, r0	; 63
  7c:	0f 90       	pop	r0
  7e:	1f 90       	pop	r1
  80:	18 95       	reti

KPD_program.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000005a0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000942  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .rodata.KPD_Keys 00000010  00000000  00000000  00000f16  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .rodata.KPD_rowsPins 00000004  00000000  00000000  00000f26  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .rodata.KPD_colsPins 00000004  00000000  00000000  00000f2a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .text.KPD_GetKeyState 00000228  00000000  00000000  00000f2e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.KPD_GetKeyState:

00000000 <KPD_GetKeyState>:
 * Users need to specify the corresponding pins in the order of physical connection.
 */
const u8 KPD_colsPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};
/*****************************< Function Implementations *****************************/
Std_ReturnType KPD_GetKeyState(u8 *returnedKey) 
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	65 97       	sbiw	r28, 0x15	; 21
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9d 8b       	std	Y+21, r25	; 0x15
  16:	8c 8b       	std	Y+20, r24	; 0x14
    Std_ReturnType FunctionState = E_NOT_OK; /**< Initialize function state to "not OK" */
  18:	1a 8a       	std	Y+18, r1	; 0x12
    u8 rowsCounter = 0, colsCounter = 0, pinValue = 0, flag = 0; /**< Initialize loop counters and pin value */
  1a:	19 8a       	std	Y+17, r1	; 0x11
  1c:	18 8a       	std	Y+16, r1	; 0x10
  1e:	1b 8a       	std	Y+19, r1	; 0x13
  20:	1f 86       	std	Y+15, r1	; 0x0f
    
    if (NULL != returnedKey) /**< Check if the returnedKey pointer is not NULL */
  22:	8c 89       	ldd	r24, Y+20	; 0x14
  24:	9d 89       	ldd	r25, Y+21	; 0x15
  26:	00 97       	sbiw	r24, 0x00	; 0
  28:	01 f4       	brne	.+0      	; 0x2a <KPD_GetKeyState+0x2a>
  2a:	00 c0       	rjmp	.+0      	; 0x2c <KPD_GetKeyState+0x2c>
    {   
        *returnedKey = KPD_KEY_NOT_PRESSED; /**< Set the returnedKey to indicate no key is pressed */
  2c:	ec 89       	ldd	r30, Y+20	; 0x14
  2e:	fd 89       	ldd	r31, Y+21	; 0x15
  30:	8f ef       	ldi	r24, 0xFF	; 255
  32:	80 83       	st	Z, r24
        
        /**< Active Each Row => For loop on pins of the rows */
        for (rowsCounter = 0; rowsCounter < 4; rowsCounter++) /**< Loop through each row */
  34:	19 8a       	std	Y+17, r1	; 0x11
  36:	00 c0       	rjmp	.+0      	; 0x38 <KPD_GetKeyState+0x38>
        {
            DIO_SetPinValue(KPD_ROWS_PORT, KPD_rowsPins[rowsCounter], DIO_LOW); /**< Activate the current row */
  38:	89 89       	ldd	r24, Y+17	; 0x11
  3a:	88 2f       	mov	r24, r24
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	fc 01       	movw	r30, r24
  40:	e0 50       	subi	r30, 0x00	; 0
  42:	f0 40       	sbci	r31, 0x00	; 0
  44:	90 81       	ld	r25, Z
  46:	81 e0       	ldi	r24, 0x01	; 1
  48:	69 2f       	mov	r22, r25
  4a:	40 e0       	ldi	r20, 0x00	; 0
  4c:	0e 94 00 00 	call	0	; 0x0 <KPD_GetKeyState>
            
            /**< Check which input pin has a low value (i.e., which key is pressed) */
            for (colsCounter = 0; colsCounter < 4; colsCounter++) /**< Loop through each column */
  50:	18 8a       	std	Y+16, r1	; 0x10
  52:	00 c0       	rjmp	.+0      	; 0x54 <KPD_GetKeyState+0x54>
            {
                DIO_GetPinValue(KPD_COLS_PORT, KPD_colsPins[colsCounter], &pinValue); /**< Read the value of the current column pin */
  54:	88 89       	ldd	r24, Y+16	; 0x10
  56:	88 2f       	mov	r24, r24
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	fc 01       	movw	r30, r24
  5c:	e0 50       	subi	r30, 0x00	; 0
  5e:	f0 40       	sbci	r31, 0x00	; 0
  60:	90 81       	ld	r25, Z
  62:	9e 01       	movw	r18, r28
  64:	2d 5e       	subi	r18, 0xED	; 237
  66:	3f 4f       	sbci	r19, 0xFF	; 255
  68:	83 e0       	ldi	r24, 0x03	; 3
  6a:	69 2f       	mov	r22, r25
  6c:	a9 01       	movw	r20, r18
  6e:	0e 94 00 00 	call	0	; 0x0 <KPD_GetKeyState>
                if (pinValue == DIO_LOW) /**< Check if the pin value is low */
  72:	8b 89       	ldd	r24, Y+19	; 0x13
  74:	88 23       	and	r24, r24
  76:	01 f0       	breq	.+0      	; 0x78 <KPD_GetKeyState+0x78>
  78:	00 c0       	rjmp	.+0      	; 0x7a <KPD_GetKeyState+0x7a>
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	a0 ea       	ldi	r26, 0xA0	; 160
  80:	b1 e4       	ldi	r27, 0x41	; 65
  82:	8b 87       	std	Y+11, r24	; 0x0b
  84:	9c 87       	std	Y+12, r25	; 0x0c
  86:	ad 87       	std	Y+13, r26	; 0x0d
  88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  8a:	6b 85       	ldd	r22, Y+11	; 0x0b
  8c:	7c 85       	ldd	r23, Y+12	; 0x0c
  8e:	8d 85       	ldd	r24, Y+13	; 0x0d
  90:	9e 85       	ldd	r25, Y+14	; 0x0e
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	4a e7       	ldi	r20, 0x7A	; 122
  98:	55 e4       	ldi	r21, 0x45	; 69
  9a:	0e 94 00 00 	call	0	; 0x0 <KPD_GetKeyState>
  9e:	dc 01       	movw	r26, r24
  a0:	cb 01       	movw	r24, r22
  a2:	8f 83       	std	Y+7, r24	; 0x07
  a4:	98 87       	std	Y+8, r25	; 0x08
  a6:	a9 87       	std	Y+9, r26	; 0x09
  a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
  aa:	6f 81       	ldd	r22, Y+7	; 0x07
  ac:	78 85       	ldd	r23, Y+8	; 0x08
  ae:	89 85       	ldd	r24, Y+9	; 0x09
  b0:	9a 85       	ldd	r25, Y+10	; 0x0a
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	40 e8       	ldi	r20, 0x80	; 128
  b8:	5f e3       	ldi	r21, 0x3F	; 63
  ba:	0e 94 00 00 	call	0	; 0x0 <KPD_GetKeyState>
  be:	88 23       	and	r24, r24
  c0:	04 f4       	brge	.+0      	; 0xc2 <KPD_GetKeyState+0xc2>
		__ticks = 1;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	9e 83       	std	Y+6, r25	; 0x06
  c8:	8d 83       	std	Y+5, r24	; 0x05
  ca:	00 c0       	rjmp	.+0      	; 0xcc <KPD_GetKeyState+0xcc>
	else if (__tmp > 65535)
  cc:	6f 81       	ldd	r22, Y+7	; 0x07
  ce:	78 85       	ldd	r23, Y+8	; 0x08
  d0:	89 85       	ldd	r24, Y+9	; 0x09
  d2:	9a 85       	ldd	r25, Y+10	; 0x0a
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	3f ef       	ldi	r19, 0xFF	; 255
  d8:	4f e7       	ldi	r20, 0x7F	; 127
  da:	57 e4       	ldi	r21, 0x47	; 71
  dc:	0e 94 00 00 	call	0	; 0x0 <KPD_GetKeyState>
  e0:	18 16       	cp	r1, r24
  e2:	04 f4       	brge	.+0      	; 0xe4 <KPD_GetKeyState+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  e4:	6b 85       	ldd	r22, Y+11	; 0x0b
  e6:	7c 85       	ldd	r23, Y+12	; 0x0c
  e8:	8d 85       	ldd	r24, Y+13	; 0x0d
  ea:	9e 85       	ldd	r25, Y+14	; 0x0e
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	40 e2       	ldi	r20, 0x20	; 32
  f2:	51 e4       	ldi	r21, 0x41	; 65
  f4:	0e 94 00 00 	call	0	; 0x0 <KPD_GetKeyState>
  f8:	dc 01       	movw	r26, r24
  fa:	cb 01       	movw	r24, r22
  fc:	bc 01       	movw	r22, r24
  fe:	cd 01       	movw	r24, r26
 100:	0e 94 00 00 	call	0	; 0x0 <KPD_GetKeyState>
 104:	dc 01       	movw	r26, r24
 106:	cb 01       	movw	r24, r22
 108:	9e 83       	std	Y+6, r25	; 0x06
 10a:	8d 83       	std	Y+5, r24	; 0x05
 10c:	00 c0       	rjmp	.+0      	; 0x10e <KPD_GetKeyState+0x10e>
 10e:	80 e9       	ldi	r24, 0x90	; 144
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	9c 83       	std	Y+4, r25	; 0x04
 114:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	9c 81       	ldd	r25, Y+4	; 0x04
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	01 f4       	brne	.+0      	; 0x11e <KPD_GetKeyState+0x11e>
 11e:	9c 83       	std	Y+4, r25	; 0x04
 120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 122:	8d 81       	ldd	r24, Y+5	; 0x05
 124:	9e 81       	ldd	r25, Y+6	; 0x06
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	9e 83       	std	Y+6, r25	; 0x06
 12a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12c:	8d 81       	ldd	r24, Y+5	; 0x05
 12e:	9e 81       	ldd	r25, Y+6	; 0x06
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	01 f4       	brne	.+0      	; 0x134 <KPD_GetKeyState+0x134>
 134:	00 c0       	rjmp	.+0      	; 0x136 <KPD_GetKeyState+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 136:	6f 81       	ldd	r22, Y+7	; 0x07
 138:	78 85       	ldd	r23, Y+8	; 0x08
 13a:	89 85       	ldd	r24, Y+9	; 0x09
 13c:	9a 85       	ldd	r25, Y+10	; 0x0a
 13e:	0e 94 00 00 	call	0	; 0x0 <KPD_GetKeyState>
 142:	dc 01       	movw	r26, r24
 144:	cb 01       	movw	r24, r22
 146:	9e 83       	std	Y+6, r25	; 0x06
 148:	8d 83       	std	Y+5, r24	; 0x05
 14a:	8d 81       	ldd	r24, Y+5	; 0x05
 14c:	9e 81       	ldd	r25, Y+6	; 0x06
 14e:	9a 83       	std	Y+2, r25	; 0x02
 150:	89 83       	std	Y+1, r24	; 0x01
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	01 f4       	brne	.+0      	; 0x15a <KPD_GetKeyState+0x15a>
 15a:	9a 83       	std	Y+2, r25	; 0x02
 15c:	89 83       	std	Y+1, r24	; 0x01
                {
                    /**< Debouncing */
                    _delay_ms(20); /**< Delay for debouncing */
                    DIO_GetPinValue(KPD_COLS_PORT, KPD_colsPins[colsCounter], &pinValue); /**< Get pin value again */
 15e:	88 89       	ldd	r24, Y+16	; 0x10
 160:	88 2f       	mov	r24, r24
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	fc 01       	movw	r30, r24
 166:	e0 50       	subi	r30, 0x00	; 0
 168:	f0 40       	sbci	r31, 0x00	; 0
 16a:	90 81       	ld	r25, Z
 16c:	9e 01       	movw	r18, r28
 16e:	2d 5e       	subi	r18, 0xED	; 237
 170:	3f 4f       	sbci	r19, 0xFF	; 255
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	69 2f       	mov	r22, r25
 176:	a9 01       	movw	r20, r18
 178:	0e 94 00 00 	call	0	; 0x0 <KPD_GetKeyState>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <KPD_GetKeyState+0x17e>
                    /**< check if the pin is still equal low */
                    while (pinValue == DIO_LOW) /**< Wait until the pin value becomes high (debounced) */
                    {
                        DIO_GetPinValue(KPD_COLS_PORT, KPD_colsPins[colsCounter], &pinValue); /**< Get pin value */
 17e:	88 89       	ldd	r24, Y+16	; 0x10
 180:	88 2f       	mov	r24, r24
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	fc 01       	movw	r30, r24
 186:	e0 50       	subi	r30, 0x00	; 0
 188:	f0 40       	sbci	r31, 0x00	; 0
 18a:	90 81       	ld	r25, Z
 18c:	9e 01       	movw	r18, r28
 18e:	2d 5e       	subi	r18, 0xED	; 237
 190:	3f 4f       	sbci	r19, 0xFF	; 255
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	69 2f       	mov	r22, r25
 196:	a9 01       	movw	r20, r18
 198:	0e 94 00 00 	call	0	; 0x0 <KPD_GetKeyState>
                {
                    /**< Debouncing */
                    _delay_ms(20); /**< Delay for debouncing */
                    DIO_GetPinValue(KPD_COLS_PORT, KPD_colsPins[colsCounter], &pinValue); /**< Get pin value again */
                    /**< check if the pin is still equal low */
                    while (pinValue == DIO_LOW) /**< Wait until the pin value becomes high (debounced) */
 19c:	8b 89       	ldd	r24, Y+19	; 0x13
 19e:	88 23       	and	r24, r24
 1a0:	01 f0       	breq	.+0      	; 0x1a2 <KPD_GetKeyState+0x1a2>
                    {
                        DIO_GetPinValue(KPD_COLS_PORT, KPD_colsPins[colsCounter], &pinValue); /**< Get pin value */
                    }
                    *returnedKey = KPD_Keys[rowsCounter][colsCounter]; /**< Store the pressed key */
 1a2:	89 89       	ldd	r24, Y+17	; 0x11
 1a4:	48 2f       	mov	r20, r24
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	88 89       	ldd	r24, Y+16	; 0x10
 1aa:	28 2f       	mov	r18, r24
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	ca 01       	movw	r24, r20
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	82 0f       	add	r24, r18
 1ba:	93 1f       	adc	r25, r19
 1bc:	fc 01       	movw	r30, r24
 1be:	e0 50       	subi	r30, 0x00	; 0
 1c0:	f0 40       	sbci	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	ec 89       	ldd	r30, Y+20	; 0x14
 1c6:	fd 89       	ldd	r31, Y+21	; 0x15
 1c8:	80 83       	st	Z, r24
                    flag = 1; /**< Set flag to indicate that a key is pressed */
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	8f 87       	std	Y+15, r24	; 0x0f
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <KPD_GetKeyState+0x1d0>
        for (rowsCounter = 0; rowsCounter < 4; rowsCounter++) /**< Loop through each row */
        {
            DIO_SetPinValue(KPD_ROWS_PORT, KPD_rowsPins[rowsCounter], DIO_LOW); /**< Activate the current row */
            
            /**< Check which input pin has a low value (i.e., which key is pressed) */
            for (colsCounter = 0; colsCounter < 4; colsCounter++) /**< Loop through each column */
 1d0:	88 89       	ldd	r24, Y+16	; 0x10
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
 1d4:	88 8b       	std	Y+16, r24	; 0x10
 1d6:	88 89       	ldd	r24, Y+16	; 0x10
 1d8:	84 30       	cpi	r24, 0x04	; 4
 1da:	00 f4       	brcc	.+0      	; 0x1dc <KPD_GetKeyState+0x1dc>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <KPD_GetKeyState+0x1de>
                    flag = 1; /**< Set flag to indicate that a key is pressed */
                    break; /**< Exit the loop */
                }
            }
            
            if (flag == 1) /**< Check if a key is pressed */
 1de:	8f 85       	ldd	r24, Y+15	; 0x0f
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	01 f4       	brne	.+0      	; 0x1e4 <KPD_GetKeyState+0x1e4>
            {
            	/**< Deactivate Rows */
				DIO_SetPinValue(KPD_ROWS_PORT, KPD_rowsPins[rowsCounter], DIO_HIGH); /**< Deactivate the current row */
 1e4:	89 89       	ldd	r24, Y+17	; 0x11
 1e6:	88 2f       	mov	r24, r24
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	fc 01       	movw	r30, r24
 1ec:	e0 50       	subi	r30, 0x00	; 0
 1ee:	f0 40       	sbci	r31, 0x00	; 0
 1f0:	90 81       	ld	r25, Z
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	69 2f       	mov	r22, r25
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	0e 94 00 00 	call	0	; 0x0 <KPD_GetKeyState>

            	FunctionState = E_OK;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	8a 8b       	std	Y+18, r24	; 0x12
 200:	00 c0       	rjmp	.+0      	; 0x202 <KPD_GetKeyState+0x202>
    if (NULL != returnedKey) /**< Check if the returnedKey pointer is not NULL */
    {   
        *returnedKey = KPD_KEY_NOT_PRESSED; /**< Set the returnedKey to indicate no key is pressed */
        
        /**< Active Each Row => For loop on pins of the rows */
        for (rowsCounter = 0; rowsCounter < 4; rowsCounter++) /**< Loop through each row */
 202:	89 89       	ldd	r24, Y+17	; 0x11
 204:	8f 5f       	subi	r24, 0xFF	; 255
 206:	89 8b       	std	Y+17, r24	; 0x11
 208:	89 89       	ldd	r24, Y+17	; 0x11
 20a:	84 30       	cpi	r24, 0x04	; 4
 20c:	00 f4       	brcc	.+0      	; 0x20e <KPD_GetKeyState+0x20e>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <KPD_GetKeyState+0x210>
 210:	00 c0       	rjmp	.+0      	; 0x212 <KPD_GetKeyState+0x212>
            }
        }
    }
    else
    {
        FunctionState = E_NOT_OK; /**< Set function state to "not OK" if returnedKey pointer is NULL */
 212:	1a 8a       	std	Y+18, r1	; 0x12
    }
    
    return FunctionState; /**< Return the function state */
 214:	8a 89       	ldd	r24, Y+18	; 0x12
}
 216:	65 96       	adiw	r28, 0x15	; 21
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
 222:	cf 91       	pop	r28
 224:	df 91       	pop	r29
 226:	08 95       	ret

CLCD_program.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000126c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000137d  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.LCD_Init 000004ea  00000000  00000000  0000261d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.LCD_SendCommand 0000008c  00000000  00000000  00002b07  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.LCD_SendChar 0000008c  00000000  00000000  00002b93  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.LCD_SendString 00000062  00000000  00000000  00002c1f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.LCD_SendIntegerNumber 00000126  00000000  00000000  00002c81  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.LCD_SendNumber 0000011c  00000000  00000000  00002da7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.LCD_DefineCustomChar 000000be  00000000  00000000  00002ec3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.LCD_DisplayCustomChar 00000090  00000000  00000000  00002f81  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.LCD_Clear 00000022  00000000  00000000  00003011  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.LCD_GoToXYPos 00000076  00000000  00000000  00003033  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.HAL_LCD_Send4Bits 00000360  00000000  00000000  000030a9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text.HAL_LCD_Send8Bits 000001c0  00000000  00000000  00003409  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.LCD_Init:

00000000 <LCD_Init>:
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
}

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	e8 97       	sbiw	r28, 0x38	; 56
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	98 af       	std	Y+56, r25	; 0x38
  16:	8f ab       	std	Y+55, r24	; 0x37
  18:	8f a9       	ldd	r24, Y+55	; 0x37
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  1a:	98 ad       	ldd	r25, Y+56	; 0x38
  1c:	00 97       	sbiw	r24, 0x00	; 0
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
  1e:	01 f4       	brne	.+0      	; 0x20 <LCD_Init+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <LCD_Init+0x22>
  22:	ef a9       	ldd	r30, Y+55	; 0x37
  24:	f8 ad       	ldd	r31, Y+56	; 0x38
  26:	83 85       	ldd	r24, Z+11	; 0x0b
  28:	83 70       	andi	r24, 0x03	; 3
  2a:	28 2f       	mov	r18, r24
  2c:	ef a9       	ldd	r30, Y+55	; 0x37
  2e:	f8 ad       	ldd	r31, Y+56	; 0x38
  30:	83 85       	ldd	r24, Z+11	; 0x0b
  32:	86 95       	lsr	r24
  34:	86 95       	lsr	r24
  36:	8f 70       	andi	r24, 0x0F	; 15
  38:	98 2f       	mov	r25, r24
  3a:	82 2f       	mov	r24, r18
  3c:	69 2f       	mov	r22, r25
  3e:	41 e0       	ldi	r20, 0x01	; 1
  40:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
  44:	ef a9       	ldd	r30, Y+55	; 0x37
  46:	f8 ad       	ldd	r31, Y+56	; 0x38
  48:	81 85       	ldd	r24, Z+9	; 0x09
  4a:	83 70       	andi	r24, 0x03	; 3
  4c:	28 2f       	mov	r18, r24
  4e:	ef a9       	ldd	r30, Y+55	; 0x37
  50:	f8 ad       	ldd	r31, Y+56	; 0x38
  52:	81 85       	ldd	r24, Z+9	; 0x09
  54:	86 95       	lsr	r24
  56:	86 95       	lsr	r24
  58:	8f 70       	andi	r24, 0x0F	; 15
  5a:	98 2f       	mov	r25, r24
  5c:	82 2f       	mov	r24, r18
  5e:	69 2f       	mov	r22, r25
  60:	41 e0       	ldi	r20, 0x01	; 1
  62:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
  66:	ef a9       	ldd	r30, Y+55	; 0x37
  68:	f8 ad       	ldd	r31, Y+56	; 0x38
  6a:	82 85       	ldd	r24, Z+10	; 0x0a
  6c:	83 70       	andi	r24, 0x03	; 3
  6e:	28 2f       	mov	r18, r24
  70:	ef a9       	ldd	r30, Y+55	; 0x37
  72:	f8 ad       	ldd	r31, Y+56	; 0x38
  74:	82 85       	ldd	r24, Z+10	; 0x0a
  76:	86 95       	lsr	r24
  78:	86 95       	lsr	r24

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  7a:	8f 70       	andi	r24, 0x0F	; 15
  7c:	98 2f       	mov	r25, r24
  7e:	82 2f       	mov	r24, r18
  80:	69 2f       	mov	r22, r25
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
    }

    /**< Set the enable pin to high */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_HIGH);
  88:	ef a9       	ldd	r30, Y+55	; 0x37
  8a:	f8 ad       	ldd	r31, Y+56	; 0x38
  8c:	80 81       	ld	r24, Z
  8e:	84 30       	cpi	r24, 0x04	; 4
  90:	01 f4       	brne	.+0      	; 0x92 <LCD_Init+0x92>
  92:	1e aa       	std	Y+54, r1	; 0x36
  94:	00 c0       	rjmp	.+0      	; 0x96 <LCD_Init+0x96>
  96:	8e a9       	ldd	r24, Y+54	; 0x36
  98:	28 2f       	mov	r18, r24
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	8f a9       	ldd	r24, Y+55	; 0x37
  9e:	98 ad       	ldd	r25, Y+56	; 0x38
  a0:	82 0f       	add	r24, r18
  a2:	93 1f       	adc	r25, r19
  a4:	fc 01       	movw	r30, r24
  a6:	31 96       	adiw	r30, 0x01	; 1
  a8:	80 81       	ld	r24, Z
  aa:	83 70       	andi	r24, 0x03	; 3
  ac:	48 2f       	mov	r20, r24
  ae:	8e a9       	ldd	r24, Y+54	; 0x36
  b0:	28 2f       	mov	r18, r24
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	8f a9       	ldd	r24, Y+55	; 0x37
  b6:	98 ad       	ldd	r25, Y+56	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  b8:	82 0f       	add	r24, r18
  ba:	93 1f       	adc	r25, r19
  bc:	fc 01       	movw	r30, r24
  be:	31 96       	adiw	r30, 0x01	; 1
  c0:	80 81       	ld	r24, Z
  c2:	86 95       	lsr	r24
  c4:	86 95       	lsr	r24
  c6:	8f 70       	andi	r24, 0x0F	; 15
  c8:	98 2f       	mov	r25, r24
  ca:	84 2f       	mov	r24, r20
  cc:	69 2f       	mov	r22, r25
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
  d4:	8e a9       	ldd	r24, Y+54	; 0x36
  d6:	8f 5f       	subi	r24, 0xFF	; 255
	if (__tmp < 1.0)
  d8:	8e ab       	std	Y+54, r24	; 0x36
  da:	8e a9       	ldd	r24, Y+54	; 0x36
  dc:	84 30       	cpi	r24, 0x04	; 4
  de:	00 f0       	brcs	.+0      	; 0xe0 <LCD_Init+0xe0>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_Init+0xe2>
  e2:	1d aa       	std	Y+53, r1	; 0x35
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_Init+0xe6>
  e6:	8d a9       	ldd	r24, Y+53	; 0x35
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	8f a9       	ldd	r24, Y+55	; 0x37
  ee:	98 ad       	ldd	r25, Y+56	; 0x38
		__ticks = 1;
  f0:	82 0f       	add	r24, r18
  f2:	93 1f       	adc	r25, r19
  f4:	fc 01       	movw	r30, r24
  f6:	31 96       	adiw	r30, 0x01	; 1
  f8:	80 81       	ld	r24, Z
	else if (__tmp > 65535)
  fa:	83 70       	andi	r24, 0x03	; 3
  fc:	48 2f       	mov	r20, r24
  fe:	8d a9       	ldd	r24, Y+53	; 0x35
 100:	28 2f       	mov	r18, r24
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	8f a9       	ldd	r24, Y+55	; 0x37
 106:	98 ad       	ldd	r25, Y+56	; 0x38
 108:	82 0f       	add	r24, r18
 10a:	93 1f       	adc	r25, r19
 10c:	fc 01       	movw	r30, r24
 10e:	31 96       	adiw	r30, 0x01	; 1
 110:	80 81       	ld	r24, Z
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 112:	86 95       	lsr	r24
 114:	86 95       	lsr	r24
 116:	8f 70       	andi	r24, 0x0F	; 15
 118:	98 2f       	mov	r25, r24
 11a:	84 2f       	mov	r24, r20
 11c:	69 2f       	mov	r22, r25
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 124:	8d a9       	ldd	r24, Y+53	; 0x35
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	8d ab       	std	Y+53, r24	; 0x35
 12a:	8d a9       	ldd	r24, Y+53	; 0x35
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	00 f0       	brcs	.+0      	; 0x130 <LCD_Init+0x130>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	a0 ea       	ldi	r26, 0xA0	; 160
 136:	b1 e4       	ldi	r27, 0x41	; 65
 138:	89 ab       	std	Y+49, r24	; 0x31
 13a:	9a ab       	std	Y+50, r25	; 0x32
 13c:	ab ab       	std	Y+51, r26	; 0x33
 13e:	bc ab       	std	Y+52, r27	; 0x34
 140:	69 a9       	ldd	r22, Y+49	; 0x31
 142:	7a a9       	ldd	r23, Y+50	; 0x32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 144:	8b a9       	ldd	r24, Y+51	; 0x33
 146:	9c a9       	ldd	r25, Y+52	; 0x34
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	4a e7       	ldi	r20, 0x7A	; 122
 14e:	55 e4       	ldi	r21, 0x45	; 69
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 150:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15a:	9e a7       	std	Y+46, r25	; 0x2e
 15c:	af a7       	std	Y+47, r26	; 0x2f
 15e:	b8 ab       	std	Y+48, r27	; 0x30
 160:	6d a5       	ldd	r22, Y+45	; 0x2d
 162:	7e a5       	ldd	r23, Y+46	; 0x2e
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 164:	8f a5       	ldd	r24, Y+47	; 0x2f
 166:	98 a9       	ldd	r25, Y+48	; 0x30
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	40 e8       	ldi	r20, 0x80	; 128
 16e:	5f e3       	ldi	r21, 0x3F	; 63
 170:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 174:	88 23       	and	r24, r24
 176:	04 f4       	brge	.+0      	; 0x178 <LCD_Init+0x178>
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	9c a7       	std	Y+44, r25	; 0x2c
 17e:	8b a7       	std	Y+43, r24	; 0x2b
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_Init+0x182>
 182:	6d a5       	ldd	r22, Y+45	; 0x2d
 184:	7e a5       	ldd	r23, Y+46	; 0x2e
 186:	8f a5       	ldd	r24, Y+47	; 0x2f
 188:	98 a9       	ldd	r25, Y+48	; 0x30
 18a:	20 e0       	ldi	r18, 0x00	; 0
    /**< Set the Pulse time to be 5msec */
    _delay_ms(5);
    /**< Set the enable pin to low */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
 18c:	3f ef       	ldi	r19, 0xFF	; 255
 18e:	4f e7       	ldi	r20, 0x7F	; 127
 190:	57 e4       	ldi	r21, 0x47	; 71
 192:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 196:	18 16       	cp	r1, r24
 198:	04 f4       	brge	.+0      	; 0x19a <LCD_Init+0x19a>
 19a:	69 a9       	ldd	r22, Y+49	; 0x31
 19c:	7a a9       	ldd	r23, Y+50	; 0x32
 19e:	8b a9       	ldd	r24, Y+51	; 0x33
 1a0:	9c a9       	ldd	r25, Y+52	; 0x34
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	40 e2       	ldi	r20, 0x20	; 32
 1a8:	51 e4       	ldi	r21, 0x41	; 65
 1aa:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
}
 1ae:	dc 01       	movw	r26, r24
 1b0:	cb 01       	movw	r24, r22
 1b2:	bc 01       	movw	r22, r24
 1b4:	cd 01       	movw	r24, r26
 1b6:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 1ba:	dc 01       	movw	r26, r24
 1bc:	cb 01       	movw	r24, r22
 1be:	9c a7       	std	Y+44, r25	; 0x2c
 1c0:	8b a7       	std	Y+43, r24	; 0x2b
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCD_Init+0x1c4>
 1c4:	80 e9       	ldi	r24, 0x90	; 144
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	9a a7       	std	Y+42, r25	; 0x2a
 1ca:	89 a7       	std	Y+41, r24	; 0x29
 1cc:	89 a5       	ldd	r24, Y+41	; 0x29
 1ce:	9a a5       	ldd	r25, Y+42	; 0x2a
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	01 f4       	brne	.+0      	; 0x1d4 <LCD_Init+0x1d4>
 1d4:	9a a7       	std	Y+42, r25	; 0x2a
 1d6:	89 a7       	std	Y+41, r24	; 0x29
 1d8:	8b a5       	ldd	r24, Y+43	; 0x2b
 1da:	9c a5       	ldd	r25, Y+44	; 0x2c
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	9c a7       	std	Y+44, r25	; 0x2c
 1e0:	8b a7       	std	Y+43, r24	; 0x2b
 1e2:	8b a5       	ldd	r24, Y+43	; 0x2b
 1e4:	9c a5       	ldd	r25, Y+44	; 0x2c
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	01 f4       	brne	.+0      	; 0x1ea <LCD_Init+0x1ea>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_Init+0x1ec>
 1ec:	6d a5       	ldd	r22, Y+45	; 0x2d
 1ee:	7e a5       	ldd	r23, Y+46	; 0x2e
 1f0:	8f a5       	ldd	r24, Y+47	; 0x2f
 1f2:	98 a9       	ldd	r25, Y+48	; 0x30
 1f4:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 1f8:	dc 01       	movw	r26, r24
 1fa:	cb 01       	movw	r24, r22
 1fc:	9c a7       	std	Y+44, r25	; 0x2c
 1fe:	8b a7       	std	Y+43, r24	; 0x2b
 200:	8b a5       	ldd	r24, Y+43	; 0x2b
 202:	9c a5       	ldd	r25, Y+44	; 0x2c
 204:	98 a7       	std	Y+40, r25	; 0x28
 206:	8f a3       	std	Y+39, r24	; 0x27
 208:	8f a1       	ldd	r24, Y+39	; 0x27
 20a:	98 a5       	ldd	r25, Y+40	; 0x28
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	01 f4       	brne	.+0      	; 0x210 <LCD_Init+0x210>
 210:	98 a7       	std	Y+40, r25	; 0x28
 212:	8f a3       	std	Y+39, r24	; 0x27
 214:	8f a9       	ldd	r24, Y+55	; 0x37
 216:	98 ad       	ldd	r25, Y+56	; 0x38
 218:	68 e3       	ldi	r22, 0x38	; 56
 21a:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	a0 ea       	ldi	r26, 0xA0	; 160
 224:	b0 e4       	ldi	r27, 0x40	; 64
 226:	8b a3       	std	Y+35, r24	; 0x23
 228:	9c a3       	std	Y+36, r25	; 0x24
 22a:	ad a3       	std	Y+37, r26	; 0x25
 22c:	be a3       	std	Y+38, r27	; 0x26
 22e:	6b a1       	ldd	r22, Y+35	; 0x23
 230:	7c a1       	ldd	r23, Y+36	; 0x24
 232:	8d a1       	ldd	r24, Y+37	; 0x25
 234:	9e a1       	ldd	r25, Y+38	; 0x26
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	4a e7       	ldi	r20, 0x7A	; 122
 23c:	55 e4       	ldi	r21, 0x45	; 69
 23e:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 242:	dc 01       	movw	r26, r24
 244:	cb 01       	movw	r24, r22
 246:	8f 8f       	std	Y+31, r24	; 0x1f
 248:	98 a3       	std	Y+32, r25	; 0x20
 24a:	a9 a3       	std	Y+33, r26	; 0x21
 24c:	ba a3       	std	Y+34, r27	; 0x22
 24e:	6f 8d       	ldd	r22, Y+31	; 0x1f
 250:	78 a1       	ldd	r23, Y+32	; 0x20
 252:	89 a1       	ldd	r24, Y+33	; 0x21
 254:	9a a1       	ldd	r25, Y+34	; 0x22
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 e8       	ldi	r20, 0x80	; 128
 25c:	5f e3       	ldi	r21, 0x3F	; 63
 25e:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 262:	88 23       	and	r24, r24
 264:	04 f4       	brge	.+0      	; 0x266 <LCD_Init+0x266>
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	9e 8f       	std	Y+30, r25	; 0x1e
 26c:	8d 8f       	std	Y+29, r24	; 0x1d
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_Init+0x270>
 270:	6f 8d       	ldd	r22, Y+31	; 0x1f
 272:	78 a1       	ldd	r23, Y+32	; 0x20
 274:	89 a1       	ldd	r24, Y+33	; 0x21
 276:	9a a1       	ldd	r25, Y+34	; 0x22
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	3f ef       	ldi	r19, 0xFF	; 255
 27c:	4f e7       	ldi	r20, 0x7F	; 127
 27e:	57 e4       	ldi	r21, 0x47	; 71
 280:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 284:	18 16       	cp	r1, r24
 286:	04 f4       	brge	.+0      	; 0x288 <LCD_Init+0x288>
 288:	6b a1       	ldd	r22, Y+35	; 0x23
 28a:	7c a1       	ldd	r23, Y+36	; 0x24
 28c:	8d a1       	ldd	r24, Y+37	; 0x25
 28e:	9e a1       	ldd	r25, Y+38	; 0x26
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	40 e2       	ldi	r20, 0x20	; 32
 296:	51 e4       	ldi	r21, 0x41	; 65
 298:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 29c:	dc 01       	movw	r26, r24
 29e:	cb 01       	movw	r24, r22
 2a0:	bc 01       	movw	r22, r24
 2a2:	cd 01       	movw	r24, r26
 2a4:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 2a8:	dc 01       	movw	r26, r24
 2aa:	cb 01       	movw	r24, r22
 2ac:	9e 8f       	std	Y+30, r25	; 0x1e
 2ae:	8d 8f       	std	Y+29, r24	; 0x1d
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <LCD_Init+0x2b2>
 2b2:	80 e9       	ldi	r24, 0x90	; 144
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	9c 8f       	std	Y+28, r25	; 0x1c
 2b8:	8b 8f       	std	Y+27, r24	; 0x1b
 2ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	01 f4       	brne	.+0      	; 0x2c2 <LCD_Init+0x2c2>
 2c2:	9c 8f       	std	Y+28, r25	; 0x1c
 2c4:	8b 8f       	std	Y+27, r24	; 0x1b
 2c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
 2c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	9e 8f       	std	Y+30, r25	; 0x1e
 2ce:	8d 8f       	std	Y+29, r24	; 0x1d
 2d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
 2d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
 2d4:	00 97       	sbiw	r24, 0x00	; 0
 2d6:	01 f4       	brne	.+0      	; 0x2d8 <LCD_Init+0x2d8>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_Init+0x2da>
 2da:	6f 8d       	ldd	r22, Y+31	; 0x1f
 2dc:	78 a1       	ldd	r23, Y+32	; 0x20
 2de:	89 a1       	ldd	r24, Y+33	; 0x21
 2e0:	9a a1       	ldd	r25, Y+34	; 0x22
 2e2:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 2e6:	dc 01       	movw	r26, r24
 2e8:	cb 01       	movw	r24, r22
 2ea:	9e 8f       	std	Y+30, r25	; 0x1e
 2ec:	8d 8f       	std	Y+29, r24	; 0x1d
 2ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
 2f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
 2f2:	9a 8f       	std	Y+26, r25	; 0x1a
 2f4:	89 8f       	std	Y+25, r24	; 0x19
 2f6:	89 8d       	ldd	r24, Y+25	; 0x19
 2f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	01 f4       	brne	.+0      	; 0x2fe <LCD_Init+0x2fe>
 2fe:	9a 8f       	std	Y+26, r25	; 0x1a
 300:	89 8f       	std	Y+25, r24	; 0x19
 302:	8f a9       	ldd	r24, Y+55	; 0x37
 304:	98 ad       	ldd	r25, Y+56	; 0x38
 306:	68 e3       	ldi	r22, 0x38	; 56
 308:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	a6 e1       	ldi	r26, 0x16	; 22
 312:	b3 e4       	ldi	r27, 0x43	; 67
 314:	8d 8b       	std	Y+21, r24	; 0x15
 316:	9e 8b       	std	Y+22, r25	; 0x16
 318:	af 8b       	std	Y+23, r26	; 0x17
 31a:	b8 8f       	std	Y+24, r27	; 0x18
 31c:	6d 89       	ldd	r22, Y+21	; 0x15
 31e:	7e 89       	ldd	r23, Y+22	; 0x16
 320:	8f 89       	ldd	r24, Y+23	; 0x17
 322:	98 8d       	ldd	r25, Y+24	; 0x18
 324:	2b ea       	ldi	r18, 0xAB	; 171
 326:	3a ea       	ldi	r19, 0xAA	; 170
 328:	4a ea       	ldi	r20, 0xAA	; 170
 32a:	50 e4       	ldi	r21, 0x40	; 64
 32c:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 330:	dc 01       	movw	r26, r24
 332:	cb 01       	movw	r24, r22
 334:	89 8b       	std	Y+17, r24	; 0x11
 336:	9a 8b       	std	Y+18, r25	; 0x12
 338:	ab 8b       	std	Y+19, r26	; 0x13
 33a:	bc 8b       	std	Y+20, r27	; 0x14
 33c:	69 89       	ldd	r22, Y+17	; 0x11
 33e:	7a 89       	ldd	r23, Y+18	; 0x12
 340:	8b 89       	ldd	r24, Y+19	; 0x13
 342:	9c 89       	ldd	r25, Y+20	; 0x14
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	40 e8       	ldi	r20, 0x80	; 128
 34a:	5f e3       	ldi	r21, 0x3F	; 63
 34c:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 350:	88 23       	and	r24, r24
 352:	04 f4       	brge	.+0      	; 0x354 <LCD_Init+0x354>
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	88 8b       	std	Y+16, r24	; 0x10
 358:	00 c0       	rjmp	.+0      	; 0x35a <LCD_Init+0x35a>
 35a:	69 89       	ldd	r22, Y+17	; 0x11
 35c:	7a 89       	ldd	r23, Y+18	; 0x12
 35e:	8b 89       	ldd	r24, Y+19	; 0x13
 360:	9c 89       	ldd	r25, Y+20	; 0x14
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	4f e7       	ldi	r20, 0x7F	; 127
 368:	53 e4       	ldi	r21, 0x43	; 67
 36a:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 36e:	18 16       	cp	r1, r24
 370:	04 f0       	brlt	.+0      	; 0x372 <LCD_Init+0x372>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LCD_Init+0x374>
 374:	6d 89       	ldd	r22, Y+21	; 0x15
 376:	7e 89       	ldd	r23, Y+22	; 0x16
 378:	8f 89       	ldd	r24, Y+23	; 0x17
 37a:	98 8d       	ldd	r25, Y+24	; 0x18
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	4a e7       	ldi	r20, 0x7A	; 122
 382:	54 e4       	ldi	r21, 0x44	; 68
 384:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 388:	dc 01       	movw	r26, r24
 38a:	cb 01       	movw	r24, r22
 38c:	8c 87       	std	Y+12, r24	; 0x0c
 38e:	9d 87       	std	Y+13, r25	; 0x0d
 390:	ae 87       	std	Y+14, r26	; 0x0e
 392:	bf 87       	std	Y+15, r27	; 0x0f
 394:	6c 85       	ldd	r22, Y+12	; 0x0c
 396:	7d 85       	ldd	r23, Y+13	; 0x0d
 398:	8e 85       	ldd	r24, Y+14	; 0x0e
 39a:	9f 85       	ldd	r25, Y+15	; 0x0f
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	4a e7       	ldi	r20, 0x7A	; 122
 3a2:	55 e4       	ldi	r21, 0x45	; 69
 3a4:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 3a8:	dc 01       	movw	r26, r24
 3aa:	cb 01       	movw	r24, r22
 3ac:	88 87       	std	Y+8, r24	; 0x08
 3ae:	99 87       	std	Y+9, r25	; 0x09
 3b0:	aa 87       	std	Y+10, r26	; 0x0a
 3b2:	bb 87       	std	Y+11, r27	; 0x0b
 3b4:	68 85       	ldd	r22, Y+8	; 0x08
 3b6:	79 85       	ldd	r23, Y+9	; 0x09
 3b8:	8a 85       	ldd	r24, Y+10	; 0x0a
 3ba:	9b 85       	ldd	r25, Y+11	; 0x0b
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	40 e8       	ldi	r20, 0x80	; 128
 3c2:	5f e3       	ldi	r21, 0x3F	; 63
 3c4:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 3c8:	88 23       	and	r24, r24
 3ca:	04 f4       	brge	.+0      	; 0x3cc <LCD_Init+0x3cc>
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	9f 83       	std	Y+7, r25	; 0x07
 3d2:	8e 83       	std	Y+6, r24	; 0x06
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCD_Init+0x3d6>
 3d6:	68 85       	ldd	r22, Y+8	; 0x08
 3d8:	79 85       	ldd	r23, Y+9	; 0x09
 3da:	8a 85       	ldd	r24, Y+10	; 0x0a
 3dc:	9b 85       	ldd	r25, Y+11	; 0x0b
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	3f ef       	ldi	r19, 0xFF	; 255
 3e2:	4f e7       	ldi	r20, 0x7F	; 127
 3e4:	57 e4       	ldi	r21, 0x47	; 71
 3e6:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 3ea:	18 16       	cp	r1, r24
 3ec:	04 f4       	brge	.+0      	; 0x3ee <LCD_Init+0x3ee>
 3ee:	6c 85       	ldd	r22, Y+12	; 0x0c
 3f0:	7d 85       	ldd	r23, Y+13	; 0x0d
 3f2:	8e 85       	ldd	r24, Y+14	; 0x0e
 3f4:	9f 85       	ldd	r25, Y+15	; 0x0f
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	40 e2       	ldi	r20, 0x20	; 32
 3fc:	51 e4       	ldi	r21, 0x41	; 65
 3fe:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 402:	dc 01       	movw	r26, r24
 404:	cb 01       	movw	r24, r22
 406:	bc 01       	movw	r22, r24
 408:	cd 01       	movw	r24, r26
 40a:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 40e:	dc 01       	movw	r26, r24
 410:	cb 01       	movw	r24, r22
 412:	9f 83       	std	Y+7, r25	; 0x07
 414:	8e 83       	std	Y+6, r24	; 0x06
 416:	00 c0       	rjmp	.+0      	; 0x418 <LCD_Init+0x418>
 418:	80 e9       	ldi	r24, 0x90	; 144
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	9d 83       	std	Y+5, r25	; 0x05
 41e:	8c 83       	std	Y+4, r24	; 0x04
 420:	8c 81       	ldd	r24, Y+4	; 0x04
 422:	9d 81       	ldd	r25, Y+5	; 0x05
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	01 f4       	brne	.+0      	; 0x428 <LCD_Init+0x428>
 428:	9d 83       	std	Y+5, r25	; 0x05
 42a:	8c 83       	std	Y+4, r24	; 0x04
 42c:	8e 81       	ldd	r24, Y+6	; 0x06
 42e:	9f 81       	ldd	r25, Y+7	; 0x07
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	9f 83       	std	Y+7, r25	; 0x07
 434:	8e 83       	std	Y+6, r24	; 0x06
 436:	8e 81       	ldd	r24, Y+6	; 0x06
 438:	9f 81       	ldd	r25, Y+7	; 0x07
 43a:	00 97       	sbiw	r24, 0x00	; 0
 43c:	01 f4       	brne	.+0      	; 0x43e <LCD_Init+0x43e>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <LCD_Init+0x440>
 440:	68 85       	ldd	r22, Y+8	; 0x08
 442:	79 85       	ldd	r23, Y+9	; 0x09
 444:	8a 85       	ldd	r24, Y+10	; 0x0a
 446:	9b 85       	ldd	r25, Y+11	; 0x0b
 448:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 44c:	dc 01       	movw	r26, r24
 44e:	cb 01       	movw	r24, r22
 450:	9f 83       	std	Y+7, r25	; 0x07
 452:	8e 83       	std	Y+6, r24	; 0x06
 454:	8e 81       	ldd	r24, Y+6	; 0x06
 456:	9f 81       	ldd	r25, Y+7	; 0x07
 458:	9b 83       	std	Y+3, r25	; 0x03
 45a:	8a 83       	std	Y+2, r24	; 0x02
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	9b 81       	ldd	r25, Y+3	; 0x03
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	01 f4       	brne	.+0      	; 0x464 <LCD_Init+0x464>
 464:	9b 83       	std	Y+3, r25	; 0x03
 466:	8a 83       	std	Y+2, r24	; 0x02
 468:	00 c0       	rjmp	.+0      	; 0x46a <LCD_Init+0x46a>
 46a:	69 89       	ldd	r22, Y+17	; 0x11
 46c:	7a 89       	ldd	r23, Y+18	; 0x12
 46e:	8b 89       	ldd	r24, Y+19	; 0x13
 470:	9c 89       	ldd	r25, Y+20	; 0x14
 472:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 476:	dc 01       	movw	r26, r24
 478:	cb 01       	movw	r24, r22
 47a:	88 8b       	std	Y+16, r24	; 0x10
 47c:	88 89       	ldd	r24, Y+16	; 0x10
 47e:	89 83       	std	Y+1, r24	; 0x01
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	8a 95       	dec	r24
 484:	01 f4       	brne	.+0      	; 0x486 <LCD_Init+0x486>
 486:	89 83       	std	Y+1, r24	; 0x01
 488:	8f a9       	ldd	r24, Y+55	; 0x37
 48a:	98 ad       	ldd	r25, Y+56	; 0x38
 48c:	68 e3       	ldi	r22, 0x38	; 56
 48e:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 492:	8f a9       	ldd	r24, Y+55	; 0x37
 494:	98 ad       	ldd	r25, Y+56	; 0x38
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 49c:	8f a9       	ldd	r24, Y+55	; 0x37
 49e:	98 ad       	ldd	r25, Y+56	; 0x38
 4a0:	62 e0       	ldi	r22, 0x02	; 2
 4a2:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 4a6:	8f a9       	ldd	r24, Y+55	; 0x37
 4a8:	98 ad       	ldd	r25, Y+56	; 0x38
 4aa:	66 e0       	ldi	r22, 0x06	; 6
 4ac:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 4b0:	8f a9       	ldd	r24, Y+55	; 0x37
 4b2:	98 ad       	ldd	r25, Y+56	; 0x38
 4b4:	6c e0       	ldi	r22, 0x0C	; 12
 4b6:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 4ba:	ef a9       	ldd	r30, Y+55	; 0x37
 4bc:	f8 ad       	ldd	r31, Y+56	; 0x38
 4be:	80 81       	ld	r24, Z
 4c0:	84 30       	cpi	r24, 0x04	; 4
 4c2:	01 f4       	brne	.+0      	; 0x4c4 <LCD_Init+0x4c4>
 4c4:	8f a9       	ldd	r24, Y+55	; 0x37
 4c6:	98 ad       	ldd	r25, Y+56	; 0x38
 4c8:	68 e2       	ldi	r22, 0x28	; 40
 4ca:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 4ce:	8f a9       	ldd	r24, Y+55	; 0x37
 4d0:	98 ad       	ldd	r25, Y+56	; 0x38
 4d2:	60 e8       	ldi	r22, 0x80	; 128
 4d4:	0e 94 00 00 	call	0	; 0x0 <LCD_Init>
 4d8:	e8 96       	adiw	r28, 0x38	; 56
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	cf 91       	pop	r28
 4e6:	df 91       	pop	r29
 4e8:	08 95       	ret

Disassembly of section .text.LCD_SendCommand:

00000000 <LCD_SendCommand>:
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
}

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <LCD_SendCommand+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	6b 83       	std	Y+3, r22	; 0x03
  12:	e9 81       	ldd	r30, Y+1	; 0x01
  14:	fa 81       	ldd	r31, Y+2	; 0x02
  16:	81 85       	ldd	r24, Z+9	; 0x09
  18:	83 70       	andi	r24, 0x03	; 3
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  1a:	28 2f       	mov	r18, r24
  1c:	e9 81       	ldd	r30, Y+1	; 0x01
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
  1e:	fa 81       	ldd	r31, Y+2	; 0x02
  20:	81 85       	ldd	r24, Z+9	; 0x09
  22:	86 95       	lsr	r24
  24:	86 95       	lsr	r24
  26:	8f 70       	andi	r24, 0x0F	; 15
  28:	98 2f       	mov	r25, r24
  2a:	82 2f       	mov	r24, r18
  2c:	69 2f       	mov	r22, r25
  2e:	40 e0       	ldi	r20, 0x00	; 0
  30:	0e 94 00 00 	call	0	; 0x0 <LCD_SendCommand>
  34:	e9 81       	ldd	r30, Y+1	; 0x01
  36:	fa 81       	ldd	r31, Y+2	; 0x02
  38:	82 85       	ldd	r24, Z+10	; 0x0a
  3a:	83 70       	andi	r24, 0x03	; 3
  3c:	28 2f       	mov	r18, r24
  3e:	e9 81       	ldd	r30, Y+1	; 0x01
  40:	fa 81       	ldd	r31, Y+2	; 0x02
  42:	82 85       	ldd	r24, Z+10	; 0x0a
  44:	86 95       	lsr	r24
  46:	86 95       	lsr	r24
  48:	8f 70       	andi	r24, 0x0F	; 15
  4a:	98 2f       	mov	r25, r24
  4c:	82 2f       	mov	r24, r18
  4e:	69 2f       	mov	r22, r25
  50:	40 e0       	ldi	r20, 0x00	; 0
  52:	0e 94 00 00 	call	0	; 0x0 <LCD_SendCommand>
  56:	e9 81       	ldd	r30, Y+1	; 0x01
  58:	fa 81       	ldd	r31, Y+2	; 0x02
  5a:	80 81       	ld	r24, Z
  5c:	84 30       	cpi	r24, 0x04	; 4
  5e:	01 f4       	brne	.+0      	; 0x60 <LCD_SendCommand+0x60>
  60:	89 81       	ldd	r24, Y+1	; 0x01
  62:	9a 81       	ldd	r25, Y+2	; 0x02
  64:	6b 81       	ldd	r22, Y+3	; 0x03
  66:	0e 94 00 00 	call	0	; 0x0 <LCD_SendCommand>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <LCD_SendCommand+0x6c>
  6c:	e9 81       	ldd	r30, Y+1	; 0x01
  6e:	fa 81       	ldd	r31, Y+2	; 0x02
  70:	80 81       	ld	r24, Z
  72:	88 30       	cpi	r24, 0x08	; 8
  74:	01 f4       	brne	.+0      	; 0x76 <LCD_SendCommand+0x76>
  76:	89 81       	ldd	r24, Y+1	; 0x01
  78:	9a 81       	ldd	r25, Y+2	; 0x02

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  7a:	6b 81       	ldd	r22, Y+3	; 0x03
  7c:	0e 94 00 00 	call	0	; 0x0 <LCD_SendCommand>
  80:	0f 90       	pop	r0
  82:	0f 90       	pop	r0
  84:	0f 90       	pop	r0
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
    }

    /**< Set the enable pin to high */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_HIGH);
  86:	cf 91       	pop	r28
  88:	df 91       	pop	r29
  8a:	08 95       	ret

Disassembly of section .text.LCD_SendChar:

00000000 <LCD_SendChar>:
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
}

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <LCD_SendChar+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	6b 83       	std	Y+3, r22	; 0x03
  12:	e9 81       	ldd	r30, Y+1	; 0x01
  14:	fa 81       	ldd	r31, Y+2	; 0x02
  16:	81 85       	ldd	r24, Z+9	; 0x09
  18:	83 70       	andi	r24, 0x03	; 3
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  1a:	28 2f       	mov	r18, r24
  1c:	e9 81       	ldd	r30, Y+1	; 0x01
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
  1e:	fa 81       	ldd	r31, Y+2	; 0x02
  20:	81 85       	ldd	r24, Z+9	; 0x09
  22:	86 95       	lsr	r24
  24:	86 95       	lsr	r24
  26:	8f 70       	andi	r24, 0x0F	; 15
  28:	98 2f       	mov	r25, r24
  2a:	82 2f       	mov	r24, r18
  2c:	69 2f       	mov	r22, r25
  2e:	41 e0       	ldi	r20, 0x01	; 1
  30:	0e 94 00 00 	call	0	; 0x0 <LCD_SendChar>
  34:	e9 81       	ldd	r30, Y+1	; 0x01
  36:	fa 81       	ldd	r31, Y+2	; 0x02
  38:	82 85       	ldd	r24, Z+10	; 0x0a
  3a:	83 70       	andi	r24, 0x03	; 3
  3c:	28 2f       	mov	r18, r24
  3e:	e9 81       	ldd	r30, Y+1	; 0x01
  40:	fa 81       	ldd	r31, Y+2	; 0x02
  42:	82 85       	ldd	r24, Z+10	; 0x0a
  44:	86 95       	lsr	r24
  46:	86 95       	lsr	r24
  48:	8f 70       	andi	r24, 0x0F	; 15
  4a:	98 2f       	mov	r25, r24
  4c:	82 2f       	mov	r24, r18
  4e:	69 2f       	mov	r22, r25
  50:	40 e0       	ldi	r20, 0x00	; 0
  52:	0e 94 00 00 	call	0	; 0x0 <LCD_SendChar>
  56:	e9 81       	ldd	r30, Y+1	; 0x01
  58:	fa 81       	ldd	r31, Y+2	; 0x02
  5a:	80 81       	ld	r24, Z
  5c:	84 30       	cpi	r24, 0x04	; 4
  5e:	01 f4       	brne	.+0      	; 0x60 <LCD_SendChar+0x60>
  60:	89 81       	ldd	r24, Y+1	; 0x01
  62:	9a 81       	ldd	r25, Y+2	; 0x02
  64:	6b 81       	ldd	r22, Y+3	; 0x03
  66:	0e 94 00 00 	call	0	; 0x0 <LCD_SendChar>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <LCD_SendChar+0x6c>
  6c:	e9 81       	ldd	r30, Y+1	; 0x01
  6e:	fa 81       	ldd	r31, Y+2	; 0x02
  70:	80 81       	ld	r24, Z
  72:	88 30       	cpi	r24, 0x08	; 8
  74:	01 f4       	brne	.+0      	; 0x76 <LCD_SendChar+0x76>
  76:	89 81       	ldd	r24, Y+1	; 0x01
  78:	9a 81       	ldd	r25, Y+2	; 0x02

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  7a:	6b 81       	ldd	r22, Y+3	; 0x03
  7c:	0e 94 00 00 	call	0	; 0x0 <LCD_SendChar>
  80:	0f 90       	pop	r0
  82:	0f 90       	pop	r0
  84:	0f 90       	pop	r0
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
    }

    /**< Set the enable pin to high */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_HIGH);
  86:	cf 91       	pop	r28
  88:	df 91       	pop	r29
  8a:	08 95       	ret

Disassembly of section .text.LCD_SendString:

00000000 <LCD_SendString>:
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
}

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <LCD_SendString+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <LCD_SendString+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9b 83       	std	Y+3, r25	; 0x03
  10:	8a 83       	std	Y+2, r24	; 0x02
  12:	7d 83       	std	Y+5, r23	; 0x05
  14:	6c 83       	std	Y+4, r22	; 0x04
  16:	19 82       	std	Y+1, r1	; 0x01
  18:	00 c0       	rjmp	.+0      	; 0x1a <LCD_SendString+0x1a>
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  1a:	89 81       	ldd	r24, Y+1	; 0x01
  1c:	28 2f       	mov	r18, r24
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
  1e:	30 e0       	ldi	r19, 0x00	; 0
  20:	8c 81       	ldd	r24, Y+4	; 0x04
  22:	9d 81       	ldd	r25, Y+5	; 0x05
  24:	fc 01       	movw	r30, r24
  26:	e2 0f       	add	r30, r18
  28:	f3 1f       	adc	r31, r19
  2a:	20 81       	ld	r18, Z
  2c:	8a 81       	ldd	r24, Y+2	; 0x02
  2e:	9b 81       	ldd	r25, Y+3	; 0x03
  30:	62 2f       	mov	r22, r18
  32:	0e 94 00 00 	call	0	; 0x0 <LCD_SendString>
  36:	89 81       	ldd	r24, Y+1	; 0x01
  38:	8f 5f       	subi	r24, 0xFF	; 255
  3a:	89 83       	std	Y+1, r24	; 0x01
  3c:	89 81       	ldd	r24, Y+1	; 0x01
  3e:	28 2f       	mov	r18, r24
  40:	30 e0       	ldi	r19, 0x00	; 0
  42:	8c 81       	ldd	r24, Y+4	; 0x04
  44:	9d 81       	ldd	r25, Y+5	; 0x05
  46:	fc 01       	movw	r30, r24
  48:	e2 0f       	add	r30, r18
  4a:	f3 1f       	adc	r31, r19
  4c:	80 81       	ld	r24, Z
  4e:	88 23       	and	r24, r24
  50:	01 f4       	brne	.+0      	; 0x52 <LCD_SendString+0x52>
  52:	0f 90       	pop	r0
  54:	0f 90       	pop	r0
  56:	0f 90       	pop	r0
  58:	0f 90       	pop	r0
  5a:	0f 90       	pop	r0
  5c:	cf 91       	pop	r28
  5e:	df 91       	pop	r29
  60:	08 95       	ret

Disassembly of section .text.LCD_SendIntegerNumber:

00000000 <LCD_SendIntegerNumber>:
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
}

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	62 97       	sbiw	r28, 0x12	; 18
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	9e 87       	std	Y+14, r25	; 0x0e
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  1a:	8d 87       	std	Y+13, r24	; 0x0d
  1c:	4f 87       	std	Y+15, r20	; 0x0f
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
  1e:	58 8b       	std	Y+16, r21	; 0x10
  20:	69 8b       	std	Y+17, r22	; 0x11
  22:	7a 8b       	std	Y+18, r23	; 0x12
  24:	8b e0       	ldi	r24, 0x0B	; 11
  26:	fe 01       	movw	r30, r28
  28:	32 96       	adiw	r30, 0x02	; 2
  2a:	df 01       	movw	r26, r30
  2c:	98 2f       	mov	r25, r24
  2e:	1d 92       	st	X+, r1
  30:	9a 95       	dec	r25
  32:	01 f4       	brne	.+0      	; 0x34 <LCD_SendIntegerNumber+0x34>
  34:	19 82       	std	Y+1, r1	; 0x01
  36:	8f 85       	ldd	r24, Y+15	; 0x0f
  38:	98 89       	ldd	r25, Y+16	; 0x10
  3a:	a9 89       	ldd	r26, Y+17	; 0x11
  3c:	ba 89       	ldd	r27, Y+18	; 0x12
  3e:	bb 23       	and	r27, r27
  40:	04 f4       	brge	.+0      	; 0x42 <LCD_SendIntegerNumber+0x42>
  42:	8d 85       	ldd	r24, Y+13	; 0x0d
  44:	9e 85       	ldd	r25, Y+14	; 0x0e
  46:	6d e2       	ldi	r22, 0x2D	; 45
  48:	0e 94 00 00 	call	0	; 0x0 <LCD_SendIntegerNumber>
  4c:	8f 85       	ldd	r24, Y+15	; 0x0f
  4e:	98 89       	ldd	r25, Y+16	; 0x10
  50:	a9 89       	ldd	r26, Y+17	; 0x11
  52:	ba 89       	ldd	r27, Y+18	; 0x12
  54:	b0 95       	com	r27
  56:	a0 95       	com	r26
  58:	90 95       	com	r25
  5a:	81 95       	neg	r24
  5c:	9f 4f       	sbci	r25, 0xFF	; 255
  5e:	af 4f       	sbci	r26, 0xFF	; 255
  60:	bf 4f       	sbci	r27, 0xFF	; 255
  62:	8f 87       	std	Y+15, r24	; 0x0f
  64:	98 8b       	std	Y+16, r25	; 0x10
  66:	a9 8b       	std	Y+17, r26	; 0x11
  68:	ba 8b       	std	Y+18, r27	; 0x12
  6a:	89 81       	ldd	r24, Y+1	; 0x01
  6c:	08 2f       	mov	r16, r24
  6e:	11 27       	eor	r17, r17
  70:	07 fd       	sbrc	r16, 7
  72:	10 95       	com	r17
  74:	8f 85       	ldd	r24, Y+15	; 0x0f
  76:	98 89       	ldd	r25, Y+16	; 0x10
  78:	a9 89       	ldd	r26, Y+17	; 0x11

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  7a:	ba 89       	ldd	r27, Y+18	; 0x12
  7c:	2a e0       	ldi	r18, 0x0A	; 10
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	bc 01       	movw	r22, r24
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
    }

    /**< Set the enable pin to high */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_HIGH);
  86:	cd 01       	movw	r24, r26
  88:	0e 94 00 00 	call	0	; 0x0 <LCD_SendIntegerNumber>
  8c:	dc 01       	movw	r26, r24
  8e:	cb 01       	movw	r24, r22
  90:	28 2f       	mov	r18, r24
  92:	ce 01       	movw	r24, r28
  94:	02 96       	adiw	r24, 0x02	; 2
  96:	fc 01       	movw	r30, r24
  98:	e0 0f       	add	r30, r16
  9a:	f1 1f       	adc	r31, r17
  9c:	20 83       	st	Z, r18
  9e:	8f 85       	ldd	r24, Y+15	; 0x0f
  a0:	98 89       	ldd	r25, Y+16	; 0x10
  a2:	a9 89       	ldd	r26, Y+17	; 0x11
  a4:	ba 89       	ldd	r27, Y+18	; 0x12
  a6:	2a e0       	ldi	r18, 0x0A	; 10
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	bc 01       	movw	r22, r24
  b0:	cd 01       	movw	r24, r26
  b2:	0e 94 00 00 	call	0	; 0x0 <LCD_SendIntegerNumber>
  b6:	da 01       	movw	r26, r20
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  b8:	c9 01       	movw	r24, r18
  ba:	8f 87       	std	Y+15, r24	; 0x0f
  bc:	98 8b       	std	Y+16, r25	; 0x10
  be:	a9 8b       	std	Y+17, r26	; 0x11
  c0:	ba 8b       	std	Y+18, r27	; 0x12
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	8f 5f       	subi	r24, 0xFF	; 255
  c6:	89 83       	std	Y+1, r24	; 0x01
  c8:	8f 85       	ldd	r24, Y+15	; 0x0f
  ca:	98 89       	ldd	r25, Y+16	; 0x10
  cc:	a9 89       	ldd	r26, Y+17	; 0x11
  ce:	ba 89       	ldd	r27, Y+18	; 0x12
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	a1 05       	cpc	r26, r1
  d4:	b1 05       	cpc	r27, r1
  d6:	01 f4       	brne	.+0      	; 0xd8 <LCD_SendIntegerNumber+0xd8>
	if (__tmp < 1.0)
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	81 50       	subi	r24, 0x01	; 1
  dc:	89 83       	std	Y+1, r24	; 0x01
  de:	00 c0       	rjmp	.+0      	; 0xe0 <LCD_SendIntegerNumber+0xe0>
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	28 2f       	mov	r18, r24
  e4:	33 27       	eor	r19, r19
  e6:	27 fd       	sbrc	r18, 7
  e8:	30 95       	com	r19
  ea:	ce 01       	movw	r24, r28
  ec:	02 96       	adiw	r24, 0x02	; 2
  ee:	fc 01       	movw	r30, r24
		__ticks = 1;
  f0:	e2 0f       	add	r30, r18
  f2:	f3 1f       	adc	r31, r19
  f4:	80 81       	ld	r24, Z
  f6:	28 2f       	mov	r18, r24
  f8:	20 5d       	subi	r18, 0xD0	; 208
	else if (__tmp > 65535)
  fa:	8d 85       	ldd	r24, Y+13	; 0x0d
  fc:	9e 85       	ldd	r25, Y+14	; 0x0e
  fe:	62 2f       	mov	r22, r18
 100:	0e 94 00 00 	call	0	; 0x0 <LCD_SendIntegerNumber>
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	81 50       	subi	r24, 0x01	; 1
 108:	89 83       	std	Y+1, r24	; 0x01
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	88 23       	and	r24, r24
 10e:	04 f4       	brge	.+0      	; 0x110 <LCD_SendIntegerNumber+0x110>
 110:	62 96       	adiw	r28, 0x12	; 18
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	08 95       	ret

Disassembly of section .text.LCD_SendNumber:

00000000 <LCD_SendNumber>:
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
}

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	61 97       	sbiw	r28, 0x11	; 17
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9d 87       	std	Y+13, r25	; 0x0d
  16:	8c 87       	std	Y+12, r24	; 0x0c
  18:	4e 87       	std	Y+14, r20	; 0x0e
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  1a:	5f 87       	std	Y+15, r21	; 0x0f
  1c:	68 8b       	std	Y+16, r22	; 0x10
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
  1e:	79 8b       	std	Y+17, r23	; 0x11
  20:	6e 85       	ldd	r22, Y+14	; 0x0e
  22:	7f 85       	ldd	r23, Y+15	; 0x0f
  24:	88 89       	ldd	r24, Y+16	; 0x10
  26:	99 89       	ldd	r25, Y+17	; 0x11
  28:	0e 94 00 00 	call	0	; 0x0 <LCD_SendNumber>
  2c:	dc 01       	movw	r26, r24
  2e:	cb 01       	movw	r24, r22
  30:	88 87       	std	Y+8, r24	; 0x08
  32:	99 87       	std	Y+9, r25	; 0x09
  34:	aa 87       	std	Y+10, r26	; 0x0a
  36:	bb 87       	std	Y+11, r27	; 0x0b
  38:	28 85       	ldd	r18, Y+8	; 0x08
  3a:	39 85       	ldd	r19, Y+9	; 0x09
  3c:	4a 85       	ldd	r20, Y+10	; 0x0a
  3e:	5b 85       	ldd	r21, Y+11	; 0x0b
  40:	8c 85       	ldd	r24, Y+12	; 0x0c
  42:	9d 85       	ldd	r25, Y+13	; 0x0d
  44:	ba 01       	movw	r22, r20
  46:	a9 01       	movw	r20, r18
  48:	0e 94 00 00 	call	0	; 0x0 <LCD_SendNumber>
  4c:	8c 85       	ldd	r24, Y+12	; 0x0c
  4e:	9d 85       	ldd	r25, Y+13	; 0x0d
  50:	6e e2       	ldi	r22, 0x2E	; 46
  52:	0e 94 00 00 	call	0	; 0x0 <LCD_SendNumber>
  56:	68 85       	ldd	r22, Y+8	; 0x08
  58:	79 85       	ldd	r23, Y+9	; 0x09
  5a:	8a 85       	ldd	r24, Y+10	; 0x0a
  5c:	9b 85       	ldd	r25, Y+11	; 0x0b
  5e:	0e 94 00 00 	call	0	; 0x0 <LCD_SendNumber>
  62:	9b 01       	movw	r18, r22
  64:	ac 01       	movw	r20, r24
  66:	6e 85       	ldd	r22, Y+14	; 0x0e
  68:	7f 85       	ldd	r23, Y+15	; 0x0f
  6a:	88 89       	ldd	r24, Y+16	; 0x10
  6c:	99 89       	ldd	r25, Y+17	; 0x11
  6e:	0e 94 00 00 	call	0	; 0x0 <LCD_SendNumber>
  72:	dc 01       	movw	r26, r24
  74:	cb 01       	movw	r24, r22
  76:	8c 83       	std	Y+4, r24	; 0x04
  78:	9d 83       	std	Y+5, r25	; 0x05

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  7a:	ae 83       	std	Y+6, r26	; 0x06
  7c:	bf 83       	std	Y+7, r27	; 0x07
  7e:	83 e0       	ldi	r24, 0x03	; 3
  80:	8b 83       	std	Y+3, r24	; 0x03
  82:	1a 82       	std	Y+2, r1	; 0x02
  84:	00 c0       	rjmp	.+0      	; 0x86 <LCD_SendNumber+0x86>
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
    }

    /**< Set the enable pin to high */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_HIGH);
  86:	6c 81       	ldd	r22, Y+4	; 0x04
  88:	7d 81       	ldd	r23, Y+5	; 0x05
  8a:	8e 81       	ldd	r24, Y+6	; 0x06
  8c:	9f 81       	ldd	r25, Y+7	; 0x07
  8e:	20 e0       	ldi	r18, 0x00	; 0
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	40 e2       	ldi	r20, 0x20	; 32
  94:	51 e4       	ldi	r21, 0x41	; 65
  96:	0e 94 00 00 	call	0	; 0x0 <LCD_SendNumber>
  9a:	dc 01       	movw	r26, r24
  9c:	cb 01       	movw	r24, r22
  9e:	8c 83       	std	Y+4, r24	; 0x04
  a0:	9d 83       	std	Y+5, r25	; 0x05
  a2:	ae 83       	std	Y+6, r26	; 0x06
  a4:	bf 83       	std	Y+7, r27	; 0x07
  a6:	6c 81       	ldd	r22, Y+4	; 0x04
  a8:	7d 81       	ldd	r23, Y+5	; 0x05
  aa:	8e 81       	ldd	r24, Y+6	; 0x06
  ac:	9f 81       	ldd	r25, Y+7	; 0x07
  ae:	0e 94 00 00 	call	0	; 0x0 <LCD_SendNumber>
  b2:	dc 01       	movw	r26, r24
  b4:	cb 01       	movw	r24, r22
  b6:	89 83       	std	Y+1, r24	; 0x01
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	28 2f       	mov	r18, r24
  bc:	20 5d       	subi	r18, 0xD0	; 208
  be:	8c 85       	ldd	r24, Y+12	; 0x0c
  c0:	9d 85       	ldd	r25, Y+13	; 0x0d
  c2:	62 2f       	mov	r22, r18
  c4:	0e 94 00 00 	call	0	; 0x0 <LCD_SendNumber>
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	88 2f       	mov	r24, r24
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	aa 27       	eor	r26, r26
  d0:	97 fd       	sbrc	r25, 7
  d2:	a0 95       	com	r26
  d4:	ba 2f       	mov	r27, r26
  d6:	bc 01       	movw	r22, r24
	if (__tmp < 1.0)
  d8:	cd 01       	movw	r24, r26
  da:	0e 94 00 00 	call	0	; 0x0 <LCD_SendNumber>
  de:	9b 01       	movw	r18, r22
  e0:	ac 01       	movw	r20, r24
  e2:	6c 81       	ldd	r22, Y+4	; 0x04
  e4:	7d 81       	ldd	r23, Y+5	; 0x05
  e6:	8e 81       	ldd	r24, Y+6	; 0x06
  e8:	9f 81       	ldd	r25, Y+7	; 0x07
  ea:	0e 94 00 00 	call	0	; 0x0 <LCD_SendNumber>
  ee:	dc 01       	movw	r26, r24
		__ticks = 1;
  f0:	cb 01       	movw	r24, r22
  f2:	8c 83       	std	Y+4, r24	; 0x04
  f4:	9d 83       	std	Y+5, r25	; 0x05
  f6:	ae 83       	std	Y+6, r26	; 0x06
  f8:	bf 83       	std	Y+7, r27	; 0x07
	else if (__tmp > 65535)
  fa:	8a 81       	ldd	r24, Y+2	; 0x02
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	8a 83       	std	Y+2, r24	; 0x02
 100:	9a 81       	ldd	r25, Y+2	; 0x02
 102:	8b 81       	ldd	r24, Y+3	; 0x03
 104:	98 17       	cp	r25, r24
 106:	00 f4       	brcc	.+0      	; 0x108 <LCD_SendNumber+0x108>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_SendNumber+0x10a>
 10a:	61 96       	adiw	r28, 0x11	; 17
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	de bf       	out	0x3e, r29	; 62
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 112:	0f be       	out	0x3f, r0	; 63
 114:	cd bf       	out	0x3d, r28	; 61
 116:	cf 91       	pop	r28
 118:	df 91       	pop	r29
 11a:	08 95       	ret

Disassembly of section .text.LCD_DefineCustomChar:

00000000 <LCD_DefineCustomChar>:
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
}

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	28 97       	sbiw	r28, 0x08	; 8
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9d 83       	std	Y+5, r25	; 0x05
  16:	8c 83       	std	Y+4, r24	; 0x04
  18:	7f 83       	std	Y+7, r23	; 0x07
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  1a:	6e 83       	std	Y+6, r22	; 0x06
  1c:	8c 81       	ldd	r24, Y+4	; 0x04
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
  1e:	9d 81       	ldd	r25, Y+5	; 0x05
  20:	00 97       	sbiw	r24, 0x00	; 0
  22:	01 f4       	brne	.+0      	; 0x24 <LCD_DefineCustomChar+0x24>
  24:	18 86       	std	Y+8, r1	; 0x08
  26:	00 c0       	rjmp	.+0      	; 0x28 <LCD_DefineCustomChar+0x28>
  28:	8e 81       	ldd	r24, Y+6	; 0x06
  2a:	9f 81       	ldd	r25, Y+7	; 0x07
  2c:	00 97       	sbiw	r24, 0x00	; 0
  2e:	01 f4       	brne	.+0      	; 0x30 <LCD_DefineCustomChar+0x30>
  30:	18 86       	std	Y+8, r1	; 0x08
  32:	00 c0       	rjmp	.+0      	; 0x34 <LCD_DefineCustomChar+0x34>
  34:	ee 81       	ldd	r30, Y+6	; 0x06
  36:	ff 81       	ldd	r31, Y+7	; 0x07
  38:	80 85       	ldd	r24, Z+8	; 0x08
  3a:	88 30       	cpi	r24, 0x08	; 8
  3c:	00 f0       	brcs	.+0      	; 0x3e <LCD_DefineCustomChar+0x3e>
  3e:	18 86       	std	Y+8, r1	; 0x08
  40:	00 c0       	rjmp	.+0      	; 0x42 <LCD_DefineCustomChar+0x42>
  42:	8e 81       	ldd	r24, Y+6	; 0x06
  44:	9f 81       	ldd	r25, Y+7	; 0x07
  46:	00 97       	sbiw	r24, 0x00	; 0
  48:	01 f4       	brne	.+0      	; 0x4a <LCD_DefineCustomChar+0x4a>
  4a:	18 86       	std	Y+8, r1	; 0x08
  4c:	00 c0       	rjmp	.+0      	; 0x4e <LCD_DefineCustomChar+0x4e>
  4e:	ee 81       	ldd	r30, Y+6	; 0x06
  50:	ff 81       	ldd	r31, Y+7	; 0x07
  52:	80 85       	ldd	r24, Z+8	; 0x08
  54:	88 2f       	mov	r24, r24
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	08 96       	adiw	r24, 0x08	; 8
  5a:	88 0f       	add	r24, r24
  5c:	99 1f       	adc	r25, r25
  5e:	88 0f       	add	r24, r24
  60:	99 1f       	adc	r25, r25
  62:	88 0f       	add	r24, r24
  64:	99 1f       	adc	r25, r25
  66:	8b 83       	std	Y+3, r24	; 0x03
  68:	8c 81       	ldd	r24, Y+4	; 0x04
  6a:	9d 81       	ldd	r25, Y+5	; 0x05
  6c:	6b 81       	ldd	r22, Y+3	; 0x03
  6e:	0e 94 00 00 	call	0	; 0x0 <LCD_DefineCustomChar>
  72:	1a 82       	std	Y+2, r1	; 0x02
  74:	19 82       	std	Y+1, r1	; 0x01
  76:	00 c0       	rjmp	.+0      	; 0x78 <LCD_DefineCustomChar+0x78>
  78:	29 81       	ldd	r18, Y+1	; 0x01

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  7a:	3a 81       	ldd	r19, Y+2	; 0x02
  7c:	8e 81       	ldd	r24, Y+6	; 0x06
  7e:	9f 81       	ldd	r25, Y+7	; 0x07
  80:	fc 01       	movw	r30, r24
  82:	e2 0f       	add	r30, r18
  84:	f3 1f       	adc	r31, r19
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
    }

    /**< Set the enable pin to high */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_HIGH);
  86:	20 81       	ld	r18, Z
  88:	8c 81       	ldd	r24, Y+4	; 0x04
  8a:	9d 81       	ldd	r25, Y+5	; 0x05
  8c:	62 2f       	mov	r22, r18
  8e:	0e 94 00 00 	call	0	; 0x0 <LCD_DefineCustomChar>
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	9a 81       	ldd	r25, Y+2	; 0x02
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	9a 83       	std	Y+2, r25	; 0x02
  9a:	89 83       	std	Y+1, r24	; 0x01
  9c:	89 81       	ldd	r24, Y+1	; 0x01
  9e:	9a 81       	ldd	r25, Y+2	; 0x02
  a0:	88 30       	cpi	r24, 0x08	; 8
  a2:	91 05       	cpc	r25, r1
  a4:	04 f0       	brlt	.+0      	; 0xa6 <LCD_DefineCustomChar+0xa6>
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	88 87       	std	Y+8, r24	; 0x08
  aa:	88 85       	ldd	r24, Y+8	; 0x08
  ac:	28 96       	adiw	r28, 0x08	; 8
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

Disassembly of section .text.LCD_DisplayCustomChar:

00000000 <LCD_DisplayCustomChar>:
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
}

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	28 97       	sbiw	r28, 0x08	; 8
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9b 83       	std	Y+3, r25	; 0x03
  16:	8a 83       	std	Y+2, r24	; 0x02
  18:	6c 83       	std	Y+4, r22	; 0x04
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  1a:	4d 83       	std	Y+5, r20	; 0x05
  1c:	2e 83       	std	Y+6, r18	; 0x06
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
  1e:	8a 81       	ldd	r24, Y+2	; 0x02
  20:	9b 81       	ldd	r25, Y+3	; 0x03
  22:	00 97       	sbiw	r24, 0x00	; 0
  24:	01 f4       	brne	.+0      	; 0x26 <LCD_DisplayCustomChar+0x26>
  26:	18 86       	std	Y+8, r1	; 0x08
  28:	00 c0       	rjmp	.+0      	; 0x2a <LCD_DisplayCustomChar+0x2a>
  2a:	8c 81       	ldd	r24, Y+4	; 0x04
  2c:	88 30       	cpi	r24, 0x08	; 8
  2e:	00 f0       	brcs	.+0      	; 0x30 <LCD_DisplayCustomChar+0x30>
  30:	18 86       	std	Y+8, r1	; 0x08
  32:	00 c0       	rjmp	.+0      	; 0x34 <LCD_DisplayCustomChar+0x34>
  34:	8d 81       	ldd	r24, Y+5	; 0x05
  36:	82 30       	cpi	r24, 0x02	; 2
  38:	00 f0       	brcs	.+0      	; 0x3a <LCD_DisplayCustomChar+0x3a>
  3a:	18 86       	std	Y+8, r1	; 0x08
  3c:	00 c0       	rjmp	.+0      	; 0x3e <LCD_DisplayCustomChar+0x3e>
  3e:	8e 81       	ldd	r24, Y+6	; 0x06
  40:	80 31       	cpi	r24, 0x10	; 16
  42:	00 f0       	brcs	.+0      	; 0x44 <LCD_DisplayCustomChar+0x44>
  44:	18 86       	std	Y+8, r1	; 0x08
  46:	00 c0       	rjmp	.+0      	; 0x48 <LCD_DisplayCustomChar+0x48>
  48:	8d 81       	ldd	r24, Y+5	; 0x05
  4a:	88 23       	and	r24, r24
  4c:	01 f4       	brne	.+0      	; 0x4e <LCD_DisplayCustomChar+0x4e>
  4e:	8e 81       	ldd	r24, Y+6	; 0x06
  50:	98 2f       	mov	r25, r24
  52:	90 58       	subi	r25, 0x80	; 128
  54:	9f 83       	std	Y+7, r25	; 0x07
  56:	00 c0       	rjmp	.+0      	; 0x58 <LCD_DisplayCustomChar+0x58>
  58:	8e 81       	ldd	r24, Y+6	; 0x06
  5a:	98 2f       	mov	r25, r24
  5c:	90 54       	subi	r25, 0x40	; 64
  5e:	9f 83       	std	Y+7, r25	; 0x07
  60:	8f 81       	ldd	r24, Y+7	; 0x07
  62:	89 83       	std	Y+1, r24	; 0x01
  64:	8a 81       	ldd	r24, Y+2	; 0x02
  66:	9b 81       	ldd	r25, Y+3	; 0x03
  68:	69 81       	ldd	r22, Y+1	; 0x01
  6a:	0e 94 00 00 	call	0	; 0x0 <LCD_DisplayCustomChar>
  6e:	8a 81       	ldd	r24, Y+2	; 0x02
  70:	9b 81       	ldd	r25, Y+3	; 0x03
  72:	6c 81       	ldd	r22, Y+4	; 0x04
  74:	0e 94 00 00 	call	0	; 0x0 <LCD_DisplayCustomChar>
  78:	91 e0       	ldi	r25, 0x01	; 1

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  7a:	98 87       	std	Y+8, r25	; 0x08
  7c:	88 85       	ldd	r24, Y+8	; 0x08
  7e:	28 96       	adiw	r28, 0x08	; 8
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	f8 94       	cli
  84:	de bf       	out	0x3e, r29	; 62
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
    }

    /**< Set the enable pin to high */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_HIGH);
  86:	0f be       	out	0x3f, r0	; 63
  88:	cd bf       	out	0x3d, r28	; 61
  8a:	cf 91       	pop	r28
  8c:	df 91       	pop	r29
  8e:	08 95       	ret

Disassembly of section .text.LCD_Clear:

00000000 <LCD_Clear>:
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
}

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <LCD_Clear+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	61 e0       	ldi	r22, 0x01	; 1
  14:	0e 94 00 00 	call	0	; 0x0 <LCD_Clear>
  18:	0f 90       	pop	r0
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  1a:	0f 90       	pop	r0
  1c:	cf 91       	pop	r28
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
  1e:	df 91       	pop	r29
  20:	08 95       	ret

Disassembly of section .text.LCD_GoToXYPos:

00000000 <LCD_GoToXYPos>:
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
}

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	28 97       	sbiw	r28, 0x08	; 8
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	6d 83       	std	Y+5, r22	; 0x05
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  1a:	4e 83       	std	Y+6, r20	; 0x06
  1c:	8d 81       	ldd	r24, Y+5	; 0x05
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
  1e:	82 30       	cpi	r24, 0x02	; 2
  20:	00 f4       	brcc	.+0      	; 0x22 <LCD_GoToXYPos+0x22>
  22:	8e 81       	ldd	r24, Y+6	; 0x06
  24:	80 31       	cpi	r24, 0x10	; 16
  26:	00 f4       	brcc	.+0      	; 0x28 <LCD_GoToXYPos+0x28>
  28:	1a 82       	std	Y+2, r1	; 0x02
  2a:	8d 81       	ldd	r24, Y+5	; 0x05
  2c:	28 2f       	mov	r18, r24
  2e:	30 e0       	ldi	r19, 0x00	; 0
  30:	38 87       	std	Y+8, r19	; 0x08
  32:	2f 83       	std	Y+7, r18	; 0x07
  34:	8f 81       	ldd	r24, Y+7	; 0x07
  36:	98 85       	ldd	r25, Y+8	; 0x08
  38:	00 97       	sbiw	r24, 0x00	; 0
  3a:	01 f0       	breq	.+0      	; 0x3c <LCD_GoToXYPos+0x3c>
  3c:	2f 81       	ldd	r18, Y+7	; 0x07
  3e:	38 85       	ldd	r19, Y+8	; 0x08
  40:	21 30       	cpi	r18, 0x01	; 1
  42:	31 05       	cpc	r19, r1
  44:	01 f0       	breq	.+0      	; 0x46 <LCD_GoToXYPos+0x46>
  46:	00 c0       	rjmp	.+0      	; 0x48 <LCD_GoToXYPos+0x48>
  48:	8e 81       	ldd	r24, Y+6	; 0x06
  4a:	8a 83       	std	Y+2, r24	; 0x02
  4c:	00 c0       	rjmp	.+0      	; 0x4e <LCD_GoToXYPos+0x4e>
  4e:	8e 81       	ldd	r24, Y+6	; 0x06
  50:	80 5c       	subi	r24, 0xC0	; 192
  52:	8a 83       	std	Y+2, r24	; 0x02
  54:	8a 81       	ldd	r24, Y+2	; 0x02
  56:	80 68       	ori	r24, 0x80	; 128
  58:	89 83       	std	Y+1, r24	; 0x01
  5a:	8b 81       	ldd	r24, Y+3	; 0x03
  5c:	9c 81       	ldd	r25, Y+4	; 0x04
  5e:	69 81       	ldd	r22, Y+1	; 0x01
  60:	0e 94 00 00 	call	0	; 0x0 <LCD_GoToXYPos>
  64:	28 96       	adiw	r28, 0x08	; 8
  66:	0f b6       	in	r0, 0x3f	; 63
  68:	f8 94       	cli
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	0f be       	out	0x3f, r0	; 63
  6e:	cd bf       	out	0x3d, r28	; 61
  70:	cf 91       	pop	r28
  72:	df 91       	pop	r29
  74:	08 95       	ret

Disassembly of section .text.HAL_LCD_Send4Bits:

00000000 <HAL_LCD_Send4Bits>:
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
}

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	a1 97       	sbiw	r28, 0x21	; 33
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	98 a3       	std	Y+32, r25	; 0x20
  16:	8f 8f       	std	Y+31, r24	; 0x1f
  18:	69 a3       	std	Y+33, r22	; 0x21
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  1a:	1e 8e       	std	Y+30, r1	; 0x1e
  1c:	00 c0       	rjmp	.+0      	; 0x1e <HAL_LCD_Send4Bits+0x1e>
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
  1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
  20:	28 2f       	mov	r18, r24
  22:	30 e0       	ldi	r19, 0x00	; 0
  24:	8f 8d       	ldd	r24, Y+31	; 0x1f
  26:	98 a1       	ldd	r25, Y+32	; 0x20
  28:	82 0f       	add	r24, r18
  2a:	93 1f       	adc	r25, r19
  2c:	fc 01       	movw	r30, r24
  2e:	31 96       	adiw	r30, 0x01	; 1
  30:	80 81       	ld	r24, Z
  32:	83 70       	andi	r24, 0x03	; 3
  34:	58 2f       	mov	r21, r24
  36:	8e 8d       	ldd	r24, Y+30	; 0x1e
  38:	28 2f       	mov	r18, r24
  3a:	30 e0       	ldi	r19, 0x00	; 0
  3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
  3e:	98 a1       	ldd	r25, Y+32	; 0x20
  40:	82 0f       	add	r24, r18
  42:	93 1f       	adc	r25, r19
  44:	fc 01       	movw	r30, r24
  46:	31 96       	adiw	r30, 0x01	; 1
  48:	80 81       	ld	r24, Z
  4a:	86 95       	lsr	r24
  4c:	86 95       	lsr	r24
  4e:	8f 70       	andi	r24, 0x0F	; 15
  50:	48 2f       	mov	r20, r24
  52:	89 a1       	ldd	r24, Y+33	; 0x21
  54:	28 2f       	mov	r18, r24
  56:	30 e0       	ldi	r19, 0x00	; 0
  58:	8e 8d       	ldd	r24, Y+30	; 0x1e
  5a:	88 2f       	mov	r24, r24
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	04 96       	adiw	r24, 0x04	; 4
  60:	b9 01       	movw	r22, r18
  62:	00 c0       	rjmp	.+0      	; 0x64 <HAL_LCD_Send4Bits+0x64>
  64:	75 95       	asr	r23
  66:	67 95       	ror	r22
  68:	8a 95       	dec	r24
  6a:	02 f4       	brpl	.+0      	; 0x6c <HAL_LCD_Send4Bits+0x6c>
  6c:	cb 01       	movw	r24, r22
  6e:	98 2f       	mov	r25, r24
  70:	91 70       	andi	r25, 0x01	; 1
  72:	85 2f       	mov	r24, r21
  74:	64 2f       	mov	r22, r20
  76:	49 2f       	mov	r20, r25
  78:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
  7e:	8f 5f       	subi	r24, 0xFF	; 255
  80:	8e 8f       	std	Y+30, r24	; 0x1e
  82:	8e 8d       	ldd	r24, Y+30	; 0x1e
  84:	84 30       	cpi	r24, 0x04	; 4
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
    }

    /**< Set the enable pin to high */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_HIGH);
  86:	00 f0       	brcs	.+0      	; 0x88 <HAL_LCD_Send4Bits+0x88>
  88:	ef 8d       	ldd	r30, Y+31	; 0x1f
  8a:	f8 a1       	ldd	r31, Y+32	; 0x20
  8c:	83 85       	ldd	r24, Z+11	; 0x0b
  8e:	83 70       	andi	r24, 0x03	; 3
  90:	28 2f       	mov	r18, r24
  92:	ef 8d       	ldd	r30, Y+31	; 0x1f
  94:	f8 a1       	ldd	r31, Y+32	; 0x20
  96:	83 85       	ldd	r24, Z+11	; 0x0b
  98:	86 95       	lsr	r24
  9a:	86 95       	lsr	r24
  9c:	8f 70       	andi	r24, 0x0F	; 15
  9e:	98 2f       	mov	r25, r24
  a0:	82 2f       	mov	r24, r18
  a2:	69 2f       	mov	r22, r25
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	a0 ea       	ldi	r26, 0xA0	; 160
  b0:	b0 e4       	ldi	r27, 0x40	; 64
  b2:	89 8f       	std	Y+25, r24	; 0x19
  b4:	9a 8f       	std	Y+26, r25	; 0x1a
  b6:	ab 8f       	std	Y+27, r26	; 0x1b
  b8:	bc 8f       	std	Y+28, r27	; 0x1c
  ba:	69 8d       	ldd	r22, Y+25	; 0x19
  bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
  be:	8b 8d       	ldd	r24, Y+27	; 0x1b
  c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	4a e7       	ldi	r20, 0x7A	; 122
  c8:	55 e4       	ldi	r21, 0x45	; 69
  ca:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
  ce:	dc 01       	movw	r26, r24
  d0:	cb 01       	movw	r24, r22
  d2:	8d 8b       	std	Y+21, r24	; 0x15
  d4:	9e 8b       	std	Y+22, r25	; 0x16
  d6:	af 8b       	std	Y+23, r26	; 0x17
	if (__tmp < 1.0)
  d8:	b8 8f       	std	Y+24, r27	; 0x18
  da:	6d 89       	ldd	r22, Y+21	; 0x15
  dc:	7e 89       	ldd	r23, Y+22	; 0x16
  de:	8f 89       	ldd	r24, Y+23	; 0x17
  e0:	98 8d       	ldd	r25, Y+24	; 0x18
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	40 e8       	ldi	r20, 0x80	; 128
  e8:	5f e3       	ldi	r21, 0x3F	; 63
  ea:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
  ee:	88 23       	and	r24, r24
		__ticks = 1;
  f0:	04 f4       	brge	.+0      	; 0xf2 <HAL_LCD_Send4Bits+0xf2>
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	9c 8b       	std	Y+20, r25	; 0x14
  f8:	8b 8b       	std	Y+19, r24	; 0x13
	else if (__tmp > 65535)
  fa:	00 c0       	rjmp	.+0      	; 0xfc <HAL_LCD_Send4Bits+0xfc>
  fc:	6d 89       	ldd	r22, Y+21	; 0x15
  fe:	7e 89       	ldd	r23, Y+22	; 0x16
 100:	8f 89       	ldd	r24, Y+23	; 0x17
 102:	98 8d       	ldd	r25, Y+24	; 0x18
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	3f ef       	ldi	r19, 0xFF	; 255
 108:	4f e7       	ldi	r20, 0x7F	; 127
 10a:	57 e4       	ldi	r21, 0x47	; 71
 10c:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
 110:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 112:	04 f4       	brge	.+0      	; 0x114 <HAL_LCD_Send4Bits+0x114>
 114:	69 8d       	ldd	r22, Y+25	; 0x19
 116:	7a 8d       	ldd	r23, Y+26	; 0x1a
 118:	8b 8d       	ldd	r24, Y+27	; 0x1b
 11a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	40 e2       	ldi	r20, 0x20	; 32
 122:	51 e4       	ldi	r21, 0x41	; 65
 124:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
 128:	dc 01       	movw	r26, r24
 12a:	cb 01       	movw	r24, r22
 12c:	bc 01       	movw	r22, r24
 12e:	cd 01       	movw	r24, r26
 130:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
 134:	dc 01       	movw	r26, r24
 136:	cb 01       	movw	r24, r22
 138:	9c 8b       	std	Y+20, r25	; 0x14
 13a:	8b 8b       	std	Y+19, r24	; 0x13
 13c:	00 c0       	rjmp	.+0      	; 0x13e <HAL_LCD_Send4Bits+0x13e>
 13e:	80 e9       	ldi	r24, 0x90	; 144
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	9a 8b       	std	Y+18, r25	; 0x12
 144:	89 8b       	std	Y+17, r24	; 0x11
 146:	89 89       	ldd	r24, Y+17	; 0x11
 148:	9a 89       	ldd	r25, Y+18	; 0x12
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	01 f4       	brne	.+0      	; 0x14e <HAL_LCD_Send4Bits+0x14e>
 14e:	9a 8b       	std	Y+18, r25	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 150:	89 8b       	std	Y+17, r24	; 0x11
 152:	8b 89       	ldd	r24, Y+19	; 0x13
 154:	9c 89       	ldd	r25, Y+20	; 0x14
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	9c 8b       	std	Y+20, r25	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15a:	8b 8b       	std	Y+19, r24	; 0x13
 15c:	8b 89       	ldd	r24, Y+19	; 0x13
 15e:	9c 89       	ldd	r25, Y+20	; 0x14
 160:	00 97       	sbiw	r24, 0x00	; 0
 162:	01 f4       	brne	.+0      	; 0x164 <HAL_LCD_Send4Bits+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 164:	00 c0       	rjmp	.+0      	; 0x166 <HAL_LCD_Send4Bits+0x166>
 166:	6d 89       	ldd	r22, Y+21	; 0x15
 168:	7e 89       	ldd	r23, Y+22	; 0x16
 16a:	8f 89       	ldd	r24, Y+23	; 0x17
 16c:	98 8d       	ldd	r25, Y+24	; 0x18
 16e:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
 172:	dc 01       	movw	r26, r24
 174:	cb 01       	movw	r24, r22
 176:	9c 8b       	std	Y+20, r25	; 0x14
 178:	8b 8b       	std	Y+19, r24	; 0x13
 17a:	8b 89       	ldd	r24, Y+19	; 0x13
 17c:	9c 89       	ldd	r25, Y+20	; 0x14
 17e:	98 8b       	std	Y+16, r25	; 0x10
 180:	8f 87       	std	Y+15, r24	; 0x0f
 182:	8f 85       	ldd	r24, Y+15	; 0x0f
 184:	98 89       	ldd	r25, Y+16	; 0x10
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	01 f4       	brne	.+0      	; 0x18a <HAL_LCD_Send4Bits+0x18a>
 18a:	98 8b       	std	Y+16, r25	; 0x10
    /**< Set the Pulse time to be 5msec */
    _delay_ms(5);
    /**< Set the enable pin to low */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
 18c:	8f 87       	std	Y+15, r24	; 0x0f
 18e:	ef 8d       	ldd	r30, Y+31	; 0x1f
 190:	f8 a1       	ldd	r31, Y+32	; 0x20
 192:	83 85       	ldd	r24, Z+11	; 0x0b
 194:	83 70       	andi	r24, 0x03	; 3
 196:	28 2f       	mov	r18, r24
 198:	ef 8d       	ldd	r30, Y+31	; 0x1f
 19a:	f8 a1       	ldd	r31, Y+32	; 0x20
 19c:	83 85       	ldd	r24, Z+11	; 0x0b
 19e:	86 95       	lsr	r24
 1a0:	86 95       	lsr	r24
 1a2:	8f 70       	andi	r24, 0x0F	; 15
 1a4:	98 2f       	mov	r25, r24
 1a6:	82 2f       	mov	r24, r18
 1a8:	69 2f       	mov	r22, r25
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
}
 1b0:	89 a1       	ldd	r24, Y+33	; 0x21
 1b2:	82 95       	swap	r24
 1b4:	80 7f       	andi	r24, 0xF0	; 240
 1b6:	89 a3       	std	Y+33, r24	; 0x21
 1b8:	1d 8e       	std	Y+29, r1	; 0x1d
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <HAL_LCD_Send4Bits+0x1bc>
 1bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
 1be:	28 2f       	mov	r18, r24
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
 1c4:	98 a1       	ldd	r25, Y+32	; 0x20
 1c6:	82 0f       	add	r24, r18
 1c8:	93 1f       	adc	r25, r19
 1ca:	fc 01       	movw	r30, r24
 1cc:	31 96       	adiw	r30, 0x01	; 1
 1ce:	80 81       	ld	r24, Z
 1d0:	83 70       	andi	r24, 0x03	; 3
 1d2:	58 2f       	mov	r21, r24
 1d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
 1d6:	28 2f       	mov	r18, r24
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	8f 8d       	ldd	r24, Y+31	; 0x1f
 1dc:	98 a1       	ldd	r25, Y+32	; 0x20
 1de:	82 0f       	add	r24, r18
 1e0:	93 1f       	adc	r25, r19
 1e2:	fc 01       	movw	r30, r24
 1e4:	31 96       	adiw	r30, 0x01	; 1
 1e6:	80 81       	ld	r24, Z
 1e8:	86 95       	lsr	r24
 1ea:	86 95       	lsr	r24
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	48 2f       	mov	r20, r24
 1f0:	89 a1       	ldd	r24, Y+33	; 0x21
 1f2:	28 2f       	mov	r18, r24
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
 1f8:	88 2f       	mov	r24, r24
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	04 96       	adiw	r24, 0x04	; 4
 1fe:	b9 01       	movw	r22, r18
 200:	00 c0       	rjmp	.+0      	; 0x202 <HAL_LCD_Send4Bits+0x202>
 202:	75 95       	asr	r23
 204:	67 95       	ror	r22
 206:	8a 95       	dec	r24
 208:	02 f4       	brpl	.+0      	; 0x20a <HAL_LCD_Send4Bits+0x20a>
 20a:	cb 01       	movw	r24, r22
 20c:	98 2f       	mov	r25, r24
 20e:	91 70       	andi	r25, 0x01	; 1
 210:	85 2f       	mov	r24, r21
 212:	64 2f       	mov	r22, r20
 214:	49 2f       	mov	r20, r25
 216:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
 21a:	8d 8d       	ldd	r24, Y+29	; 0x1d
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	8d 8f       	std	Y+29, r24	; 0x1d
 220:	8d 8d       	ldd	r24, Y+29	; 0x1d
 222:	84 30       	cpi	r24, 0x04	; 4
 224:	00 f0       	brcs	.+0      	; 0x226 <HAL_LCD_Send4Bits+0x226>
 226:	ef 8d       	ldd	r30, Y+31	; 0x1f
 228:	f8 a1       	ldd	r31, Y+32	; 0x20
 22a:	83 85       	ldd	r24, Z+11	; 0x0b
 22c:	83 70       	andi	r24, 0x03	; 3
 22e:	28 2f       	mov	r18, r24
 230:	ef 8d       	ldd	r30, Y+31	; 0x1f
 232:	f8 a1       	ldd	r31, Y+32	; 0x20
 234:	83 85       	ldd	r24, Z+11	; 0x0b
 236:	86 95       	lsr	r24
 238:	86 95       	lsr	r24
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	98 2f       	mov	r25, r24
 23e:	82 2f       	mov	r24, r18
 240:	69 2f       	mov	r22, r25
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	a0 ea       	ldi	r26, 0xA0	; 160
 24e:	b0 e4       	ldi	r27, 0x40	; 64
 250:	8b 87       	std	Y+11, r24	; 0x0b
 252:	9c 87       	std	Y+12, r25	; 0x0c
 254:	ad 87       	std	Y+13, r26	; 0x0d
 256:	be 87       	std	Y+14, r27	; 0x0e
 258:	6b 85       	ldd	r22, Y+11	; 0x0b
 25a:	7c 85       	ldd	r23, Y+12	; 0x0c
 25c:	8d 85       	ldd	r24, Y+13	; 0x0d
 25e:	9e 85       	ldd	r25, Y+14	; 0x0e
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	4a e7       	ldi	r20, 0x7A	; 122
 266:	55 e4       	ldi	r21, 0x45	; 69
 268:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
 26c:	dc 01       	movw	r26, r24
 26e:	cb 01       	movw	r24, r22
 270:	8f 83       	std	Y+7, r24	; 0x07
 272:	98 87       	std	Y+8, r25	; 0x08
 274:	a9 87       	std	Y+9, r26	; 0x09
 276:	ba 87       	std	Y+10, r27	; 0x0a
 278:	6f 81       	ldd	r22, Y+7	; 0x07
 27a:	78 85       	ldd	r23, Y+8	; 0x08
 27c:	89 85       	ldd	r24, Y+9	; 0x09
 27e:	9a 85       	ldd	r25, Y+10	; 0x0a
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	40 e8       	ldi	r20, 0x80	; 128
 286:	5f e3       	ldi	r21, 0x3F	; 63
 288:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
 28c:	88 23       	and	r24, r24
 28e:	04 f4       	brge	.+0      	; 0x290 <HAL_LCD_Send4Bits+0x290>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	9e 83       	std	Y+6, r25	; 0x06
 296:	8d 83       	std	Y+5, r24	; 0x05
 298:	00 c0       	rjmp	.+0      	; 0x29a <HAL_LCD_Send4Bits+0x29a>
 29a:	6f 81       	ldd	r22, Y+7	; 0x07
 29c:	78 85       	ldd	r23, Y+8	; 0x08
 29e:	89 85       	ldd	r24, Y+9	; 0x09
 2a0:	9a 85       	ldd	r25, Y+10	; 0x0a
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	3f ef       	ldi	r19, 0xFF	; 255
 2a6:	4f e7       	ldi	r20, 0x7F	; 127
 2a8:	57 e4       	ldi	r21, 0x47	; 71
 2aa:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
 2ae:	18 16       	cp	r1, r24
 2b0:	04 f4       	brge	.+0      	; 0x2b2 <HAL_LCD_Send4Bits+0x2b2>
 2b2:	6b 85       	ldd	r22, Y+11	; 0x0b
 2b4:	7c 85       	ldd	r23, Y+12	; 0x0c
 2b6:	8d 85       	ldd	r24, Y+13	; 0x0d
 2b8:	9e 85       	ldd	r25, Y+14	; 0x0e
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	40 e2       	ldi	r20, 0x20	; 32
 2c0:	51 e4       	ldi	r21, 0x41	; 65
 2c2:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
 2c6:	dc 01       	movw	r26, r24
 2c8:	cb 01       	movw	r24, r22
 2ca:	bc 01       	movw	r22, r24
 2cc:	cd 01       	movw	r24, r26
 2ce:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
 2d2:	dc 01       	movw	r26, r24
 2d4:	cb 01       	movw	r24, r22
 2d6:	9e 83       	std	Y+6, r25	; 0x06
 2d8:	8d 83       	std	Y+5, r24	; 0x05
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <HAL_LCD_Send4Bits+0x2dc>
 2dc:	80 e9       	ldi	r24, 0x90	; 144
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	9c 83       	std	Y+4, r25	; 0x04
 2e2:	8b 83       	std	Y+3, r24	; 0x03
 2e4:	8b 81       	ldd	r24, Y+3	; 0x03
 2e6:	9c 81       	ldd	r25, Y+4	; 0x04
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	01 f4       	brne	.+0      	; 0x2ec <HAL_LCD_Send4Bits+0x2ec>
 2ec:	9c 83       	std	Y+4, r25	; 0x04
 2ee:	8b 83       	std	Y+3, r24	; 0x03
 2f0:	8d 81       	ldd	r24, Y+5	; 0x05
 2f2:	9e 81       	ldd	r25, Y+6	; 0x06
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	9e 83       	std	Y+6, r25	; 0x06
 2f8:	8d 83       	std	Y+5, r24	; 0x05
 2fa:	8d 81       	ldd	r24, Y+5	; 0x05
 2fc:	9e 81       	ldd	r25, Y+6	; 0x06
 2fe:	00 97       	sbiw	r24, 0x00	; 0
 300:	01 f4       	brne	.+0      	; 0x302 <HAL_LCD_Send4Bits+0x302>
 302:	00 c0       	rjmp	.+0      	; 0x304 <HAL_LCD_Send4Bits+0x304>
 304:	6f 81       	ldd	r22, Y+7	; 0x07
 306:	78 85       	ldd	r23, Y+8	; 0x08
 308:	89 85       	ldd	r24, Y+9	; 0x09
 30a:	9a 85       	ldd	r25, Y+10	; 0x0a
 30c:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
 310:	dc 01       	movw	r26, r24
 312:	cb 01       	movw	r24, r22
 314:	9e 83       	std	Y+6, r25	; 0x06
 316:	8d 83       	std	Y+5, r24	; 0x05
 318:	8d 81       	ldd	r24, Y+5	; 0x05
 31a:	9e 81       	ldd	r25, Y+6	; 0x06
 31c:	9a 83       	std	Y+2, r25	; 0x02
 31e:	89 83       	std	Y+1, r24	; 0x01
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	9a 81       	ldd	r25, Y+2	; 0x02
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	01 f4       	brne	.+0      	; 0x328 <HAL_LCD_Send4Bits+0x328>
 328:	9a 83       	std	Y+2, r25	; 0x02
 32a:	89 83       	std	Y+1, r24	; 0x01
 32c:	ef 8d       	ldd	r30, Y+31	; 0x1f
 32e:	f8 a1       	ldd	r31, Y+32	; 0x20
 330:	83 85       	ldd	r24, Z+11	; 0x0b
 332:	83 70       	andi	r24, 0x03	; 3
 334:	28 2f       	mov	r18, r24
 336:	ef 8d       	ldd	r30, Y+31	; 0x1f
 338:	f8 a1       	ldd	r31, Y+32	; 0x20
 33a:	83 85       	ldd	r24, Z+11	; 0x0b
 33c:	86 95       	lsr	r24
 33e:	86 95       	lsr	r24
 340:	8f 70       	andi	r24, 0x0F	; 15
 342:	98 2f       	mov	r25, r24
 344:	82 2f       	mov	r24, r18
 346:	69 2f       	mov	r22, r25
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send4Bits>
 34e:	a1 96       	adiw	r28, 0x21	; 33
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	cf 91       	pop	r28
 35c:	df 91       	pop	r29
 35e:	08 95       	ret

Disassembly of section .text.HAL_LCD_Send8Bits:

00000000 <HAL_LCD_Send8Bits>:
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
}

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	62 97       	sbiw	r28, 0x12	; 18
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	99 8b       	std	Y+17, r25	; 0x11
  16:	88 8b       	std	Y+16, r24	; 0x10
  18:	6a 8b       	std	Y+18, r22	; 0x12
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  1a:	1f 86       	std	Y+15, r1	; 0x0f
  1c:	00 c0       	rjmp	.+0      	; 0x1e <HAL_LCD_Send8Bits+0x1e>
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
  1e:	8f 85       	ldd	r24, Y+15	; 0x0f
  20:	28 2f       	mov	r18, r24
  22:	30 e0       	ldi	r19, 0x00	; 0
  24:	88 89       	ldd	r24, Y+16	; 0x10
  26:	99 89       	ldd	r25, Y+17	; 0x11
  28:	82 0f       	add	r24, r18
  2a:	93 1f       	adc	r25, r19
  2c:	fc 01       	movw	r30, r24
  2e:	31 96       	adiw	r30, 0x01	; 1
  30:	80 81       	ld	r24, Z
  32:	83 70       	andi	r24, 0x03	; 3
  34:	58 2f       	mov	r21, r24
  36:	8f 85       	ldd	r24, Y+15	; 0x0f
  38:	28 2f       	mov	r18, r24
  3a:	30 e0       	ldi	r19, 0x00	; 0
  3c:	88 89       	ldd	r24, Y+16	; 0x10
  3e:	99 89       	ldd	r25, Y+17	; 0x11
  40:	82 0f       	add	r24, r18
  42:	93 1f       	adc	r25, r19
  44:	fc 01       	movw	r30, r24
  46:	31 96       	adiw	r30, 0x01	; 1
  48:	80 81       	ld	r24, Z
  4a:	86 95       	lsr	r24
  4c:	86 95       	lsr	r24
  4e:	8f 70       	andi	r24, 0x0F	; 15
  50:	48 2f       	mov	r20, r24
  52:	8a 89       	ldd	r24, Y+18	; 0x12
  54:	28 2f       	mov	r18, r24
  56:	30 e0       	ldi	r19, 0x00	; 0
  58:	8f 85       	ldd	r24, Y+15	; 0x0f
  5a:	88 2f       	mov	r24, r24
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	b9 01       	movw	r22, r18
  60:	00 c0       	rjmp	.+0      	; 0x62 <HAL_LCD_Send8Bits+0x62>
  62:	75 95       	asr	r23
  64:	67 95       	ror	r22
  66:	8a 95       	dec	r24
  68:	02 f4       	brpl	.+0      	; 0x6a <HAL_LCD_Send8Bits+0x6a>
  6a:	cb 01       	movw	r24, r22
  6c:	98 2f       	mov	r25, r24
  6e:	91 70       	andi	r25, 0x01	; 1
  70:	85 2f       	mov	r24, r21
  72:	64 2f       	mov	r22, r20
  74:	49 2f       	mov	r20, r25
  76:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send8Bits>

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
  7a:	8f 85       	ldd	r24, Y+15	; 0x0f
  7c:	8f 5f       	subi	r24, 0xFF	; 255
  7e:	8f 87       	std	Y+15, r24	; 0x0f
  80:	8f 85       	ldd	r24, Y+15	; 0x0f
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	00 f0       	brcs	.+0      	; 0x86 <HAL_LCD_Send8Bits+0x86>
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
    }

    /**< Set the enable pin to high */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_HIGH);
  86:	e8 89       	ldd	r30, Y+16	; 0x10
  88:	f9 89       	ldd	r31, Y+17	; 0x11
  8a:	83 85       	ldd	r24, Z+11	; 0x0b
  8c:	83 70       	andi	r24, 0x03	; 3
  8e:	28 2f       	mov	r18, r24
  90:	e8 89       	ldd	r30, Y+16	; 0x10
  92:	f9 89       	ldd	r31, Y+17	; 0x11
  94:	83 85       	ldd	r24, Z+11	; 0x0b
  96:	86 95       	lsr	r24
  98:	86 95       	lsr	r24
  9a:	8f 70       	andi	r24, 0x0F	; 15
  9c:	98 2f       	mov	r25, r24
  9e:	82 2f       	mov	r24, r18
  a0:	69 2f       	mov	r22, r25
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send8Bits>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	a0 ea       	ldi	r26, 0xA0	; 160
  ae:	b0 e4       	ldi	r27, 0x40	; 64
  b0:	8b 87       	std	Y+11, r24	; 0x0b
  b2:	9c 87       	std	Y+12, r25	; 0x0c
  b4:	ad 87       	std	Y+13, r26	; 0x0d
  b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  b8:	6b 85       	ldd	r22, Y+11	; 0x0b
  ba:	7c 85       	ldd	r23, Y+12	; 0x0c
  bc:	8d 85       	ldd	r24, Y+13	; 0x0d
  be:	9e 85       	ldd	r25, Y+14	; 0x0e
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	4a e7       	ldi	r20, 0x7A	; 122
  c6:	55 e4       	ldi	r21, 0x45	; 69
  c8:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send8Bits>
  cc:	dc 01       	movw	r26, r24
  ce:	cb 01       	movw	r24, r22
  d0:	8f 83       	std	Y+7, r24	; 0x07
  d2:	98 87       	std	Y+8, r25	; 0x08
  d4:	a9 87       	std	Y+9, r26	; 0x09
  d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
  d8:	6f 81       	ldd	r22, Y+7	; 0x07
  da:	78 85       	ldd	r23, Y+8	; 0x08
  dc:	89 85       	ldd	r24, Y+9	; 0x09
  de:	9a 85       	ldd	r25, Y+10	; 0x0a
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	40 e8       	ldi	r20, 0x80	; 128
  e6:	5f e3       	ldi	r21, 0x3F	; 63
  e8:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send8Bits>
  ec:	88 23       	and	r24, r24
  ee:	04 f4       	brge	.+0      	; 0xf0 <HAL_LCD_Send8Bits+0xf0>
		__ticks = 1;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	9e 83       	std	Y+6, r25	; 0x06
  f6:	8d 83       	std	Y+5, r24	; 0x05
  f8:	00 c0       	rjmp	.+0      	; 0xfa <HAL_LCD_Send8Bits+0xfa>
	else if (__tmp > 65535)
  fa:	6f 81       	ldd	r22, Y+7	; 0x07
  fc:	78 85       	ldd	r23, Y+8	; 0x08
  fe:	89 85       	ldd	r24, Y+9	; 0x09
 100:	9a 85       	ldd	r25, Y+10	; 0x0a
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	3f ef       	ldi	r19, 0xFF	; 255
 106:	4f e7       	ldi	r20, 0x7F	; 127
 108:	57 e4       	ldi	r21, 0x47	; 71
 10a:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send8Bits>
 10e:	18 16       	cp	r1, r24
 110:	04 f4       	brge	.+0      	; 0x112 <HAL_LCD_Send8Bits+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 112:	6b 85       	ldd	r22, Y+11	; 0x0b
 114:	7c 85       	ldd	r23, Y+12	; 0x0c
 116:	8d 85       	ldd	r24, Y+13	; 0x0d
 118:	9e 85       	ldd	r25, Y+14	; 0x0e
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	40 e2       	ldi	r20, 0x20	; 32
 120:	51 e4       	ldi	r21, 0x41	; 65
 122:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send8Bits>
 126:	dc 01       	movw	r26, r24
 128:	cb 01       	movw	r24, r22
 12a:	bc 01       	movw	r22, r24
 12c:	cd 01       	movw	r24, r26
 12e:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send8Bits>
 132:	dc 01       	movw	r26, r24
 134:	cb 01       	movw	r24, r22
 136:	9e 83       	std	Y+6, r25	; 0x06
 138:	8d 83       	std	Y+5, r24	; 0x05
 13a:	00 c0       	rjmp	.+0      	; 0x13c <HAL_LCD_Send8Bits+0x13c>
 13c:	80 e9       	ldi	r24, 0x90	; 144
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	9c 83       	std	Y+4, r25	; 0x04
 142:	8b 83       	std	Y+3, r24	; 0x03
 144:	8b 81       	ldd	r24, Y+3	; 0x03
 146:	9c 81       	ldd	r25, Y+4	; 0x04
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	01 f4       	brne	.+0      	; 0x14c <HAL_LCD_Send8Bits+0x14c>
 14c:	9c 83       	std	Y+4, r25	; 0x04
 14e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 150:	8d 81       	ldd	r24, Y+5	; 0x05
 152:	9e 81       	ldd	r25, Y+6	; 0x06
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	9e 83       	std	Y+6, r25	; 0x06
 158:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15a:	8d 81       	ldd	r24, Y+5	; 0x05
 15c:	9e 81       	ldd	r25, Y+6	; 0x06
 15e:	00 97       	sbiw	r24, 0x00	; 0
 160:	01 f4       	brne	.+0      	; 0x162 <HAL_LCD_Send8Bits+0x162>
 162:	00 c0       	rjmp	.+0      	; 0x164 <HAL_LCD_Send8Bits+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 164:	6f 81       	ldd	r22, Y+7	; 0x07
 166:	78 85       	ldd	r23, Y+8	; 0x08
 168:	89 85       	ldd	r24, Y+9	; 0x09
 16a:	9a 85       	ldd	r25, Y+10	; 0x0a
 16c:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send8Bits>
 170:	dc 01       	movw	r26, r24
 172:	cb 01       	movw	r24, r22
 174:	9e 83       	std	Y+6, r25	; 0x06
 176:	8d 83       	std	Y+5, r24	; 0x05
 178:	8d 81       	ldd	r24, Y+5	; 0x05
 17a:	9e 81       	ldd	r25, Y+6	; 0x06
 17c:	9a 83       	std	Y+2, r25	; 0x02
 17e:	89 83       	std	Y+1, r24	; 0x01
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	01 f4       	brne	.+0      	; 0x188 <HAL_LCD_Send8Bits+0x188>
 188:	9a 83       	std	Y+2, r25	; 0x02
 18a:	89 83       	std	Y+1, r24	; 0x01
    /**< Set the Pulse time to be 5msec */
    _delay_ms(5);
    /**< Set the enable pin to low */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
 18c:	e8 89       	ldd	r30, Y+16	; 0x10
 18e:	f9 89       	ldd	r31, Y+17	; 0x11
 190:	83 85       	ldd	r24, Z+11	; 0x0b
 192:	83 70       	andi	r24, 0x03	; 3
 194:	28 2f       	mov	r18, r24
 196:	e8 89       	ldd	r30, Y+16	; 0x10
 198:	f9 89       	ldd	r31, Y+17	; 0x11
 19a:	83 85       	ldd	r24, Z+11	; 0x0b
 19c:	86 95       	lsr	r24
 19e:	86 95       	lsr	r24
 1a0:	8f 70       	andi	r24, 0x0F	; 15
 1a2:	98 2f       	mov	r25, r24
 1a4:	82 2f       	mov	r24, r18
 1a6:	69 2f       	mov	r22, r25
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	0e 94 00 00 	call	0	; 0x0 <HAL_LCD_Send8Bits>
}
 1ae:	62 96       	adiw	r28, 0x12	; 18
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
 1ba:	cf 91       	pop	r28
 1bc:	df 91       	pop	r29
 1be:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000038  2**0
                  ALLOC
  3 .stab         00000438  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000008a6  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.main    000000a2  00000000  00000000  00000d16  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.main:

00000000 <main>:
/**< MCAL */
#include "DIO_interface.h"
/**< HAL */
#include "CLCD_interface.h"
/**< Business Logic */
int main() {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2d 97       	sbiw	r28, 0x0d	; 13
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61


	/**< LCD Init */
	LCD_Config_t lcd1;

	lcd1.mode = LCD_4BitMode;
  14:	84 e0       	ldi	r24, 0x04	; 4
  16:	8a 83       	std	Y+2, r24	; 0x02
	lcd1.enablePin.LCD_PortId = DIO_PORTA;
  18:	8d 85       	ldd	r24, Y+13	; 0x0d
  1a:	8c 7f       	andi	r24, 0xFC	; 252
  1c:	8d 87       	std	Y+13, r24	; 0x0d
	lcd1.enablePin.LCD_PinId = DIO_PIN4;
  1e:	8d 85       	ldd	r24, Y+13	; 0x0d
  20:	83 7c       	andi	r24, 0xC3	; 195
  22:	80 61       	ori	r24, 0x10	; 16
  24:	8d 87       	std	Y+13, r24	; 0x0d

	lcd1.rsPin.LCD_PortId = DIO_PORTA;
  26:	8b 85       	ldd	r24, Y+11	; 0x0b
  28:	8c 7f       	andi	r24, 0xFC	; 252
  2a:	8b 87       	std	Y+11, r24	; 0x0b
	lcd1.rsPin.LCD_PinId = DIO_PIN5;
  2c:	8b 85       	ldd	r24, Y+11	; 0x0b
  2e:	83 7c       	andi	r24, 0xC3	; 195
  30:	84 61       	ori	r24, 0x14	; 20
  32:	8b 87       	std	Y+11, r24	; 0x0b

	for(uint8_t i = 0; i < 4; i++) {
  34:	19 82       	std	Y+1, r1	; 0x01
  36:	00 c0       	rjmp	.+0      	; 0x38 <main+0x38>
		lcd1.dataPins[i].LCD_PortId = DIO_PORTA;
  38:	89 81       	ldd	r24, Y+1	; 0x01
  3a:	28 2f       	mov	r18, r24
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	ce 01       	movw	r24, r28
  40:	03 96       	adiw	r24, 0x03	; 3
  42:	fc 01       	movw	r30, r24
  44:	e2 0f       	add	r30, r18
  46:	f3 1f       	adc	r31, r19
  48:	80 81       	ld	r24, Z
  4a:	8c 7f       	andi	r24, 0xFC	; 252
  4c:	80 83       	st	Z, r24
		lcd1.dataPins[i].LCD_PinId = DIO_PIN3 - i;
  4e:	89 81       	ldd	r24, Y+1	; 0x01
  50:	28 2f       	mov	r18, r24
  52:	30 e0       	ldi	r19, 0x00	; 0
  54:	93 e0       	ldi	r25, 0x03	; 3
  56:	89 81       	ldd	r24, Y+1	; 0x01
  58:	49 2f       	mov	r20, r25
  5a:	48 1b       	sub	r20, r24
  5c:	84 2f       	mov	r24, r20
  5e:	48 2f       	mov	r20, r24
  60:	4f 70       	andi	r20, 0x0F	; 15
  62:	ce 01       	movw	r24, r28
  64:	03 96       	adiw	r24, 0x03	; 3
  66:	fc 01       	movw	r30, r24
  68:	e2 0f       	add	r30, r18
  6a:	f3 1f       	adc	r31, r19
  6c:	84 2f       	mov	r24, r20
  6e:	8f 70       	andi	r24, 0x0F	; 15
  70:	98 2f       	mov	r25, r24
  72:	99 0f       	add	r25, r25
  74:	99 0f       	add	r25, r25
  76:	80 81       	ld	r24, Z
  78:	83 7c       	andi	r24, 0xC3	; 195
  7a:	89 2b       	or	r24, r25
  7c:	80 83       	st	Z, r24
	lcd1.enablePin.LCD_PinId = DIO_PIN4;

	lcd1.rsPin.LCD_PortId = DIO_PORTA;
	lcd1.rsPin.LCD_PinId = DIO_PIN5;

	for(uint8_t i = 0; i < 4; i++) {
  7e:	89 81       	ldd	r24, Y+1	; 0x01
  80:	8f 5f       	subi	r24, 0xFF	; 255
  82:	89 83       	std	Y+1, r24	; 0x01
  84:	89 81       	ldd	r24, Y+1	; 0x01
  86:	84 30       	cpi	r24, 0x04	; 4
  88:	00 f0       	brcs	.+0      	; 0x8a <main+0x8a>
		lcd1.dataPins[i].LCD_PortId = DIO_PORTA;
		lcd1.dataPins[i].LCD_PinId = DIO_PIN3 - i;
	}

	LCD_Init(&lcd1);
  8a:	ce 01       	movw	r24, r28
  8c:	02 96       	adiw	r24, 0x02	; 2
  8e:	0e 94 00 00 	call	0	; 0x0 <main>

	LCD_SendString(&lcd1, "Sue");
  92:	ce 01       	movw	r24, r28
  94:	02 96       	adiw	r24, 0x02	; 2
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	b9 01       	movw	r22, r18
  9c:	0e 94 00 00 	call	0	; 0x0 <main>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <__SREG__+0x63>
