
Basic_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000300e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  0000300e  00003082  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000023ac  00000000  00000000  000031d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e5e  00000000  00000000  0000557c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  000063da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000214  00000000  00000000  0000659a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  000067ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ce  00000000  00000000  00008dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  0000a28e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000b59c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000b77c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000ba83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c49d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 09 15 	call	0x2a12	; 0x2a12 <main>
      7a:	0c 94 05 18 	jmp	0x300a	; 0x300a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e8       	ldi	r26, 0x8B	; 139
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e8       	ldi	r24, 0x8B	; 139
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6b e8       	ldi	r22, 0x8B	; 139
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 f3 17 	jmp	0x2fe6	; 0x2fe6 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__epilogue_restores__+0x20>

000009fe <__floatunsisf>:
     9fe:	a8 e0       	ldi	r26, 0x08	; 8
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__prologue_saves__+0x10>
     a0a:	7b 01       	movw	r14, r22
     a0c:	8c 01       	movw	r16, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	81 05       	cpc	r24, r1
     a14:	91 05       	cpc	r25, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <__floatunsisf+0x20>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	60 c0       	rjmp	.+192    	; 0xade <__floatunsisf+0xe0>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	c8 2e       	mov	r12, r24
     a26:	d1 2c       	mov	r13, r1
     a28:	dc 82       	std	Y+4, r13	; 0x04
     a2a:	cb 82       	std	Y+3, r12	; 0x03
     a2c:	ed 82       	std	Y+5, r14	; 0x05
     a2e:	fe 82       	std	Y+6, r15	; 0x06
     a30:	0f 83       	std	Y+7, r16	; 0x07
     a32:	18 87       	std	Y+8, r17	; 0x08
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f7 ff       	sbrs	r31, 7
     a42:	3b c0       	rjmp	.+118    	; 0xaba <__floatunsisf+0xbc>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	2e 1b       	sub	r18, r30
     a4a:	3f 0b       	sbc	r19, r31
     a4c:	57 01       	movw	r10, r14
     a4e:	68 01       	movw	r12, r16
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__floatunsisf+0x5e>
     a54:	d6 94       	lsr	r13
     a56:	c7 94       	ror	r12
     a58:	b7 94       	ror	r11
     a5a:	a7 94       	ror	r10
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__floatunsisf+0x56>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	2a 95       	dec	r18
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0x74>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	a1 09       	sbc	r26, r1
     a82:	b1 09       	sbc	r27, r1
     a84:	8e 21       	and	r24, r14
     a86:	9f 21       	and	r25, r15
     a88:	a0 23       	and	r26, r16
     a8a:	b1 23       	and	r27, r17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	21 f0       	breq	.+8      	; 0xa9c <__floatunsisf+0x9e>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	4a 29       	or	r20, r10
     a9e:	5b 29       	or	r21, r11
     aa0:	6c 29       	or	r22, r12
     aa2:	7d 29       	or	r23, r13
     aa4:	4d 83       	std	Y+5, r20	; 0x05
     aa6:	5e 83       	std	Y+6, r21	; 0x06
     aa8:	6f 83       	std	Y+7, r22	; 0x07
     aaa:	78 87       	std	Y+8, r23	; 0x08
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8e 1b       	sub	r24, r30
     ab2:	9f 0b       	sbc	r25, r31
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__floatunsisf+0xe0>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	81 f0       	breq	.+32     	; 0xade <__floatunsisf+0xe0>
     abe:	0e 2e       	mov	r0, r30
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatunsisf+0xcc>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatunsisf+0xc4>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	ce 1a       	sub	r12, r30
     ad8:	df 0a       	sbc	r13, r31
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__epilogue_restores__+0x10>

00000af0 <__clzsi2>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	7b 01       	movw	r14, r22
     afa:	8c 01       	movw	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e8 16       	cp	r14, r24
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	f8 06       	cpc	r15, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 07       	cpc	r16, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	18 07       	cpc	r17, r24
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__clzsi2+0x40>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	e8 16       	cp	r14, r24
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__clzsi2+0x36>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__clzsi2+0x36>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__clzsi2+0x64>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__clzsi2+0x64>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 07       	cpc	r16, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	18 07       	cpc	r17, r24
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__clzsi2+0x5c>
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__clzsi2+0x64>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	20 e2       	ldi	r18, 0x20	; 32
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x7e>
     b66:	16 95       	lsr	r17
     b68:	07 95       	ror	r16
     b6a:	f7 94       	ror	r15
     b6c:	e7 94       	ror	r14
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x76>
     b72:	f7 01       	movw	r30, r14
     b74:	ed 56       	subi	r30, 0x6D	; 109
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	28 1b       	sub	r18, r24
     b7c:	31 09       	sbc	r19, r1
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	c9 01       	movw	r24, r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <__pack_f>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	fc 01       	movw	r30, r24
     b9a:	e4 80       	ldd	r14, Z+4	; 0x04
     b9c:	f5 80       	ldd	r15, Z+5	; 0x05
     b9e:	06 81       	ldd	r16, Z+6	; 0x06
     ba0:	17 81       	ldd	r17, Z+7	; 0x07
     ba2:	d1 80       	ldd	r13, Z+1	; 0x01
     ba4:	80 81       	ld	r24, Z
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__pack_f+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e1       	ldi	r26, 0x10	; 16
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 2a       	or	r14, r24
     bb4:	f9 2a       	or	r15, r25
     bb6:	0a 2b       	or	r16, r26
     bb8:	1b 2b       	or	r17, r27
     bba:	a5 c0       	rjmp	.+330    	; 0xd06 <__pack_f+0x178>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__pack_f+0x34>
     bc0:	9f c0       	rjmp	.+318    	; 0xd00 <__pack_f+0x172>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <__pack_f+0x40>
     bc6:	ee 24       	eor	r14, r14
     bc8:	ff 24       	eor	r15, r15
     bca:	87 01       	movw	r16, r14
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__pack_f+0x4a>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	01 05       	cpc	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	19 f4       	brne	.+6      	; 0xbde <__pack_f+0x50>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <__pack_f+0x17c>
     bde:	62 81       	ldd	r22, Z+2	; 0x02
     be0:	73 81       	ldd	r23, Z+3	; 0x03
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	62 38       	cpi	r22, 0x82	; 130
     be6:	79 07       	cpc	r23, r25
     be8:	0c f0       	brlt	.+2      	; 0xbec <__pack_f+0x5e>
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <__pack_f+0x114>
     bec:	22 e8       	ldi	r18, 0x82	; 130
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	26 1b       	sub	r18, r22
     bf2:	37 0b       	sbc	r19, r23
     bf4:	2a 31       	cpi	r18, 0x1A	; 26
     bf6:	31 05       	cpc	r19, r1
     bf8:	2c f0       	brlt	.+10     	; 0xc04 <__pack_f+0x76>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <__pack_f+0xca>
     c04:	b8 01       	movw	r22, r16
     c06:	a7 01       	movw	r20, r14
     c08:	02 2e       	mov	r0, r18
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0x86>
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__pack_f+0x7e>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x9c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x94>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	8e 21       	and	r24, r14
     c36:	9f 21       	and	r25, r15
     c38:	a0 23       	and	r26, r16
     c3a:	b1 23       	and	r27, r17
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <__pack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	9a 01       	movw	r18, r20
     c4e:	ab 01       	movw	r20, r22
     c50:	28 2b       	or	r18, r24
     c52:	39 2b       	or	r19, r25
     c54:	4a 2b       	or	r20, r26
     c56:	5b 2b       	or	r21, r27
     c58:	da 01       	movw	r26, r20
     c5a:	c9 01       	movw	r24, r18
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	a0 70       	andi	r26, 0x00	; 0
     c62:	b0 70       	andi	r27, 0x00	; 0
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <__pack_f+0xee>
     c6e:	27 ff       	sbrs	r18, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__pack_f+0xf6>
     c72:	20 5c       	subi	r18, 0xC0	; 192
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	4f 4f       	sbci	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0xf6>
     c7c:	21 5c       	subi	r18, 0xC1	; 193
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	4f 4f       	sbci	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	20 30       	cpi	r18, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	3a 07       	cpc	r19, r26
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	4a 07       	cpc	r20, r26
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	5a 07       	cpc	r21, r26
     c96:	10 f0       	brcs	.+4      	; 0xc9c <__pack_f+0x10e>
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
     ca0:	27 c0       	rjmp	.+78     	; 0xcf0 <__pack_f+0x162>
     ca2:	60 38       	cpi	r22, 0x80	; 128
     ca4:	71 05       	cpc	r23, r1
     ca6:	64 f5       	brge	.+88     	; 0xd00 <__pack_f+0x172>
     ca8:	fb 01       	movw	r30, r22
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	c7 01       	movw	r24, r14
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	a0 70       	andi	r26, 0x00	; 0
     cb8:	b0 70       	andi	r27, 0x00	; 0
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	91 05       	cpc	r25, r1
     cbe:	a1 05       	cpc	r26, r1
     cc0:	b1 05       	cpc	r27, r1
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__pack_f+0x144>
     cc4:	e7 fe       	sbrs	r14, 7
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__pack_f+0x154>
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__pack_f+0x14c>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 0e       	add	r14, r24
     cdc:	f9 1e       	adc	r15, r25
     cde:	0a 1f       	adc	r16, r26
     ce0:	1b 1f       	adc	r17, r27
     ce2:	17 ff       	sbrs	r17, 7
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__pack_f+0x162>
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	16 95       	lsr	r17
     cf4:	07 95       	ror	r16
     cf6:	f7 94       	ror	r15
     cf8:	e7 94       	ror	r14
     cfa:	8a 95       	dec	r24
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <__pack_f+0x164>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__pack_f+0x17c>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	ef ef       	ldi	r30, 0xFF	; 255
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	6e 2f       	mov	r22, r30
     d0c:	67 95       	ror	r22
     d0e:	66 27       	eor	r22, r22
     d10:	67 95       	ror	r22
     d12:	90 2f       	mov	r25, r16
     d14:	9f 77       	andi	r25, 0x7F	; 127
     d16:	d7 94       	ror	r13
     d18:	dd 24       	eor	r13, r13
     d1a:	d7 94       	ror	r13
     d1c:	8e 2f       	mov	r24, r30
     d1e:	86 95       	lsr	r24
     d20:	49 2f       	mov	r20, r25
     d22:	46 2b       	or	r20, r22
     d24:	58 2f       	mov	r21, r24
     d26:	5d 29       	or	r21, r13
     d28:	b7 01       	movw	r22, r14
     d2a:	ca 01       	movw	r24, r20
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	08 95       	ret

00000d38 <__unpack_f>:
     d38:	fc 01       	movw	r30, r24
     d3a:	db 01       	movw	r26, r22
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	22 81       	ldd	r18, Z+2	; 0x02
     d42:	62 2f       	mov	r22, r18
     d44:	6f 77       	andi	r22, 0x7F	; 127
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 1f       	adc	r18, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	22 1f       	adc	r18, r18
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	88 0f       	add	r24, r24
     d54:	82 2b       	or	r24, r18
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	a9 f5       	brne	.+106    	; 0xdd6 <__unpack_f+0x9e>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__unpack_f+0x42>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <__unpack_f+0xb0>
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	67 e0       	ldi	r22, 0x07	; 7
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	d1 f7       	brne	.-12     	; 0xd8c <__unpack_f+0x54>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8c 93       	st	X, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__unpack_f+0x80>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	38 07       	cpc	r19, r24
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	48 07       	cpc	r20, r24
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	58 07       	cpc	r21, r24
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__unpack_f+0x66>
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	2d 93       	st	X+, r18
     dcc:	3d 93       	st	X+, r19
     dce:	4d 93       	st	X+, r20
     dd0:	5c 93       	st	X, r21
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	08 95       	ret
     dd6:	2f 3f       	cpi	r18, 0xFF	; 255
     dd8:	31 05       	cpc	r19, r1
     dda:	79 f4       	brne	.+30     	; 0xdfa <__unpack_f+0xc2>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	19 f4       	brne	.+6      	; 0xdec <__unpack_f+0xb4>
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24
     dea:	08 95       	ret
     dec:	64 ff       	sbrs	r22, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <__unpack_f+0xbe>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__unpack_f+0xe2>
     df6:	1c 92       	st	X, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <__unpack_f+0xe2>
     dfa:	2f 57       	subi	r18, 0x7F	; 127
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8c 93       	st	X, r24
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	8a 95       	dec	r24
     e16:	d1 f7       	brne	.-12     	; 0xe0c <__unpack_f+0xd4>
     e18:	70 64       	ori	r23, 0x40	; 64
     e1a:	14 96       	adiw	r26, 0x04	; 4
     e1c:	4d 93       	st	X+, r20
     e1e:	5d 93       	st	X+, r21
     e20:	6d 93       	st	X+, r22
     e22:	7c 93       	st	X, r23
     e24:	17 97       	sbiw	r26, 0x07	; 7
     e26:	08 95       	ret

00000e28 <__fpcmp_parts_f>:
     e28:	1f 93       	push	r17
     e2a:	dc 01       	movw	r26, r24
     e2c:	fb 01       	movw	r30, r22
     e2e:	9c 91       	ld	r25, X
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0xe>
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e36:	80 81       	ld	r24, Z
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0x16>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	51 f4       	brne	.+20     	; 0xe56 <__fpcmp_parts_f+0x2e>
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	1c 91       	ld	r17, X
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <__fpcmp_parts_f+0x88>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	68 2f       	mov	r22, r24
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	61 1b       	sub	r22, r17
     e52:	71 09       	sbc	r23, r1
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <__fpcmp_parts_f+0xac>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fpcmp_parts_f+0x3a>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__fpcmp_parts_f+0x42>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	b9 f1       	breq	.+110    	; 0xed0 <__fpcmp_parts_f+0xa8>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <__fpcmp_parts_f+0xa2>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__fpcmp_parts_f+0x9c>
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	1c 91       	ld	r17, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	94 f0       	brlt	.+36     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	bc f0       	brlt	.+46     	; 0xec0 <__fpcmp_parts_f+0x98>
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	8d 91       	ld	r24, X+
     e96:	9d 91       	ld	r25, X+
     e98:	0d 90       	ld	r0, X+
     e9a:	bc 91       	ld	r27, X
     e9c:	a0 2d       	mov	r26, r0
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	35 81       	ldd	r19, Z+5	; 0x05
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	4a 07       	cpc	r20, r26
     eac:	5b 07       	cpc	r21, r27
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <__fpcmp_parts_f+0x8e>
     eb0:	11 23       	and	r17, r17
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__fpcmp_parts_f+0x9c>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <__fpcmp_parts_f+0xa2>
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	a4 07       	cpc	r26, r20
     ebc:	b5 07       	cpc	r27, r21
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fpcmp_parts_f+0xa8>
     ec0:	11 23       	and	r17, r17
     ec2:	19 f0       	breq	.+6      	; 0xeca <__fpcmp_parts_f+0xa2>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__fpcmp_parts_f+0xac>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fpcmp_parts_f+0xac>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <LCD_Init>:
#include "CLCD_private.h"
#include "CLCD_config.h"

/*****************************< Function Implementations *****************************/
void LCD_Init(const LCD_Config_t *config) 
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	e8 97       	sbiw	r28, 0x38	; 56
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	98 af       	std	Y+56, r25	; 0x38
     ef0:	8f ab       	std	Y+55, r24	; 0x37
    if(config == NULL)
     ef2:	8f a9       	ldd	r24, Y+55	; 0x37
     ef4:	98 ad       	ldd	r25, Y+56	; 0x38
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	09 f4       	brne	.+2      	; 0xefc <LCD_Init+0x22>
     efa:	5b c2       	rjmp	.+1206   	; 0x13b2 <LCD_Init+0x4d8>
    {
        return;
    }

    /**< Init the Mode of the en, rs, rw */
    DIO_SetPinDirection(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_OUTPUT);
     efc:	ef a9       	ldd	r30, Y+55	; 0x37
     efe:	f8 ad       	ldd	r31, Y+56	; 0x38
     f00:	83 85       	ldd	r24, Z+11	; 0x0b
     f02:	83 70       	andi	r24, 0x03	; 3
     f04:	28 2f       	mov	r18, r24
     f06:	ef a9       	ldd	r30, Y+55	; 0x37
     f08:	f8 ad       	ldd	r31, Y+56	; 0x38
     f0a:	83 85       	ldd	r24, Z+11	; 0x0b
     f0c:	86 95       	lsr	r24
     f0e:	86 95       	lsr	r24
     f10:	8f 70       	andi	r24, 0x0F	; 15
     f12:	98 2f       	mov	r25, r24
     f14:	82 2f       	mov	r24, r18
     f16:	69 2f       	mov	r22, r25
     f18:	41 e0       	ldi	r20, 0x01	; 1
     f1a:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_SetPinDirection>
    DIO_SetPinDirection(config->rsPin.LCD_PortId, config->rsPin.LCD_PinId, DIO_OUTPUT);
     f1e:	ef a9       	ldd	r30, Y+55	; 0x37
     f20:	f8 ad       	ldd	r31, Y+56	; 0x38
     f22:	81 85       	ldd	r24, Z+9	; 0x09
     f24:	83 70       	andi	r24, 0x03	; 3
     f26:	28 2f       	mov	r18, r24
     f28:	ef a9       	ldd	r30, Y+55	; 0x37
     f2a:	f8 ad       	ldd	r31, Y+56	; 0x38
     f2c:	81 85       	ldd	r24, Z+9	; 0x09
     f2e:	86 95       	lsr	r24
     f30:	86 95       	lsr	r24
     f32:	8f 70       	andi	r24, 0x0F	; 15
     f34:	98 2f       	mov	r25, r24
     f36:	82 2f       	mov	r24, r18
     f38:	69 2f       	mov	r22, r25
     f3a:	41 e0       	ldi	r20, 0x01	; 1
     f3c:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_SetPinDirection>
    DIO_SetPinDirection(config->rwPin.LCD_PortId, config->rwPin.LCD_PinId, DIO_OUTPUT);
     f40:	ef a9       	ldd	r30, Y+55	; 0x37
     f42:	f8 ad       	ldd	r31, Y+56	; 0x38
     f44:	82 85       	ldd	r24, Z+10	; 0x0a
     f46:	83 70       	andi	r24, 0x03	; 3
     f48:	28 2f       	mov	r18, r24
     f4a:	ef a9       	ldd	r30, Y+55	; 0x37
     f4c:	f8 ad       	ldd	r31, Y+56	; 0x38
     f4e:	82 85       	ldd	r24, Z+10	; 0x0a
     f50:	86 95       	lsr	r24
     f52:	86 95       	lsr	r24
     f54:	8f 70       	andi	r24, 0x0F	; 15
     f56:	98 2f       	mov	r25, r24
     f58:	82 2f       	mov	r24, r18
     f5a:	69 2f       	mov	r22, r25
     f5c:	41 e0       	ldi	r20, 0x01	; 1
     f5e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_SetPinDirection>

    if(config->mode == LCD_4BitMode)
     f62:	ef a9       	ldd	r30, Y+55	; 0x37
     f64:	f8 ad       	ldd	r31, Y+56	; 0x38
     f66:	80 81       	ld	r24, Z
     f68:	84 30       	cpi	r24, 0x04	; 4
     f6a:	41 f5       	brne	.+80     	; 0xfbc <LCD_Init+0xe2>
    {
        /**< Init the Mode of Data Pins */
        for(uint8_t i = 0; i < 4; i++)
     f6c:	1e aa       	std	Y+54, r1	; 0x36
     f6e:	22 c0       	rjmp	.+68     	; 0xfb4 <LCD_Init+0xda>
        {
            DIO_SetPinDirection(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, DIO_OUTPUT);
     f70:	8e a9       	ldd	r24, Y+54	; 0x36
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	8f a9       	ldd	r24, Y+55	; 0x37
     f78:	98 ad       	ldd	r25, Y+56	; 0x38
     f7a:	82 0f       	add	r24, r18
     f7c:	93 1f       	adc	r25, r19
     f7e:	fc 01       	movw	r30, r24
     f80:	31 96       	adiw	r30, 0x01	; 1
     f82:	80 81       	ld	r24, Z
     f84:	83 70       	andi	r24, 0x03	; 3
     f86:	48 2f       	mov	r20, r24
     f88:	8e a9       	ldd	r24, Y+54	; 0x36
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	8f a9       	ldd	r24, Y+55	; 0x37
     f90:	98 ad       	ldd	r25, Y+56	; 0x38
     f92:	82 0f       	add	r24, r18
     f94:	93 1f       	adc	r25, r19
     f96:	fc 01       	movw	r30, r24
     f98:	31 96       	adiw	r30, 0x01	; 1
     f9a:	80 81       	ld	r24, Z
     f9c:	86 95       	lsr	r24
     f9e:	86 95       	lsr	r24
     fa0:	8f 70       	andi	r24, 0x0F	; 15
     fa2:	98 2f       	mov	r25, r24
     fa4:	84 2f       	mov	r24, r20
     fa6:	69 2f       	mov	r22, r25
     fa8:	41 e0       	ldi	r20, 0x01	; 1
     faa:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_SetPinDirection>
    DIO_SetPinDirection(config->rwPin.LCD_PortId, config->rwPin.LCD_PinId, DIO_OUTPUT);

    if(config->mode == LCD_4BitMode)
    {
        /**< Init the Mode of Data Pins */
        for(uint8_t i = 0; i < 4; i++)
     fae:	8e a9       	ldd	r24, Y+54	; 0x36
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	8e ab       	std	Y+54, r24	; 0x36
     fb4:	8e a9       	ldd	r24, Y+54	; 0x36
     fb6:	84 30       	cpi	r24, 0x04	; 4
     fb8:	d8 f2       	brcs	.-74     	; 0xf70 <LCD_Init+0x96>
     fba:	27 c0       	rjmp	.+78     	; 0x100a <LCD_Init+0x130>
            DIO_SetPinDirection(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, DIO_OUTPUT);
        }
    }
    else if(LCD_8BitMode)
    {
        for(uint8_t i = 0; i < 8; i++)
     fbc:	1d aa       	std	Y+53, r1	; 0x35
     fbe:	22 c0       	rjmp	.+68     	; 0x1004 <LCD_Init+0x12a>
        {
            DIO_SetPinDirection(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, DIO_OUTPUT);
     fc0:	8d a9       	ldd	r24, Y+53	; 0x35
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	8f a9       	ldd	r24, Y+55	; 0x37
     fc8:	98 ad       	ldd	r25, Y+56	; 0x38
     fca:	82 0f       	add	r24, r18
     fcc:	93 1f       	adc	r25, r19
     fce:	fc 01       	movw	r30, r24
     fd0:	31 96       	adiw	r30, 0x01	; 1
     fd2:	80 81       	ld	r24, Z
     fd4:	83 70       	andi	r24, 0x03	; 3
     fd6:	48 2f       	mov	r20, r24
     fd8:	8d a9       	ldd	r24, Y+53	; 0x35
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	8f a9       	ldd	r24, Y+55	; 0x37
     fe0:	98 ad       	ldd	r25, Y+56	; 0x38
     fe2:	82 0f       	add	r24, r18
     fe4:	93 1f       	adc	r25, r19
     fe6:	fc 01       	movw	r30, r24
     fe8:	31 96       	adiw	r30, 0x01	; 1
     fea:	80 81       	ld	r24, Z
     fec:	86 95       	lsr	r24
     fee:	86 95       	lsr	r24
     ff0:	8f 70       	andi	r24, 0x0F	; 15
     ff2:	98 2f       	mov	r25, r24
     ff4:	84 2f       	mov	r24, r20
     ff6:	69 2f       	mov	r22, r25
     ff8:	41 e0       	ldi	r20, 0x01	; 1
     ffa:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_SetPinDirection>
            DIO_SetPinDirection(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, DIO_OUTPUT);
        }
    }
    else if(LCD_8BitMode)
    {
        for(uint8_t i = 0; i < 8; i++)
     ffe:	8d a9       	ldd	r24, Y+53	; 0x35
    1000:	8f 5f       	subi	r24, 0xFF	; 255
    1002:	8d ab       	std	Y+53, r24	; 0x35
    1004:	8d a9       	ldd	r24, Y+53	; 0x35
    1006:	88 30       	cpi	r24, 0x08	; 8
    1008:	d8 f2       	brcs	.-74     	; 0xfc0 <LCD_Init+0xe6>
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	a0 ea       	ldi	r26, 0xA0	; 160
    1010:	b1 e4       	ldi	r27, 0x41	; 65
    1012:	89 ab       	std	Y+49, r24	; 0x31
    1014:	9a ab       	std	Y+50, r25	; 0x32
    1016:	ab ab       	std	Y+51, r26	; 0x33
    1018:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    101a:	69 a9       	ldd	r22, Y+49	; 0x31
    101c:	7a a9       	ldd	r23, Y+50	; 0x32
    101e:	8b a9       	ldd	r24, Y+51	; 0x33
    1020:	9c a9       	ldd	r25, Y+52	; 0x34
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	4a ef       	ldi	r20, 0xFA	; 250
    1028:	54 e4       	ldi	r21, 0x44	; 68
    102a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	8d a7       	std	Y+45, r24	; 0x2d
    1034:	9e a7       	std	Y+46, r25	; 0x2e
    1036:	af a7       	std	Y+47, r26	; 0x2f
    1038:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    103a:	6d a5       	ldd	r22, Y+45	; 0x2d
    103c:	7e a5       	ldd	r23, Y+46	; 0x2e
    103e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1040:	98 a9       	ldd	r25, Y+48	; 0x30
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e8       	ldi	r20, 0x80	; 128
    1048:	5f e3       	ldi	r21, 0x3F	; 63
    104a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    104e:	88 23       	and	r24, r24
    1050:	2c f4       	brge	.+10     	; 0x105c <LCD_Init+0x182>
		__ticks = 1;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	9c a7       	std	Y+44, r25	; 0x2c
    1058:	8b a7       	std	Y+43, r24	; 0x2b
    105a:	3f c0       	rjmp	.+126    	; 0x10da <LCD_Init+0x200>
	else if (__tmp > 65535)
    105c:	6d a5       	ldd	r22, Y+45	; 0x2d
    105e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1060:	8f a5       	ldd	r24, Y+47	; 0x2f
    1062:	98 a9       	ldd	r25, Y+48	; 0x30
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	3f ef       	ldi	r19, 0xFF	; 255
    1068:	4f e7       	ldi	r20, 0x7F	; 127
    106a:	57 e4       	ldi	r21, 0x47	; 71
    106c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1070:	18 16       	cp	r1, r24
    1072:	4c f5       	brge	.+82     	; 0x10c6 <LCD_Init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1074:	69 a9       	ldd	r22, Y+49	; 0x31
    1076:	7a a9       	ldd	r23, Y+50	; 0x32
    1078:	8b a9       	ldd	r24, Y+51	; 0x33
    107a:	9c a9       	ldd	r25, Y+52	; 0x34
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e2       	ldi	r20, 0x20	; 32
    1082:	51 e4       	ldi	r21, 0x41	; 65
    1084:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	bc 01       	movw	r22, r24
    108e:	cd 01       	movw	r24, r26
    1090:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	9c a7       	std	Y+44, r25	; 0x2c
    109a:	8b a7       	std	Y+43, r24	; 0x2b
    109c:	0f c0       	rjmp	.+30     	; 0x10bc <LCD_Init+0x1e2>
    109e:	88 ec       	ldi	r24, 0xC8	; 200
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9a a7       	std	Y+42, r25	; 0x2a
    10a4:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10a6:	89 a5       	ldd	r24, Y+41	; 0x29
    10a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <LCD_Init+0x1d0>
    10ae:	9a a7       	std	Y+42, r25	; 0x2a
    10b0:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    10b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	9c a7       	std	Y+44, r25	; 0x2c
    10ba:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    10be:	9c a5       	ldd	r25, Y+44	; 0x2c
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	69 f7       	brne	.-38     	; 0x109e <LCD_Init+0x1c4>
    10c4:	14 c0       	rjmp	.+40     	; 0x10ee <LCD_Init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c6:	6d a5       	ldd	r22, Y+45	; 0x2d
    10c8:	7e a5       	ldd	r23, Y+46	; 0x2e
    10ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    10cc:	98 a9       	ldd	r25, Y+48	; 0x30
    10ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	9c a7       	std	Y+44, r25	; 0x2c
    10d8:	8b a7       	std	Y+43, r24	; 0x2b
    10da:	8b a5       	ldd	r24, Y+43	; 0x2b
    10dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    10de:	98 a7       	std	Y+40, r25	; 0x28
    10e0:	8f a3       	std	Y+39, r24	; 0x27
    10e2:	8f a1       	ldd	r24, Y+39	; 0x27
    10e4:	98 a5       	ldd	r25, Y+40	; 0x28
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <LCD_Init+0x20c>
    10ea:	98 a7       	std	Y+40, r25	; 0x28
    10ec:	8f a3       	std	Y+39, r24	; 0x27
    {
        return;
    }
    
    _delay_ms(20);
    LCD_SendCommand(config, _LCD_8BIT_MODE_2_LINE);
    10ee:	8f a9       	ldd	r24, Y+55	; 0x37
    10f0:	98 ad       	ldd	r25, Y+56	; 0x38
    10f2:	68 e3       	ldi	r22, 0x38	; 56
    10f4:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <LCD_SendCommand>
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a0 ea       	ldi	r26, 0xA0	; 160
    10fe:	b0 e4       	ldi	r27, 0x40	; 64
    1100:	8b a3       	std	Y+35, r24	; 0x23
    1102:	9c a3       	std	Y+36, r25	; 0x24
    1104:	ad a3       	std	Y+37, r26	; 0x25
    1106:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1108:	6b a1       	ldd	r22, Y+35	; 0x23
    110a:	7c a1       	ldd	r23, Y+36	; 0x24
    110c:	8d a1       	ldd	r24, Y+37	; 0x25
    110e:	9e a1       	ldd	r25, Y+38	; 0x26
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	4a ef       	ldi	r20, 0xFA	; 250
    1116:	54 e4       	ldi	r21, 0x44	; 68
    1118:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	8f 8f       	std	Y+31, r24	; 0x1f
    1122:	98 a3       	std	Y+32, r25	; 0x20
    1124:	a9 a3       	std	Y+33, r26	; 0x21
    1126:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1128:	6f 8d       	ldd	r22, Y+31	; 0x1f
    112a:	78 a1       	ldd	r23, Y+32	; 0x20
    112c:	89 a1       	ldd	r24, Y+33	; 0x21
    112e:	9a a1       	ldd	r25, Y+34	; 0x22
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e8       	ldi	r20, 0x80	; 128
    1136:	5f e3       	ldi	r21, 0x3F	; 63
    1138:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    113c:	88 23       	and	r24, r24
    113e:	2c f4       	brge	.+10     	; 0x114a <LCD_Init+0x270>
		__ticks = 1;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9e 8f       	std	Y+30, r25	; 0x1e
    1146:	8d 8f       	std	Y+29, r24	; 0x1d
    1148:	3f c0       	rjmp	.+126    	; 0x11c8 <LCD_Init+0x2ee>
	else if (__tmp > 65535)
    114a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    114c:	78 a1       	ldd	r23, Y+32	; 0x20
    114e:	89 a1       	ldd	r24, Y+33	; 0x21
    1150:	9a a1       	ldd	r25, Y+34	; 0x22
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	3f ef       	ldi	r19, 0xFF	; 255
    1156:	4f e7       	ldi	r20, 0x7F	; 127
    1158:	57 e4       	ldi	r21, 0x47	; 71
    115a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    115e:	18 16       	cp	r1, r24
    1160:	4c f5       	brge	.+82     	; 0x11b4 <LCD_Init+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1162:	6b a1       	ldd	r22, Y+35	; 0x23
    1164:	7c a1       	ldd	r23, Y+36	; 0x24
    1166:	8d a1       	ldd	r24, Y+37	; 0x25
    1168:	9e a1       	ldd	r25, Y+38	; 0x26
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e2       	ldi	r20, 0x20	; 32
    1170:	51 e4       	ldi	r21, 0x41	; 65
    1172:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	9e 8f       	std	Y+30, r25	; 0x1e
    1188:	8d 8f       	std	Y+29, r24	; 0x1d
    118a:	0f c0       	rjmp	.+30     	; 0x11aa <LCD_Init+0x2d0>
    118c:	88 ec       	ldi	r24, 0xC8	; 200
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	9c 8f       	std	Y+28, r25	; 0x1c
    1192:	8b 8f       	std	Y+27, r24	; 0x1b
    1194:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1196:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <LCD_Init+0x2be>
    119c:	9c 8f       	std	Y+28, r25	; 0x1c
    119e:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	9e 8f       	std	Y+30, r25	; 0x1e
    11a8:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	69 f7       	brne	.-38     	; 0x118c <LCD_Init+0x2b2>
    11b2:	14 c0       	rjmp	.+40     	; 0x11dc <LCD_Init+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    11b6:	78 a1       	ldd	r23, Y+32	; 0x20
    11b8:	89 a1       	ldd	r24, Y+33	; 0x21
    11ba:	9a a1       	ldd	r25, Y+34	; 0x22
    11bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	9e 8f       	std	Y+30, r25	; 0x1e
    11c6:	8d 8f       	std	Y+29, r24	; 0x1d
    11c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11cc:	9a 8f       	std	Y+26, r25	; 0x1a
    11ce:	89 8f       	std	Y+25, r24	; 0x19
    11d0:	89 8d       	ldd	r24, Y+25	; 0x19
    11d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <LCD_Init+0x2fa>
    11d8:	9a 8f       	std	Y+26, r25	; 0x1a
    11da:	89 8f       	std	Y+25, r24	; 0x19
    _delay_ms(5);
    LCD_SendCommand(config, _LCD_8BIT_MODE_2_LINE);
    11dc:	8f a9       	ldd	r24, Y+55	; 0x37
    11de:	98 ad       	ldd	r25, Y+56	; 0x38
    11e0:	68 e3       	ldi	r22, 0x38	; 56
    11e2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <LCD_SendCommand>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a6 e1       	ldi	r26, 0x16	; 22
    11ec:	b3 e4       	ldi	r27, 0x43	; 67
    11ee:	8d 8b       	std	Y+21, r24	; 0x15
    11f0:	9e 8b       	std	Y+22, r25	; 0x16
    11f2:	af 8b       	std	Y+23, r26	; 0x17
    11f4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    11f6:	6d 89       	ldd	r22, Y+21	; 0x15
    11f8:	7e 89       	ldd	r23, Y+22	; 0x16
    11fa:	8f 89       	ldd	r24, Y+23	; 0x17
    11fc:	98 8d       	ldd	r25, Y+24	; 0x18
    11fe:	2b ea       	ldi	r18, 0xAB	; 171
    1200:	3a ea       	ldi	r19, 0xAA	; 170
    1202:	4a e2       	ldi	r20, 0x2A	; 42
    1204:	50 e4       	ldi	r21, 0x40	; 64
    1206:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	89 8b       	std	Y+17, r24	; 0x11
    1210:	9a 8b       	std	Y+18, r25	; 0x12
    1212:	ab 8b       	std	Y+19, r26	; 0x13
    1214:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1216:	69 89       	ldd	r22, Y+17	; 0x11
    1218:	7a 89       	ldd	r23, Y+18	; 0x12
    121a:	8b 89       	ldd	r24, Y+19	; 0x13
    121c:	9c 89       	ldd	r25, Y+20	; 0x14
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	40 e8       	ldi	r20, 0x80	; 128
    1224:	5f e3       	ldi	r21, 0x3F	; 63
    1226:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    122a:	88 23       	and	r24, r24
    122c:	1c f4       	brge	.+6      	; 0x1234 <LCD_Init+0x35a>
		__ticks = 1;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	88 8b       	std	Y+16, r24	; 0x10
    1232:	91 c0       	rjmp	.+290    	; 0x1356 <LCD_Init+0x47c>
	else if (__tmp > 255)
    1234:	69 89       	ldd	r22, Y+17	; 0x11
    1236:	7a 89       	ldd	r23, Y+18	; 0x12
    1238:	8b 89       	ldd	r24, Y+19	; 0x13
    123a:	9c 89       	ldd	r25, Y+20	; 0x14
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	4f e7       	ldi	r20, 0x7F	; 127
    1242:	53 e4       	ldi	r21, 0x43	; 67
    1244:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1248:	18 16       	cp	r1, r24
    124a:	0c f0       	brlt	.+2      	; 0x124e <LCD_Init+0x374>
    124c:	7b c0       	rjmp	.+246    	; 0x1344 <LCD_Init+0x46a>
	{
		_delay_ms(__us / 1000.0);
    124e:	6d 89       	ldd	r22, Y+21	; 0x15
    1250:	7e 89       	ldd	r23, Y+22	; 0x16
    1252:	8f 89       	ldd	r24, Y+23	; 0x17
    1254:	98 8d       	ldd	r25, Y+24	; 0x18
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	4a e7       	ldi	r20, 0x7A	; 122
    125c:	54 e4       	ldi	r21, 0x44	; 68
    125e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	8c 87       	std	Y+12, r24	; 0x0c
    1268:	9d 87       	std	Y+13, r25	; 0x0d
    126a:	ae 87       	std	Y+14, r26	; 0x0e
    126c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1270:	7d 85       	ldd	r23, Y+13	; 0x0d
    1272:	8e 85       	ldd	r24, Y+14	; 0x0e
    1274:	9f 85       	ldd	r25, Y+15	; 0x0f
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	4a ef       	ldi	r20, 0xFA	; 250
    127c:	54 e4       	ldi	r21, 0x44	; 68
    127e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	88 87       	std	Y+8, r24	; 0x08
    1288:	99 87       	std	Y+9, r25	; 0x09
    128a:	aa 87       	std	Y+10, r26	; 0x0a
    128c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    128e:	68 85       	ldd	r22, Y+8	; 0x08
    1290:	79 85       	ldd	r23, Y+9	; 0x09
    1292:	8a 85       	ldd	r24, Y+10	; 0x0a
    1294:	9b 85       	ldd	r25, Y+11	; 0x0b
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e8       	ldi	r20, 0x80	; 128
    129c:	5f e3       	ldi	r21, 0x3F	; 63
    129e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12a2:	88 23       	and	r24, r24
    12a4:	2c f4       	brge	.+10     	; 0x12b0 <LCD_Init+0x3d6>
		__ticks = 1;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	9f 83       	std	Y+7, r25	; 0x07
    12ac:	8e 83       	std	Y+6, r24	; 0x06
    12ae:	3f c0       	rjmp	.+126    	; 0x132e <LCD_Init+0x454>
	else if (__tmp > 65535)
    12b0:	68 85       	ldd	r22, Y+8	; 0x08
    12b2:	79 85       	ldd	r23, Y+9	; 0x09
    12b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	3f ef       	ldi	r19, 0xFF	; 255
    12bc:	4f e7       	ldi	r20, 0x7F	; 127
    12be:	57 e4       	ldi	r21, 0x47	; 71
    12c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12c4:	18 16       	cp	r1, r24
    12c6:	4c f5       	brge	.+82     	; 0x131a <LCD_Init+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    12ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    12cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    12ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e2       	ldi	r20, 0x20	; 32
    12d6:	51 e4       	ldi	r21, 0x41	; 65
    12d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	bc 01       	movw	r22, r24
    12e2:	cd 01       	movw	r24, r26
    12e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	9f 83       	std	Y+7, r25	; 0x07
    12ee:	8e 83       	std	Y+6, r24	; 0x06
    12f0:	0f c0       	rjmp	.+30     	; 0x1310 <LCD_Init+0x436>
    12f2:	88 ec       	ldi	r24, 0xC8	; 200
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9d 83       	std	Y+5, r25	; 0x05
    12f8:	8c 83       	std	Y+4, r24	; 0x04
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <LCD_Init+0x424>
    1302:	9d 83       	std	Y+5, r25	; 0x05
    1304:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1306:	8e 81       	ldd	r24, Y+6	; 0x06
    1308:	9f 81       	ldd	r25, Y+7	; 0x07
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	9f 83       	std	Y+7, r25	; 0x07
    130e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1310:	8e 81       	ldd	r24, Y+6	; 0x06
    1312:	9f 81       	ldd	r25, Y+7	; 0x07
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	69 f7       	brne	.-38     	; 0x12f2 <LCD_Init+0x418>
    1318:	24 c0       	rjmp	.+72     	; 0x1362 <LCD_Init+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131a:	68 85       	ldd	r22, Y+8	; 0x08
    131c:	79 85       	ldd	r23, Y+9	; 0x09
    131e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1320:	9b 85       	ldd	r25, Y+11	; 0x0b
    1322:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	9f 83       	std	Y+7, r25	; 0x07
    132c:	8e 83       	std	Y+6, r24	; 0x06
    132e:	8e 81       	ldd	r24, Y+6	; 0x06
    1330:	9f 81       	ldd	r25, Y+7	; 0x07
    1332:	9b 83       	std	Y+3, r25	; 0x03
    1334:	8a 83       	std	Y+2, r24	; 0x02
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	9b 81       	ldd	r25, Y+3	; 0x03
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <LCD_Init+0x460>
    133e:	9b 83       	std	Y+3, r25	; 0x03
    1340:	8a 83       	std	Y+2, r24	; 0x02
    1342:	0f c0       	rjmp	.+30     	; 0x1362 <LCD_Init+0x488>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1344:	69 89       	ldd	r22, Y+17	; 0x11
    1346:	7a 89       	ldd	r23, Y+18	; 0x12
    1348:	8b 89       	ldd	r24, Y+19	; 0x13
    134a:	9c 89       	ldd	r25, Y+20	; 0x14
    134c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	88 8b       	std	Y+16, r24	; 0x10
    1356:	88 89       	ldd	r24, Y+16	; 0x10
    1358:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	8a 95       	dec	r24
    135e:	f1 f7       	brne	.-4      	; 0x135c <LCD_Init+0x482>
    1360:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(150);
    LCD_SendCommand(config, _LCD_8BIT_MODE_2_LINE);
    1362:	8f a9       	ldd	r24, Y+55	; 0x37
    1364:	98 ad       	ldd	r25, Y+56	; 0x38
    1366:	68 e3       	ldi	r22, 0x38	; 56
    1368:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <LCD_SendCommand>

    LCD_SendCommand(config, _LCD_CLEAR);
    136c:	8f a9       	ldd	r24, Y+55	; 0x37
    136e:	98 ad       	ldd	r25, Y+56	; 0x38
    1370:	61 e0       	ldi	r22, 0x01	; 1
    1372:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <LCD_SendCommand>
    LCD_SendCommand(config, _LCD_RETURN_HOME);
    1376:	8f a9       	ldd	r24, Y+55	; 0x37
    1378:	98 ad       	ldd	r25, Y+56	; 0x38
    137a:	62 e0       	ldi	r22, 0x02	; 2
    137c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <LCD_SendCommand>
    LCD_SendCommand(config, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
    1380:	8f a9       	ldd	r24, Y+55	; 0x37
    1382:	98 ad       	ldd	r25, Y+56	; 0x38
    1384:	66 e0       	ldi	r22, 0x06	; 6
    1386:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <LCD_SendCommand>
    LCD_SendCommand(config, _LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
    138a:	8f a9       	ldd	r24, Y+55	; 0x37
    138c:	98 ad       	ldd	r25, Y+56	; 0x38
    138e:	6c e0       	ldi	r22, 0x0C	; 12
    1390:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <LCD_SendCommand>
    if(config->mode == LCD_4BitMode)
    1394:	ef a9       	ldd	r30, Y+55	; 0x37
    1396:	f8 ad       	ldd	r31, Y+56	; 0x38
    1398:	80 81       	ld	r24, Z
    139a:	84 30       	cpi	r24, 0x04	; 4
    139c:	29 f4       	brne	.+10     	; 0x13a8 <LCD_Init+0x4ce>
    {
        LCD_SendCommand(config, _LCD_4BIT_MODE_2_LINE);
    139e:	8f a9       	ldd	r24, Y+55	; 0x37
    13a0:	98 ad       	ldd	r25, Y+56	; 0x38
    13a2:	68 e2       	ldi	r22, 0x28	; 40
    13a4:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <LCD_SendCommand>
    }
    LCD_SendCommand(config, 0x80);
    13a8:	8f a9       	ldd	r24, Y+55	; 0x37
    13aa:	98 ad       	ldd	r25, Y+56	; 0x38
    13ac:	60 e8       	ldi	r22, 0x80	; 128
    13ae:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <LCD_SendCommand>
}
    13b2:	e8 96       	adiw	r28, 0x38	; 56
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <LCD_SendCommand>:

void LCD_SendCommand(const LCD_Config_t *config, uint8_t command) 
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <LCD_SendCommand+0x6>
    13ca:	0f 92       	push	r0
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	9a 83       	std	Y+2, r25	; 0x02
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	6b 83       	std	Y+3, r22	; 0x03
    /**< Set RS pin to low for command --> RS = 0 */
    DIO_SetPinValue(config->rsPin.LCD_PortId, config->rsPin.LCD_PinId, DIO_LOW);
    13d6:	e9 81       	ldd	r30, Y+1	; 0x01
    13d8:	fa 81       	ldd	r31, Y+2	; 0x02
    13da:	81 85       	ldd	r24, Z+9	; 0x09
    13dc:	83 70       	andi	r24, 0x03	; 3
    13de:	28 2f       	mov	r18, r24
    13e0:	e9 81       	ldd	r30, Y+1	; 0x01
    13e2:	fa 81       	ldd	r31, Y+2	; 0x02
    13e4:	81 85       	ldd	r24, Z+9	; 0x09
    13e6:	86 95       	lsr	r24
    13e8:	86 95       	lsr	r24
    13ea:	8f 70       	andi	r24, 0x0F	; 15
    13ec:	98 2f       	mov	r25, r24
    13ee:	82 2f       	mov	r24, r18
    13f0:	69 2f       	mov	r22, r25
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_SetPinValue>
    /**< Set RW pin to low for write  --> RW = 0 */
    DIO_SetPinValue(config->rwPin.LCD_PortId, config->rwPin.LCD_PinId, DIO_LOW);
    13f8:	e9 81       	ldd	r30, Y+1	; 0x01
    13fa:	fa 81       	ldd	r31, Y+2	; 0x02
    13fc:	82 85       	ldd	r24, Z+10	; 0x0a
    13fe:	83 70       	andi	r24, 0x03	; 3
    1400:	28 2f       	mov	r18, r24
    1402:	e9 81       	ldd	r30, Y+1	; 0x01
    1404:	fa 81       	ldd	r31, Y+2	; 0x02
    1406:	82 85       	ldd	r24, Z+10	; 0x0a
    1408:	86 95       	lsr	r24
    140a:	86 95       	lsr	r24
    140c:	8f 70       	andi	r24, 0x0F	; 15
    140e:	98 2f       	mov	r25, r24
    1410:	82 2f       	mov	r24, r18
    1412:	69 2f       	mov	r22, r25
    1414:	40 e0       	ldi	r20, 0x00	; 0
    1416:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_SetPinValue>

    if(config->mode == LCD_4BitMode)
    141a:	e9 81       	ldd	r30, Y+1	; 0x01
    141c:	fa 81       	ldd	r31, Y+2	; 0x02
    141e:	80 81       	ld	r24, Z
    1420:	84 30       	cpi	r24, 0x04	; 4
    1422:	31 f4       	brne	.+12     	; 0x1430 <LCD_SendCommand+0x6c>
    {
        HAL_LCD_Send4Bits(config, command);
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	6b 81       	ldd	r22, Y+3	; 0x03
    142a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <HAL_LCD_Send4Bits>
    142e:	0a c0       	rjmp	.+20     	; 0x1444 <LCD_SendCommand+0x80>
    }
    else if(config->mode == LCD_8BitMode)
    1430:	e9 81       	ldd	r30, Y+1	; 0x01
    1432:	fa 81       	ldd	r31, Y+2	; 0x02
    1434:	80 81       	ld	r24, Z
    1436:	88 30       	cpi	r24, 0x08	; 8
    1438:	29 f4       	brne	.+10     	; 0x1444 <LCD_SendCommand+0x80>
    {
        HAL_LCD_Send8Bits(config, command);
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	9a 81       	ldd	r25, Y+2	; 0x02
    143e:	6b 81       	ldd	r22, Y+3	; 0x03
    1440:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <HAL_LCD_Send8Bits>
    }
    else
    {
        return;
    }
}
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <LCD_SendChar>:

void LCD_SendChar(const LCD_Config_t *config, uint8_t character) 
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <LCD_SendChar+0x6>
    1456:	0f 92       	push	r0
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	9a 83       	std	Y+2, r25	; 0x02
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	6b 83       	std	Y+3, r22	; 0x03
    /**< Set RS pin to low for command --> RS = 0 */
    DIO_SetPinValue(config->rsPin.LCD_PortId, config->rsPin.LCD_PinId, DIO_HIGH);
    1462:	e9 81       	ldd	r30, Y+1	; 0x01
    1464:	fa 81       	ldd	r31, Y+2	; 0x02
    1466:	81 85       	ldd	r24, Z+9	; 0x09
    1468:	83 70       	andi	r24, 0x03	; 3
    146a:	28 2f       	mov	r18, r24
    146c:	e9 81       	ldd	r30, Y+1	; 0x01
    146e:	fa 81       	ldd	r31, Y+2	; 0x02
    1470:	81 85       	ldd	r24, Z+9	; 0x09
    1472:	86 95       	lsr	r24
    1474:	86 95       	lsr	r24
    1476:	8f 70       	andi	r24, 0x0F	; 15
    1478:	98 2f       	mov	r25, r24
    147a:	82 2f       	mov	r24, r18
    147c:	69 2f       	mov	r22, r25
    147e:	41 e0       	ldi	r20, 0x01	; 1
    1480:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_SetPinValue>
    /**< Set RW pin to low for write  --> RW = 0 */
    DIO_SetPinValue(config->rwPin.LCD_PortId, config->rwPin.LCD_PinId, DIO_LOW);
    1484:	e9 81       	ldd	r30, Y+1	; 0x01
    1486:	fa 81       	ldd	r31, Y+2	; 0x02
    1488:	82 85       	ldd	r24, Z+10	; 0x0a
    148a:	83 70       	andi	r24, 0x03	; 3
    148c:	28 2f       	mov	r18, r24
    148e:	e9 81       	ldd	r30, Y+1	; 0x01
    1490:	fa 81       	ldd	r31, Y+2	; 0x02
    1492:	82 85       	ldd	r24, Z+10	; 0x0a
    1494:	86 95       	lsr	r24
    1496:	86 95       	lsr	r24
    1498:	8f 70       	andi	r24, 0x0F	; 15
    149a:	98 2f       	mov	r25, r24
    149c:	82 2f       	mov	r24, r18
    149e:	69 2f       	mov	r22, r25
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_SetPinValue>

    if(config->mode == LCD_4BitMode)
    14a6:	e9 81       	ldd	r30, Y+1	; 0x01
    14a8:	fa 81       	ldd	r31, Y+2	; 0x02
    14aa:	80 81       	ld	r24, Z
    14ac:	84 30       	cpi	r24, 0x04	; 4
    14ae:	31 f4       	brne	.+12     	; 0x14bc <LCD_SendChar+0x6c>
    {
        HAL_LCD_Send4Bits(config, character);
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	9a 81       	ldd	r25, Y+2	; 0x02
    14b4:	6b 81       	ldd	r22, Y+3	; 0x03
    14b6:	0e 94 0c 0c 	call	0x1818	; 0x1818 <HAL_LCD_Send4Bits>
    14ba:	0a c0       	rjmp	.+20     	; 0x14d0 <LCD_SendChar+0x80>
    }
    else if(config->mode == LCD_8BitMode)
    14bc:	e9 81       	ldd	r30, Y+1	; 0x01
    14be:	fa 81       	ldd	r31, Y+2	; 0x02
    14c0:	80 81       	ld	r24, Z
    14c2:	88 30       	cpi	r24, 0x08	; 8
    14c4:	29 f4       	brne	.+10     	; 0x14d0 <LCD_SendChar+0x80>
    {
        HAL_LCD_Send8Bits(config, character);
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ca:	6b 81       	ldd	r22, Y+3	; 0x03
    14cc:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <HAL_LCD_Send8Bits>
    }
    else
    {
        return;
    }
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <LCD_SendString>:

void LCD_SendString(const LCD_Config_t *config, const uint8_t *string) 
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <LCD_SendString+0x6>
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <LCD_SendString+0x8>
    14e4:	0f 92       	push	r0
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	9b 83       	std	Y+3, r25	; 0x03
    14ec:	8a 83       	std	Y+2, r24	; 0x02
    14ee:	7d 83       	std	Y+5, r23	; 0x05
    14f0:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t Local_Counter = 0;
    14f2:	19 82       	std	Y+1, r1	; 0x01
    14f4:	11 c0       	rjmp	.+34     	; 0x1518 <LCD_SendString+0x3c>
    
    while(string[Local_Counter] != '\0')
    {
        LCD_SendChar(config, string[Local_Counter]);
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	8c 81       	ldd	r24, Y+4	; 0x04
    14fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1500:	fc 01       	movw	r30, r24
    1502:	e2 0f       	add	r30, r18
    1504:	f3 1f       	adc	r31, r19
    1506:	20 81       	ld	r18, Z
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	9b 81       	ldd	r25, Y+3	; 0x03
    150c:	62 2f       	mov	r22, r18
    150e:	0e 94 28 0a 	call	0x1450	; 0x1450 <LCD_SendChar>
        Local_Counter++;
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	8f 5f       	subi	r24, 0xFF	; 255
    1516:	89 83       	std	Y+1, r24	; 0x01

void LCD_SendString(const LCD_Config_t *config, const uint8_t *string) 
{
    uint8_t Local_Counter = 0;
    
    while(string[Local_Counter] != '\0')
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	fc 01       	movw	r30, r24
    1524:	e2 0f       	add	r30, r18
    1526:	f3 1f       	adc	r31, r19
    1528:	80 81       	ld	r24, Z
    152a:	88 23       	and	r24, r24
    152c:	21 f7       	brne	.-56     	; 0x14f6 <LCD_SendString+0x1a>
    {
        LCD_SendChar(config, string[Local_Counter]);
        Local_Counter++;
    }
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <LCD_SendIntegerNumber>:

void LCD_SendIntegerNumber(const LCD_Config_t *config, s32 number) {
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	62 97       	sbiw	r28, 0x12	; 18
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	9e 87       	std	Y+14, r25	; 0x0e
    1558:	8d 87       	std	Y+13, r24	; 0x0d
    155a:	4f 87       	std	Y+15, r20	; 0x0f
    155c:	58 8b       	std	Y+16, r21	; 0x10
    155e:	69 8b       	std	Y+17, r22	; 0x11
    1560:	7a 8b       	std	Y+18, r23	; 0x12
    u8 Local_Integer[11] = {0};
    1562:	8b e0       	ldi	r24, 0x0B	; 11
    1564:	fe 01       	movw	r30, r28
    1566:	32 96       	adiw	r30, 0x02	; 2
    1568:	df 01       	movw	r26, r30
    156a:	98 2f       	mov	r25, r24
    156c:	1d 92       	st	X+, r1
    156e:	9a 95       	dec	r25
    1570:	e9 f7       	brne	.-6      	; 0x156c <LCD_SendIntegerNumber+0x2e>
    s8 Local_Counter = 0;
    1572:	19 82       	std	Y+1, r1	; 0x01

    /**< Handle negative numbers */ 
    if (number < 0) {
    1574:	8f 85       	ldd	r24, Y+15	; 0x0f
    1576:	98 89       	ldd	r25, Y+16	; 0x10
    1578:	a9 89       	ldd	r26, Y+17	; 0x11
    157a:	ba 89       	ldd	r27, Y+18	; 0x12
    157c:	bb 23       	and	r27, r27
    157e:	a4 f4       	brge	.+40     	; 0x15a8 <LCD_SendIntegerNumber+0x6a>
        LCD_SendChar(config, '-');
    1580:	8d 85       	ldd	r24, Y+13	; 0x0d
    1582:	9e 85       	ldd	r25, Y+14	; 0x0e
    1584:	6d e2       	ldi	r22, 0x2D	; 45
    1586:	0e 94 28 0a 	call	0x1450	; 0x1450 <LCD_SendChar>
        number *= -1;
    158a:	8f 85       	ldd	r24, Y+15	; 0x0f
    158c:	98 89       	ldd	r25, Y+16	; 0x10
    158e:	a9 89       	ldd	r26, Y+17	; 0x11
    1590:	ba 89       	ldd	r27, Y+18	; 0x12
    1592:	b0 95       	com	r27
    1594:	a0 95       	com	r26
    1596:	90 95       	com	r25
    1598:	81 95       	neg	r24
    159a:	9f 4f       	sbci	r25, 0xFF	; 255
    159c:	af 4f       	sbci	r26, 0xFF	; 255
    159e:	bf 4f       	sbci	r27, 0xFF	; 255
    15a0:	8f 87       	std	Y+15, r24	; 0x0f
    15a2:	98 8b       	std	Y+16, r25	; 0x10
    15a4:	a9 8b       	std	Y+17, r26	; 0x11
    15a6:	ba 8b       	std	Y+18, r27	; 0x12
    }

    /**< Extract digits of the integer part */ 
    do {
        Local_Integer[Local_Counter] = number % 10;
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	08 2f       	mov	r16, r24
    15ac:	11 27       	eor	r17, r17
    15ae:	07 fd       	sbrc	r16, 7
    15b0:	10 95       	com	r17
    15b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b4:	98 89       	ldd	r25, Y+16	; 0x10
    15b6:	a9 89       	ldd	r26, Y+17	; 0x11
    15b8:	ba 89       	ldd	r27, Y+18	; 0x12
    15ba:	2a e0       	ldi	r18, 0x0A	; 10
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	0e 94 91 17 	call	0x2f22	; 0x2f22 <__divmodsi4>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	28 2f       	mov	r18, r24
    15d0:	ce 01       	movw	r24, r28
    15d2:	02 96       	adiw	r24, 0x02	; 2
    15d4:	fc 01       	movw	r30, r24
    15d6:	e0 0f       	add	r30, r16
    15d8:	f1 1f       	adc	r31, r17
    15da:	20 83       	st	Z, r18
        number /= 10;
    15dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15de:	98 89       	ldd	r25, Y+16	; 0x10
    15e0:	a9 89       	ldd	r26, Y+17	; 0x11
    15e2:	ba 89       	ldd	r27, Y+18	; 0x12
    15e4:	2a e0       	ldi	r18, 0x0A	; 10
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	bc 01       	movw	r22, r24
    15ee:	cd 01       	movw	r24, r26
    15f0:	0e 94 91 17 	call	0x2f22	; 0x2f22 <__divmodsi4>
    15f4:	da 01       	movw	r26, r20
    15f6:	c9 01       	movw	r24, r18
    15f8:	8f 87       	std	Y+15, r24	; 0x0f
    15fa:	98 8b       	std	Y+16, r25	; 0x10
    15fc:	a9 8b       	std	Y+17, r26	; 0x11
    15fe:	ba 8b       	std	Y+18, r27	; 0x12
        Local_Counter++;
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	8f 5f       	subi	r24, 0xFF	; 255
    1604:	89 83       	std	Y+1, r24	; 0x01
    } while (number != 0);
    1606:	8f 85       	ldd	r24, Y+15	; 0x0f
    1608:	98 89       	ldd	r25, Y+16	; 0x10
    160a:	a9 89       	ldd	r26, Y+17	; 0x11
    160c:	ba 89       	ldd	r27, Y+18	; 0x12
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	a1 05       	cpc	r26, r1
    1612:	b1 05       	cpc	r27, r1
    1614:	49 f6       	brne	.-110    	; 0x15a8 <LCD_SendIntegerNumber+0x6a>

    Local_Counter--;
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	81 50       	subi	r24, 0x01	; 1
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	15 c0       	rjmp	.+42     	; 0x1648 <LCD_SendIntegerNumber+0x10a>

    /**< Display each digit */ 
    for (; Local_Counter >= 0; Local_Counter--) {
        LCD_SendChar(config, Local_Integer[Local_Counter] + '0');
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	28 2f       	mov	r18, r24
    1622:	33 27       	eor	r19, r19
    1624:	27 fd       	sbrc	r18, 7
    1626:	30 95       	com	r19
    1628:	ce 01       	movw	r24, r28
    162a:	02 96       	adiw	r24, 0x02	; 2
    162c:	fc 01       	movw	r30, r24
    162e:	e2 0f       	add	r30, r18
    1630:	f3 1f       	adc	r31, r19
    1632:	80 81       	ld	r24, Z
    1634:	28 2f       	mov	r18, r24
    1636:	20 5d       	subi	r18, 0xD0	; 208
    1638:	8d 85       	ldd	r24, Y+13	; 0x0d
    163a:	9e 85       	ldd	r25, Y+14	; 0x0e
    163c:	62 2f       	mov	r22, r18
    163e:	0e 94 28 0a 	call	0x1450	; 0x1450 <LCD_SendChar>
    } while (number != 0);

    Local_Counter--;

    /**< Display each digit */ 
    for (; Local_Counter >= 0; Local_Counter--) {
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	81 50       	subi	r24, 0x01	; 1
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	88 23       	and	r24, r24
    164c:	44 f7       	brge	.-48     	; 0x161e <LCD_SendIntegerNumber+0xe0>
        LCD_SendChar(config, Local_Integer[Local_Counter] + '0');
    }
}
    164e:	62 96       	adiw	r28, 0x12	; 18
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	1f 91       	pop	r17
    1660:	0f 91       	pop	r16
    1662:	08 95       	ret

00001664 <LCD_SendNumber>:

void LCD_SendNumber(const LCD_Config_t *config, double number) {
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	61 97       	sbiw	r28, 0x11	; 17
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	9d 87       	std	Y+13, r25	; 0x0d
    167a:	8c 87       	std	Y+12, r24	; 0x0c
    167c:	4e 87       	std	Y+14, r20	; 0x0e
    167e:	5f 87       	std	Y+15, r21	; 0x0f
    1680:	68 8b       	std	Y+16, r22	; 0x10
    1682:	79 8b       	std	Y+17, r23	; 0x11
    /**< Display integer part */ 
    u32 integerPart = (u32)number;
    1684:	6e 85       	ldd	r22, Y+14	; 0x0e
    1686:	7f 85       	ldd	r23, Y+15	; 0x0f
    1688:	88 89       	ldd	r24, Y+16	; 0x10
    168a:	99 89       	ldd	r25, Y+17	; 0x11
    168c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	88 87       	std	Y+8, r24	; 0x08
    1696:	99 87       	std	Y+9, r25	; 0x09
    1698:	aa 87       	std	Y+10, r26	; 0x0a
    169a:	bb 87       	std	Y+11, r27	; 0x0b

    LCD_SendIntegerNumber(config, (s32)integerPart); // Function to handle integer part
    169c:	28 85       	ldd	r18, Y+8	; 0x08
    169e:	39 85       	ldd	r19, Y+9	; 0x09
    16a0:	4a 85       	ldd	r20, Y+10	; 0x0a
    16a2:	5b 85       	ldd	r21, Y+11	; 0x0b
    16a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    16a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    16a8:	ba 01       	movw	r22, r20
    16aa:	a9 01       	movw	r20, r18
    16ac:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_SendIntegerNumber>

    /**< Display decimal point */ 
    LCD_SendChar(config, '.');
    16b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    16b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    16b4:	6e e2       	ldi	r22, 0x2E	; 46
    16b6:	0e 94 28 0a 	call	0x1450	; 0x1450 <LCD_SendChar>

    /**< Display fractional part with 3 decimal points */ 
    double fractionalPart = number - integerPart;
    16ba:	68 85       	ldd	r22, Y+8	; 0x08
    16bc:	79 85       	ldd	r23, Y+9	; 0x09
    16be:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c2:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    16c6:	9b 01       	movw	r18, r22
    16c8:	ac 01       	movw	r20, r24
    16ca:	6e 85       	ldd	r22, Y+14	; 0x0e
    16cc:	7f 85       	ldd	r23, Y+15	; 0x0f
    16ce:	88 89       	ldd	r24, Y+16	; 0x10
    16d0:	99 89       	ldd	r25, Y+17	; 0x11
    16d2:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	8c 83       	std	Y+4, r24	; 0x04
    16dc:	9d 83       	std	Y+5, r25	; 0x05
    16de:	ae 83       	std	Y+6, r26	; 0x06
    16e0:	bf 83       	std	Y+7, r27	; 0x07
    u8 decimalPlaces = 3;
    16e2:	83 e0       	ldi	r24, 0x03	; 3
    16e4:	8b 83       	std	Y+3, r24	; 0x03

    for (u8 i = 0; i < decimalPlaces; ++i) {
    16e6:	1a 82       	std	Y+2, r1	; 0x02
    16e8:	3d c0       	rjmp	.+122    	; 0x1764 <LCD_SendNumber+0x100>
        fractionalPart *= 10;
    16ea:	6c 81       	ldd	r22, Y+4	; 0x04
    16ec:	7d 81       	ldd	r23, Y+5	; 0x05
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	9f 81       	ldd	r25, Y+7	; 0x07
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e2       	ldi	r20, 0x20	; 32
    16f8:	51 e4       	ldi	r21, 0x41	; 65
    16fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	8c 83       	std	Y+4, r24	; 0x04
    1704:	9d 83       	std	Y+5, r25	; 0x05
    1706:	ae 83       	std	Y+6, r26	; 0x06
    1708:	bf 83       	std	Y+7, r27	; 0x07
        u8 digit = (u8)fractionalPart;
    170a:	6c 81       	ldd	r22, Y+4	; 0x04
    170c:	7d 81       	ldd	r23, Y+5	; 0x05
    170e:	8e 81       	ldd	r24, Y+6	; 0x06
    1710:	9f 81       	ldd	r25, Y+7	; 0x07
    1712:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	89 83       	std	Y+1, r24	; 0x01
        LCD_SendChar(config, digit + '0');
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	28 2f       	mov	r18, r24
    1720:	20 5d       	subi	r18, 0xD0	; 208
    1722:	8c 85       	ldd	r24, Y+12	; 0x0c
    1724:	9d 85       	ldd	r25, Y+13	; 0x0d
    1726:	62 2f       	mov	r22, r18
    1728:	0e 94 28 0a 	call	0x1450	; 0x1450 <LCD_SendChar>
        fractionalPart -= digit;
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	88 2f       	mov	r24, r24
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	aa 27       	eor	r26, r26
    1734:	97 fd       	sbrc	r25, 7
    1736:	a0 95       	com	r26
    1738:	ba 2f       	mov	r27, r26
    173a:	bc 01       	movw	r22, r24
    173c:	cd 01       	movw	r24, r26
    173e:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    1742:	9b 01       	movw	r18, r22
    1744:	ac 01       	movw	r20, r24
    1746:	6c 81       	ldd	r22, Y+4	; 0x04
    1748:	7d 81       	ldd	r23, Y+5	; 0x05
    174a:	8e 81       	ldd	r24, Y+6	; 0x06
    174c:	9f 81       	ldd	r25, Y+7	; 0x07
    174e:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	8c 83       	std	Y+4, r24	; 0x04
    1758:	9d 83       	std	Y+5, r25	; 0x05
    175a:	ae 83       	std	Y+6, r26	; 0x06
    175c:	bf 83       	std	Y+7, r27	; 0x07

    /**< Display fractional part with 3 decimal points */ 
    double fractionalPart = number - integerPart;
    u8 decimalPlaces = 3;

    for (u8 i = 0; i < decimalPlaces; ++i) {
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	8f 5f       	subi	r24, 0xFF	; 255
    1762:	8a 83       	std	Y+2, r24	; 0x02
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	98 17       	cp	r25, r24
    176a:	08 f4       	brcc	.+2      	; 0x176e <LCD_SendNumber+0x10a>
    176c:	be cf       	rjmp	.-132    	; 0x16ea <LCD_SendNumber+0x86>
        fractionalPart *= 10;
        u8 digit = (u8)fractionalPart;
        LCD_SendChar(config, digit + '0');
        fractionalPart -= digit;
    }
}
    176e:	61 96       	adiw	r28, 0x11	; 17
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <LCD_Clear>:

void LCD_Clear(const LCD_Config_t *config) 
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	00 d0       	rcall	.+0      	; 0x1786 <LCD_Clear+0x6>
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	9a 83       	std	Y+2, r25	; 0x02
    178c:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendCommand(config, _LCD_CLEAR);
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	9a 81       	ldd	r25, Y+2	; 0x02
    1792:	61 e0       	ldi	r22, 0x01	; 1
    1794:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <LCD_SendCommand>
}
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <LCD_GoToXYPos>:

void LCD_GoToXYPos(const LCD_Config_t *config, uint8_t x, uint8_t y) {
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	28 97       	sbiw	r28, 0x08	; 8
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	9c 83       	std	Y+4, r25	; 0x04
    17b8:	8b 83       	std	Y+3, r24	; 0x03
    17ba:	6d 83       	std	Y+5, r22	; 0x05
    17bc:	4e 83       	std	Y+6, r20	; 0x06
    /**< Check if the coordinates are within bounds */ 
    if ((y < 2) && (x >= 0 && x <= 15)) {
    17be:	8e 81       	ldd	r24, Y+6	; 0x06
    17c0:	82 30       	cpi	r24, 0x02	; 2
    17c2:	08 f5       	brcc	.+66     	; 0x1806 <LCD_GoToXYPos+0x64>
    17c4:	8d 81       	ldd	r24, Y+5	; 0x05
    17c6:	80 31       	cpi	r24, 0x10	; 16
    17c8:	f0 f4       	brcc	.+60     	; 0x1806 <LCD_GoToXYPos+0x64>
        u8 localAddress = 0;
    17ca:	1a 82       	std	Y+2, r1	; 0x02

        switch (y) {
    17cc:	8e 81       	ldd	r24, Y+6	; 0x06
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	38 87       	std	Y+8, r19	; 0x08
    17d4:	2f 83       	std	Y+7, r18	; 0x07
    17d6:	8f 81       	ldd	r24, Y+7	; 0x07
    17d8:	98 85       	ldd	r25, Y+8	; 0x08
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	31 f0       	breq	.+12     	; 0x17ea <LCD_GoToXYPos+0x48>
    17de:	2f 81       	ldd	r18, Y+7	; 0x07
    17e0:	38 85       	ldd	r19, Y+8	; 0x08
    17e2:	21 30       	cpi	r18, 0x01	; 1
    17e4:	31 05       	cpc	r19, r1
    17e6:	21 f0       	breq	.+8      	; 0x17f0 <LCD_GoToXYPos+0x4e>
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <LCD_GoToXYPos+0x54>
            case 0:
                localAddress = x;
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	8a 83       	std	Y+2, r24	; 0x02
    17ee:	03 c0       	rjmp	.+6      	; 0x17f6 <LCD_GoToXYPos+0x54>
                break;
            case 1:
                localAddress = x + _LCD_CGRAM_START;
    17f0:	8d 81       	ldd	r24, Y+5	; 0x05
    17f2:	80 5c       	subi	r24, 0xC0	; 192
    17f4:	8a 83       	std	Y+2, r24	; 0x02
            default:
                break;
        }

        // Calculate the final address to move the cursor
        u8 command = localAddress | (1 << 7); // Or simply: localAddress + 0x80;
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	80 68       	ori	r24, 0x80	; 128
    17fa:	89 83       	std	Y+1, r24	; 0x01
        LCD_SendCommand(config, command);
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1800:	69 81       	ldd	r22, Y+1	; 0x01
    1802:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <LCD_SendCommand>
    }
    else
    {
        return;
    }
}
    1806:	28 96       	adiw	r28, 0x08	; 8
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <HAL_LCD_Send4Bits>:

/*****************************< Private helper function to send 4 bits *****************************/ 
static void HAL_LCD_Send4Bits(const LCD_Config_t *config, uint8_t value) 
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	a1 97       	sbiw	r28, 0x21	; 33
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	98 a3       	std	Y+32, r25	; 0x20
    182e:	8f 8f       	std	Y+31, r24	; 0x1f
    1830:	69 a3       	std	Y+33, r22	; 0x21
    /**< Send the 4-MSB */
    for(uint8_t i = 0; i < 4; i++)
    1832:	1e 8e       	std	Y+30, r1	; 0x1e
    1834:	32 c0       	rjmp	.+100    	; 0x189a <HAL_LCD_Send4Bits+0x82>
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> (4 + i) & 0x01);
    1836:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    183e:	98 a1       	ldd	r25, Y+32	; 0x20
    1840:	82 0f       	add	r24, r18
    1842:	93 1f       	adc	r25, r19
    1844:	fc 01       	movw	r30, r24
    1846:	31 96       	adiw	r30, 0x01	; 1
    1848:	80 81       	ld	r24, Z
    184a:	83 70       	andi	r24, 0x03	; 3
    184c:	58 2f       	mov	r21, r24
    184e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1856:	98 a1       	ldd	r25, Y+32	; 0x20
    1858:	82 0f       	add	r24, r18
    185a:	93 1f       	adc	r25, r19
    185c:	fc 01       	movw	r30, r24
    185e:	31 96       	adiw	r30, 0x01	; 1
    1860:	80 81       	ld	r24, Z
    1862:	86 95       	lsr	r24
    1864:	86 95       	lsr	r24
    1866:	8f 70       	andi	r24, 0x0F	; 15
    1868:	48 2f       	mov	r20, r24
    186a:	89 a1       	ldd	r24, Y+33	; 0x21
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1872:	88 2f       	mov	r24, r24
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	04 96       	adiw	r24, 0x04	; 4
    1878:	b9 01       	movw	r22, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <HAL_LCD_Send4Bits+0x68>
    187c:	75 95       	asr	r23
    187e:	67 95       	ror	r22
    1880:	8a 95       	dec	r24
    1882:	e2 f7       	brpl	.-8      	; 0x187c <HAL_LCD_Send4Bits+0x64>
    1884:	cb 01       	movw	r24, r22
    1886:	98 2f       	mov	r25, r24
    1888:	91 70       	andi	r25, 0x01	; 1
    188a:	85 2f       	mov	r24, r21
    188c:	64 2f       	mov	r22, r20
    188e:	49 2f       	mov	r20, r25
    1890:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_SetPinValue>

/*****************************< Private helper function to send 4 bits *****************************/ 
static void HAL_LCD_Send4Bits(const LCD_Config_t *config, uint8_t value) 
{
    /**< Send the 4-MSB */
    for(uint8_t i = 0; i < 4; i++)
    1894:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1896:	8f 5f       	subi	r24, 0xFF	; 255
    1898:	8e 8f       	std	Y+30, r24	; 0x1e
    189a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    189c:	84 30       	cpi	r24, 0x04	; 4
    189e:	58 f2       	brcs	.-106    	; 0x1836 <HAL_LCD_Send4Bits+0x1e>
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> (4 + i) & 0x01);
    }

    /**< Set the enable pin to high */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_HIGH);
    18a0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    18a2:	f8 a1       	ldd	r31, Y+32	; 0x20
    18a4:	83 85       	ldd	r24, Z+11	; 0x0b
    18a6:	83 70       	andi	r24, 0x03	; 3
    18a8:	28 2f       	mov	r18, r24
    18aa:	ef 8d       	ldd	r30, Y+31	; 0x1f
    18ac:	f8 a1       	ldd	r31, Y+32	; 0x20
    18ae:	83 85       	ldd	r24, Z+11	; 0x0b
    18b0:	86 95       	lsr	r24
    18b2:	86 95       	lsr	r24
    18b4:	8f 70       	andi	r24, 0x0F	; 15
    18b6:	98 2f       	mov	r25, r24
    18b8:	82 2f       	mov	r24, r18
    18ba:	69 2f       	mov	r22, r25
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_SetPinValue>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a0 ea       	ldi	r26, 0xA0	; 160
    18c8:	b0 e4       	ldi	r27, 0x40	; 64
    18ca:	89 8f       	std	Y+25, r24	; 0x19
    18cc:	9a 8f       	std	Y+26, r25	; 0x1a
    18ce:	ab 8f       	std	Y+27, r26	; 0x1b
    18d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d2:	69 8d       	ldd	r22, Y+25	; 0x19
    18d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	4a ef       	ldi	r20, 0xFA	; 250
    18e0:	54 e4       	ldi	r21, 0x44	; 68
    18e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	8d 8b       	std	Y+21, r24	; 0x15
    18ec:	9e 8b       	std	Y+22, r25	; 0x16
    18ee:	af 8b       	std	Y+23, r26	; 0x17
    18f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18f2:	6d 89       	ldd	r22, Y+21	; 0x15
    18f4:	7e 89       	ldd	r23, Y+22	; 0x16
    18f6:	8f 89       	ldd	r24, Y+23	; 0x17
    18f8:	98 8d       	ldd	r25, Y+24	; 0x18
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1906:	88 23       	and	r24, r24
    1908:	2c f4       	brge	.+10     	; 0x1914 <HAL_LCD_Send4Bits+0xfc>
		__ticks = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9c 8b       	std	Y+20, r25	; 0x14
    1910:	8b 8b       	std	Y+19, r24	; 0x13
    1912:	3f c0       	rjmp	.+126    	; 0x1992 <HAL_LCD_Send4Bits+0x17a>
	else if (__tmp > 65535)
    1914:	6d 89       	ldd	r22, Y+21	; 0x15
    1916:	7e 89       	ldd	r23, Y+22	; 0x16
    1918:	8f 89       	ldd	r24, Y+23	; 0x17
    191a:	98 8d       	ldd	r25, Y+24	; 0x18
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	3f ef       	ldi	r19, 0xFF	; 255
    1920:	4f e7       	ldi	r20, 0x7F	; 127
    1922:	57 e4       	ldi	r21, 0x47	; 71
    1924:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1928:	18 16       	cp	r1, r24
    192a:	4c f5       	brge	.+82     	; 0x197e <HAL_LCD_Send4Bits+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192c:	69 8d       	ldd	r22, Y+25	; 0x19
    192e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1930:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1932:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e2       	ldi	r20, 0x20	; 32
    193a:	51 e4       	ldi	r21, 0x41	; 65
    193c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9c 8b       	std	Y+20, r25	; 0x14
    1952:	8b 8b       	std	Y+19, r24	; 0x13
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <HAL_LCD_Send4Bits+0x15c>
    1956:	88 ec       	ldi	r24, 0xC8	; 200
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	9a 8b       	std	Y+18, r25	; 0x12
    195c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    195e:	89 89       	ldd	r24, Y+17	; 0x11
    1960:	9a 89       	ldd	r25, Y+18	; 0x12
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <HAL_LCD_Send4Bits+0x14a>
    1966:	9a 8b       	std	Y+18, r25	; 0x12
    1968:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196a:	8b 89       	ldd	r24, Y+19	; 0x13
    196c:	9c 89       	ldd	r25, Y+20	; 0x14
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	9c 8b       	std	Y+20, r25	; 0x14
    1972:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1974:	8b 89       	ldd	r24, Y+19	; 0x13
    1976:	9c 89       	ldd	r25, Y+20	; 0x14
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	69 f7       	brne	.-38     	; 0x1956 <HAL_LCD_Send4Bits+0x13e>
    197c:	14 c0       	rjmp	.+40     	; 0x19a6 <HAL_LCD_Send4Bits+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197e:	6d 89       	ldd	r22, Y+21	; 0x15
    1980:	7e 89       	ldd	r23, Y+22	; 0x16
    1982:	8f 89       	ldd	r24, Y+23	; 0x17
    1984:	98 8d       	ldd	r25, Y+24	; 0x18
    1986:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9c 8b       	std	Y+20, r25	; 0x14
    1990:	8b 8b       	std	Y+19, r24	; 0x13
    1992:	8b 89       	ldd	r24, Y+19	; 0x13
    1994:	9c 89       	ldd	r25, Y+20	; 0x14
    1996:	98 8b       	std	Y+16, r25	; 0x10
    1998:	8f 87       	std	Y+15, r24	; 0x0f
    199a:	8f 85       	ldd	r24, Y+15	; 0x0f
    199c:	98 89       	ldd	r25, Y+16	; 0x10
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <HAL_LCD_Send4Bits+0x186>
    19a2:	98 8b       	std	Y+16, r25	; 0x10
    19a4:	8f 87       	std	Y+15, r24	; 0x0f
    /**< Set the Pulse time to be 5msec */
    _delay_ms(5);
    /**< Set the enable pin to low */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
    19a6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    19a8:	f8 a1       	ldd	r31, Y+32	; 0x20
    19aa:	83 85       	ldd	r24, Z+11	; 0x0b
    19ac:	83 70       	andi	r24, 0x03	; 3
    19ae:	28 2f       	mov	r18, r24
    19b0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    19b2:	f8 a1       	ldd	r31, Y+32	; 0x20
    19b4:	83 85       	ldd	r24, Z+11	; 0x0b
    19b6:	86 95       	lsr	r24
    19b8:	86 95       	lsr	r24
    19ba:	8f 70       	andi	r24, 0x0F	; 15
    19bc:	98 2f       	mov	r25, r24
    19be:	82 2f       	mov	r24, r18
    19c0:	69 2f       	mov	r22, r25
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_SetPinValue>

    /**< Shift the 4-LSB command to the 4-MSB */
    value <<= 4;
    19c8:	89 a1       	ldd	r24, Y+33	; 0x21
    19ca:	82 95       	swap	r24
    19cc:	80 7f       	andi	r24, 0xF0	; 240
    19ce:	89 a3       	std	Y+33, r24	; 0x21

    /**< Send the 4-LSB */
    for(uint8_t i = 0; i < 4; i++)
    19d0:	1d 8e       	std	Y+29, r1	; 0x1d
    19d2:	32 c0       	rjmp	.+100    	; 0x1a38 <HAL_LCD_Send4Bits+0x220>
    {
    	DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> (4 + i) & 0x01);
    19d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19dc:	98 a1       	ldd	r25, Y+32	; 0x20
    19de:	82 0f       	add	r24, r18
    19e0:	93 1f       	adc	r25, r19
    19e2:	fc 01       	movw	r30, r24
    19e4:	31 96       	adiw	r30, 0x01	; 1
    19e6:	80 81       	ld	r24, Z
    19e8:	83 70       	andi	r24, 0x03	; 3
    19ea:	58 2f       	mov	r21, r24
    19ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19f4:	98 a1       	ldd	r25, Y+32	; 0x20
    19f6:	82 0f       	add	r24, r18
    19f8:	93 1f       	adc	r25, r19
    19fa:	fc 01       	movw	r30, r24
    19fc:	31 96       	adiw	r30, 0x01	; 1
    19fe:	80 81       	ld	r24, Z
    1a00:	86 95       	lsr	r24
    1a02:	86 95       	lsr	r24
    1a04:	8f 70       	andi	r24, 0x0F	; 15
    1a06:	48 2f       	mov	r20, r24
    1a08:	89 a1       	ldd	r24, Y+33	; 0x21
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	04 96       	adiw	r24, 0x04	; 4
    1a16:	b9 01       	movw	r22, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <HAL_LCD_Send4Bits+0x206>
    1a1a:	75 95       	asr	r23
    1a1c:	67 95       	ror	r22
    1a1e:	8a 95       	dec	r24
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <HAL_LCD_Send4Bits+0x202>
    1a22:	cb 01       	movw	r24, r22
    1a24:	98 2f       	mov	r25, r24
    1a26:	91 70       	andi	r25, 0x01	; 1
    1a28:	85 2f       	mov	r24, r21
    1a2a:	64 2f       	mov	r22, r20
    1a2c:	49 2f       	mov	r20, r25
    1a2e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_SetPinValue>

    /**< Shift the 4-LSB command to the 4-MSB */
    value <<= 4;

    /**< Send the 4-LSB */
    for(uint8_t i = 0; i < 4; i++)
    1a32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a34:	8f 5f       	subi	r24, 0xFF	; 255
    1a36:	8d 8f       	std	Y+29, r24	; 0x1d
    1a38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a3a:	84 30       	cpi	r24, 0x04	; 4
    1a3c:	58 f2       	brcs	.-106    	; 0x19d4 <HAL_LCD_Send4Bits+0x1bc>
    {
    	DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> (4 + i) & 0x01);
    }

    /**< Set the enable pin to high */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_HIGH);
    1a3e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1a40:	f8 a1       	ldd	r31, Y+32	; 0x20
    1a42:	83 85       	ldd	r24, Z+11	; 0x0b
    1a44:	83 70       	andi	r24, 0x03	; 3
    1a46:	28 2f       	mov	r18, r24
    1a48:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1a4a:	f8 a1       	ldd	r31, Y+32	; 0x20
    1a4c:	83 85       	ldd	r24, Z+11	; 0x0b
    1a4e:	86 95       	lsr	r24
    1a50:	86 95       	lsr	r24
    1a52:	8f 70       	andi	r24, 0x0F	; 15
    1a54:	98 2f       	mov	r25, r24
    1a56:	82 2f       	mov	r24, r18
    1a58:	69 2f       	mov	r22, r25
    1a5a:	41 e0       	ldi	r20, 0x01	; 1
    1a5c:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_SetPinValue>
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a0 ea       	ldi	r26, 0xA0	; 160
    1a66:	b0 e4       	ldi	r27, 0x40	; 64
    1a68:	8b 87       	std	Y+11, r24	; 0x0b
    1a6a:	9c 87       	std	Y+12, r25	; 0x0c
    1a6c:	ad 87       	std	Y+13, r26	; 0x0d
    1a6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	4a ef       	ldi	r20, 0xFA	; 250
    1a7e:	54 e4       	ldi	r21, 0x44	; 68
    1a80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	8f 83       	std	Y+7, r24	; 0x07
    1a8a:	98 87       	std	Y+8, r25	; 0x08
    1a8c:	a9 87       	std	Y+9, r26	; 0x09
    1a8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a90:	6f 81       	ldd	r22, Y+7	; 0x07
    1a92:	78 85       	ldd	r23, Y+8	; 0x08
    1a94:	89 85       	ldd	r24, Y+9	; 0x09
    1a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aa4:	88 23       	and	r24, r24
    1aa6:	2c f4       	brge	.+10     	; 0x1ab2 <HAL_LCD_Send4Bits+0x29a>
		__ticks = 1;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	9e 83       	std	Y+6, r25	; 0x06
    1aae:	8d 83       	std	Y+5, r24	; 0x05
    1ab0:	3f c0       	rjmp	.+126    	; 0x1b30 <HAL_LCD_Send4Bits+0x318>
	else if (__tmp > 65535)
    1ab2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab4:	78 85       	ldd	r23, Y+8	; 0x08
    1ab6:	89 85       	ldd	r24, Y+9	; 0x09
    1ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	3f ef       	ldi	r19, 0xFF	; 255
    1abe:	4f e7       	ldi	r20, 0x7F	; 127
    1ac0:	57 e4       	ldi	r21, 0x47	; 71
    1ac2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ac6:	18 16       	cp	r1, r24
    1ac8:	4c f5       	brge	.+82     	; 0x1b1c <HAL_LCD_Send4Bits+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1acc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ace:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e2       	ldi	r20, 0x20	; 32
    1ad8:	51 e4       	ldi	r21, 0x41	; 65
    1ada:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	bc 01       	movw	r22, r24
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	9e 83       	std	Y+6, r25	; 0x06
    1af0:	8d 83       	std	Y+5, r24	; 0x05
    1af2:	0f c0       	rjmp	.+30     	; 0x1b12 <HAL_LCD_Send4Bits+0x2fa>
    1af4:	88 ec       	ldi	r24, 0xC8	; 200
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	9c 83       	std	Y+4, r25	; 0x04
    1afa:	8b 83       	std	Y+3, r24	; 0x03
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <HAL_LCD_Send4Bits+0x2e8>
    1b04:	9c 83       	std	Y+4, r25	; 0x04
    1b06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b08:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	9e 83       	std	Y+6, r25	; 0x06
    1b10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	69 f7       	brne	.-38     	; 0x1af4 <HAL_LCD_Send4Bits+0x2dc>
    1b1a:	14 c0       	rjmp	.+40     	; 0x1b44 <HAL_LCD_Send4Bits+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1e:	78 85       	ldd	r23, Y+8	; 0x08
    1b20:	89 85       	ldd	r24, Y+9	; 0x09
    1b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	8d 83       	std	Y+5, r24	; 0x05
    1b30:	8d 81       	ldd	r24, Y+5	; 0x05
    1b32:	9e 81       	ldd	r25, Y+6	; 0x06
    1b34:	9a 83       	std	Y+2, r25	; 0x02
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <HAL_LCD_Send4Bits+0x324>
    1b40:	9a 83       	std	Y+2, r25	; 0x02
    1b42:	89 83       	std	Y+1, r24	; 0x01
    /**< Set the Pulse time to be 5msec */
    _delay_ms(5);
    /**< Set the enable pin to low */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
    1b44:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1b46:	f8 a1       	ldd	r31, Y+32	; 0x20
    1b48:	83 85       	ldd	r24, Z+11	; 0x0b
    1b4a:	83 70       	andi	r24, 0x03	; 3
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1b50:	f8 a1       	ldd	r31, Y+32	; 0x20
    1b52:	83 85       	ldd	r24, Z+11	; 0x0b
    1b54:	86 95       	lsr	r24
    1b56:	86 95       	lsr	r24
    1b58:	8f 70       	andi	r24, 0x0F	; 15
    1b5a:	98 2f       	mov	r25, r24
    1b5c:	82 2f       	mov	r24, r18
    1b5e:	69 2f       	mov	r22, r25
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_SetPinValue>
}
    1b66:	a1 96       	adiw	r28, 0x21	; 33
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <HAL_LCD_Send8Bits>:

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	62 97       	sbiw	r28, 0x12	; 18
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	99 8b       	std	Y+17, r25	; 0x11
    1b8e:	88 8b       	std	Y+16, r24	; 0x10
    1b90:	6a 8b       	std	Y+18, r22	; 0x12
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
    1b92:	1f 86       	std	Y+15, r1	; 0x0f
    1b94:	31 c0       	rjmp	.+98     	; 0x1bf8 <HAL_LCD_Send8Bits+0x80>
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
    1b96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	88 89       	ldd	r24, Y+16	; 0x10
    1b9e:	99 89       	ldd	r25, Y+17	; 0x11
    1ba0:	82 0f       	add	r24, r18
    1ba2:	93 1f       	adc	r25, r19
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	31 96       	adiw	r30, 0x01	; 1
    1ba8:	80 81       	ld	r24, Z
    1baa:	83 70       	andi	r24, 0x03	; 3
    1bac:	58 2f       	mov	r21, r24
    1bae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	88 89       	ldd	r24, Y+16	; 0x10
    1bb6:	99 89       	ldd	r25, Y+17	; 0x11
    1bb8:	82 0f       	add	r24, r18
    1bba:	93 1f       	adc	r25, r19
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	31 96       	adiw	r30, 0x01	; 1
    1bc0:	80 81       	ld	r24, Z
    1bc2:	86 95       	lsr	r24
    1bc4:	86 95       	lsr	r24
    1bc6:	8f 70       	andi	r24, 0x0F	; 15
    1bc8:	48 2f       	mov	r20, r24
    1bca:	8a 89       	ldd	r24, Y+18	; 0x12
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd2:	88 2f       	mov	r24, r24
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	b9 01       	movw	r22, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <HAL_LCD_Send8Bits+0x66>
    1bda:	75 95       	asr	r23
    1bdc:	67 95       	ror	r22
    1bde:	8a 95       	dec	r24
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <HAL_LCD_Send8Bits+0x62>
    1be2:	cb 01       	movw	r24, r22
    1be4:	98 2f       	mov	r25, r24
    1be6:	91 70       	andi	r25, 0x01	; 1
    1be8:	85 2f       	mov	r24, r21
    1bea:	64 2f       	mov	r22, r20
    1bec:	49 2f       	mov	r20, r25
    1bee:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_SetPinValue>

/*****************************< Private helper function to send 8 bits *****************************/ 
static void HAL_LCD_Send8Bits(const LCD_Config_t *config, uint8_t value) 
{
     /**< Send the 8-Bit */
    for(uint8_t i = 0; i < 8; i++)
    1bf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf4:	8f 5f       	subi	r24, 0xFF	; 255
    1bf6:	8f 87       	std	Y+15, r24	; 0x0f
    1bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bfa:	88 30       	cpi	r24, 0x08	; 8
    1bfc:	60 f2       	brcs	.-104    	; 0x1b96 <HAL_LCD_Send8Bits+0x1e>
    {
        DIO_SetPinValue(config->dataPins[i].LCD_PortId, config->dataPins[i].LCD_PinId, value >> i & 0x01);
    }

    /**< Set the enable pin to high */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_HIGH);
    1bfe:	e8 89       	ldd	r30, Y+16	; 0x10
    1c00:	f9 89       	ldd	r31, Y+17	; 0x11
    1c02:	83 85       	ldd	r24, Z+11	; 0x0b
    1c04:	83 70       	andi	r24, 0x03	; 3
    1c06:	28 2f       	mov	r18, r24
    1c08:	e8 89       	ldd	r30, Y+16	; 0x10
    1c0a:	f9 89       	ldd	r31, Y+17	; 0x11
    1c0c:	83 85       	ldd	r24, Z+11	; 0x0b
    1c0e:	86 95       	lsr	r24
    1c10:	86 95       	lsr	r24
    1c12:	8f 70       	andi	r24, 0x0F	; 15
    1c14:	98 2f       	mov	r25, r24
    1c16:	82 2f       	mov	r24, r18
    1c18:	69 2f       	mov	r22, r25
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_SetPinValue>
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a0 ea       	ldi	r26, 0xA0	; 160
    1c26:	b0 e4       	ldi	r27, 0x40	; 64
    1c28:	8b 87       	std	Y+11, r24	; 0x0b
    1c2a:	9c 87       	std	Y+12, r25	; 0x0c
    1c2c:	ad 87       	std	Y+13, r26	; 0x0d
    1c2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	4a ef       	ldi	r20, 0xFA	; 250
    1c3e:	54 e4       	ldi	r21, 0x44	; 68
    1c40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	8f 83       	std	Y+7, r24	; 0x07
    1c4a:	98 87       	std	Y+8, r25	; 0x08
    1c4c:	a9 87       	std	Y+9, r26	; 0x09
    1c4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c50:	6f 81       	ldd	r22, Y+7	; 0x07
    1c52:	78 85       	ldd	r23, Y+8	; 0x08
    1c54:	89 85       	ldd	r24, Y+9	; 0x09
    1c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e8       	ldi	r20, 0x80	; 128
    1c5e:	5f e3       	ldi	r21, 0x3F	; 63
    1c60:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c64:	88 23       	and	r24, r24
    1c66:	2c f4       	brge	.+10     	; 0x1c72 <HAL_LCD_Send8Bits+0xfa>
		__ticks = 1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9e 83       	std	Y+6, r25	; 0x06
    1c6e:	8d 83       	std	Y+5, r24	; 0x05
    1c70:	3f c0       	rjmp	.+126    	; 0x1cf0 <HAL_LCD_Send8Bits+0x178>
	else if (__tmp > 65535)
    1c72:	6f 81       	ldd	r22, Y+7	; 0x07
    1c74:	78 85       	ldd	r23, Y+8	; 0x08
    1c76:	89 85       	ldd	r24, Y+9	; 0x09
    1c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	3f ef       	ldi	r19, 0xFF	; 255
    1c7e:	4f e7       	ldi	r20, 0x7F	; 127
    1c80:	57 e4       	ldi	r21, 0x47	; 71
    1c82:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c86:	18 16       	cp	r1, r24
    1c88:	4c f5       	brge	.+82     	; 0x1cdc <HAL_LCD_Send8Bits+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e2       	ldi	r20, 0x20	; 32
    1c98:	51 e4       	ldi	r21, 0x41	; 65
    1c9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	cd 01       	movw	r24, r26
    1ca6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	9e 83       	std	Y+6, r25	; 0x06
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
    1cb2:	0f c0       	rjmp	.+30     	; 0x1cd2 <HAL_LCD_Send8Bits+0x15a>
    1cb4:	88 ec       	ldi	r24, 0xC8	; 200
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	9c 83       	std	Y+4, r25	; 0x04
    1cba:	8b 83       	std	Y+3, r24	; 0x03
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <HAL_LCD_Send8Bits+0x148>
    1cc4:	9c 83       	std	Y+4, r25	; 0x04
    1cc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	9e 83       	std	Y+6, r25	; 0x06
    1cd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	69 f7       	brne	.-38     	; 0x1cb4 <HAL_LCD_Send8Bits+0x13c>
    1cda:	14 c0       	rjmp	.+40     	; 0x1d04 <HAL_LCD_Send8Bits+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cde:	78 85       	ldd	r23, Y+8	; 0x08
    1ce0:	89 85       	ldd	r24, Y+9	; 0x09
    1ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	9e 83       	std	Y+6, r25	; 0x06
    1cee:	8d 83       	std	Y+5, r24	; 0x05
    1cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <HAL_LCD_Send8Bits+0x184>
    1d00:	9a 83       	std	Y+2, r25	; 0x02
    1d02:	89 83       	std	Y+1, r24	; 0x01
    /**< Set the Pulse time to be 5msec */
    _delay_ms(5);
    /**< Set the enable pin to low */
    DIO_SetPinValue(config->enablePin.LCD_PortId, config->enablePin.LCD_PinId, DIO_LOW);
    1d04:	e8 89       	ldd	r30, Y+16	; 0x10
    1d06:	f9 89       	ldd	r31, Y+17	; 0x11
    1d08:	83 85       	ldd	r24, Z+11	; 0x0b
    1d0a:	83 70       	andi	r24, 0x03	; 3
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	e8 89       	ldd	r30, Y+16	; 0x10
    1d10:	f9 89       	ldd	r31, Y+17	; 0x11
    1d12:	83 85       	ldd	r24, Z+11	; 0x0b
    1d14:	86 95       	lsr	r24
    1d16:	86 95       	lsr	r24
    1d18:	8f 70       	andi	r24, 0x0F	; 15
    1d1a:	98 2f       	mov	r25, r24
    1d1c:	82 2f       	mov	r24, r18
    1d1e:	69 2f       	mov	r22, r25
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_SetPinValue>
}
    1d26:	62 96       	adiw	r28, 0x12	; 18
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <DIO_vInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
/*****************************< Function Implementations *****************************/
void DIO_vInit(void)
{
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
	/**< Configure the data direction registers (DDRx) */ 
    DIO_DDRA_R = Conc(DIO_PA7_INITIAL_DIRECTION, DIO_PA6_INITIAL_DIRECTION, DIO_PA5_INITIAL_DIRECTION, DIO_PA4_INITIAL_DIRECTION,
    1d40:	ea e3       	ldi	r30, 0x3A	; 58
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	8f ef       	ldi	r24, 0xFF	; 255
    1d46:	80 83       	st	Z, r24
                      DIO_PA3_INITIAL_DIRECTION, DIO_PA2_INITIAL_DIRECTION, DIO_PA1_INITIAL_DIRECTION, DIO_PA0_INITIAL_DIRECTION);

    DIO_DDRB_R = Conc(DIO_PB7_INITIAL_DIRECTION, DIO_PB6_INITIAL_DIRECTION, DIO_PB5_INITIAL_DIRECTION, DIO_PB4_INITIAL_DIRECTION,
    1d48:	e7 e3       	ldi	r30, 0x37	; 55
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	80 83       	st	Z, r24
                      DIO_PB3_INITIAL_DIRECTION, DIO_PB2_INITIAL_DIRECTION, DIO_PB1_INITIAL_DIRECTION, DIO_PB0_INITIAL_DIRECTION);

    DIO_DDRC_R = Conc(DIO_PC7_INITIAL_DIRECTION, DIO_PC6_INITIAL_DIRECTION, DIO_PC5_INITIAL_DIRECTION, DIO_PC4_INITIAL_DIRECTION,
    1d50:	e4 e3       	ldi	r30, 0x34	; 52
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	8f ef       	ldi	r24, 0xFF	; 255
    1d56:	80 83       	st	Z, r24
                      DIO_PC3_INITIAL_DIRECTION, DIO_PC2_INITIAL_DIRECTION, DIO_PC1_INITIAL_DIRECTION, DIO_PC0_INITIAL_DIRECTION);

    DIO_DDRD_R = Conc(DIO_PD7_INITIAL_DIRECTION, DIO_PD6_INITIAL_DIRECTION, DIO_PD5_INITIAL_DIRECTION, DIO_PD4_INITIAL_DIRECTION,
    1d58:	e1 e3       	ldi	r30, 0x31	; 49
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	8f ef       	ldi	r24, 0xFF	; 255
    1d5e:	80 83       	st	Z, r24
                      DIO_PD3_INITIAL_DIRECTION, DIO_PD2_INITIAL_DIRECTION, DIO_PD1_INITIAL_DIRECTION, DIO_PD0_INITIAL_DIRECTION);
    
    /**< Set the initial output values for the ports */
    DIO_PORTA_R = Conc(DIO_PA7_INITIAL_VALUE, DIO_PA6_INITIAL_VALUE, DIO_PA5_INITIAL_VALUE, DIO_PA4_INITIAL_VALUE,
    1d60:	eb e3       	ldi	r30, 0x3B	; 59
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	10 82       	st	Z, r1
                       DIO_PA3_INITIAL_VALUE, DIO_PA2_INITIAL_VALUE, DIO_PA1_INITIAL_VALUE, DIO_PA0_INITIAL_VALUE);

    DIO_PORTB_R = Conc(DIO_PB7_INITIAL_VALUE, DIO_PB6_INITIAL_VALUE, DIO_PB5_INITIAL_VALUE, DIO_PB4_INITIAL_VALUE,
    1d66:	e8 e3       	ldi	r30, 0x38	; 56
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	10 82       	st	Z, r1
                       DIO_PB3_INITIAL_VALUE, DIO_PB2_INITIAL_VALUE, DIO_PB1_INITIAL_VALUE, DIO_PB0_INITIAL_VALUE);

    DIO_PORTC_R = Conc(DIO_PC7_INITIAL_VALUE, DIO_PC6_INITIAL_VALUE, DIO_PC5_INITIAL_VALUE, DIO_PC4_INITIAL_VALUE,
    1d6c:	e5 e3       	ldi	r30, 0x35	; 53
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	10 82       	st	Z, r1
                       DIO_PC3_INITIAL_VALUE, DIO_PC2_INITIAL_VALUE, DIO_PC1_INITIAL_VALUE, DIO_PC0_INITIAL_VALUE);

    DIO_PORTD_R = Conc(DIO_PD7_INITIAL_VALUE, DIO_PD6_INITIAL_VALUE, DIO_PD5_INITIAL_VALUE, DIO_PD4_INITIAL_VALUE,
    1d72:	e2 e3       	ldi	r30, 0x32	; 50
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	10 82       	st	Z, r1
                       DIO_PD3_INITIAL_VALUE, DIO_PD2_INITIAL_VALUE, DIO_PD1_INITIAL_VALUE, DIO_PD0_INITIAL_VALUE);
    
}
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <DIO_SetPinDirection>:

Std_ReturnType DIO_SetPinDirection(u8 PortId, u8 PinId,u8 PinDirection)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	2e 97       	sbiw	r28, 0x0e	; 14
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	8a 83       	std	Y+2, r24	; 0x02
    1d94:	6b 83       	std	Y+3, r22	; 0x03
    1d96:	4c 83       	std	Y+4, r20	; 0x04
	Std_ReturnType Local_FunctionStatus = E_OK;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	89 83       	std	Y+1, r24	; 0x01

	if(((PortId < 4) && (PinId < 8)) && ((PinDirection == DIO_OUTPUT) || (PinDirection == DIO_INPUT)))
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	84 30       	cpi	r24, 0x04	; 4
    1da0:	08 f0       	brcs	.+2      	; 0x1da4 <DIO_SetPinDirection+0x26>
    1da2:	0e c1       	rjmp	.+540    	; 0x1fc0 <DIO_SetPinDirection+0x242>
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	88 30       	cpi	r24, 0x08	; 8
    1da8:	08 f0       	brcs	.+2      	; 0x1dac <DIO_SetPinDirection+0x2e>
    1daa:	0a c1       	rjmp	.+532    	; 0x1fc0 <DIO_SetPinDirection+0x242>
    1dac:	8c 81       	ldd	r24, Y+4	; 0x04
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	21 f0       	breq	.+8      	; 0x1dba <DIO_SetPinDirection+0x3c>
    1db2:	8c 81       	ldd	r24, Y+4	; 0x04
    1db4:	88 23       	and	r24, r24
    1db6:	09 f0       	breq	.+2      	; 0x1dba <DIO_SetPinDirection+0x3c>
    1db8:	03 c1       	rjmp	.+518    	; 0x1fc0 <DIO_SetPinDirection+0x242>
	{
		switch (PortId)
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	3e 87       	std	Y+14, r19	; 0x0e
    1dc2:	2d 87       	std	Y+13, r18	; 0x0d
    1dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	91 05       	cpc	r25, r1
    1dcc:	09 f4       	brne	.+2      	; 0x1dd0 <DIO_SetPinDirection+0x52>
    1dce:	50 c0       	rjmp	.+160    	; 0x1e70 <DIO_SetPinDirection+0xf2>
    1dd0:	2d 85       	ldd	r18, Y+13	; 0x0d
    1dd2:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dd4:	22 30       	cpi	r18, 0x02	; 2
    1dd6:	31 05       	cpc	r19, r1
    1dd8:	2c f4       	brge	.+10     	; 0x1de4 <DIO_SetPinDirection+0x66>
    1dda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	71 f0       	breq	.+28     	; 0x1dfe <DIO_SetPinDirection+0x80>
    1de2:	ef c0       	rjmp	.+478    	; 0x1fc2 <DIO_SetPinDirection+0x244>
    1de4:	2d 85       	ldd	r18, Y+13	; 0x0d
    1de6:	3e 85       	ldd	r19, Y+14	; 0x0e
    1de8:	22 30       	cpi	r18, 0x02	; 2
    1dea:	31 05       	cpc	r19, r1
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <DIO_SetPinDirection+0x72>
    1dee:	79 c0       	rjmp	.+242    	; 0x1ee2 <DIO_SetPinDirection+0x164>
    1df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df4:	83 30       	cpi	r24, 0x03	; 3
    1df6:	91 05       	cpc	r25, r1
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <DIO_SetPinDirection+0x7e>
    1dfa:	ab c0       	rjmp	.+342    	; 0x1f52 <DIO_SetPinDirection+0x1d4>
    1dfc:	e2 c0       	rjmp	.+452    	; 0x1fc2 <DIO_SetPinDirection+0x244>
		{
			case DIO_PORTA:
				switch (PinDirection)
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	3c 87       	std	Y+12, r19	; 0x0c
    1e06:	2b 87       	std	Y+11, r18	; 0x0b
    1e08:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	c9 f0       	breq	.+50     	; 0x1e42 <DIO_SetPinDirection+0xc4>
    1e10:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e12:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e14:	21 30       	cpi	r18, 0x01	; 1
    1e16:	31 05       	cpc	r19, r1
    1e18:	49 f5       	brne	.+82     	; 0x1e6c <DIO_SetPinDirection+0xee>
				{
					case DIO_OUTPUT: SET_BIT(DIO_DDRA_R, PinId);break;
    1e1a:	aa e3       	ldi	r26, 0x3A	; 58
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	ea e3       	ldi	r30, 0x3A	; 58
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	48 2f       	mov	r20, r24
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	02 2e       	mov	r0, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <DIO_SetPinDirection+0xba>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <DIO_SetPinDirection+0xb6>
    1e3c:	84 2b       	or	r24, r20
    1e3e:	8c 93       	st	X, r24
    1e40:	c0 c0       	rjmp	.+384    	; 0x1fc2 <DIO_SetPinDirection+0x244>
					case DIO_INPUT : CLR_BIT(DIO_DDRA_R, PinId);break;
    1e42:	aa e3       	ldi	r26, 0x3A	; 58
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	ea e3       	ldi	r30, 0x3A	; 58
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	48 2f       	mov	r20, r24
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	02 2e       	mov	r0, r18
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <DIO_SetPinDirection+0xe2>
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	0a 94       	dec	r0
    1e62:	e2 f7       	brpl	.-8      	; 0x1e5c <DIO_SetPinDirection+0xde>
    1e64:	80 95       	com	r24
    1e66:	84 23       	and	r24, r20
    1e68:	8c 93       	st	X, r24
    1e6a:	ab c0       	rjmp	.+342    	; 0x1fc2 <DIO_SetPinDirection+0x244>
					default : Local_FunctionStatus = E_NOT_OK;
    1e6c:	19 82       	std	Y+1, r1	; 0x01
    1e6e:	a9 c0       	rjmp	.+338    	; 0x1fc2 <DIO_SetPinDirection+0x244>
				}
				break;
			case DIO_PORTB:
				switch (PinDirection)
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	3a 87       	std	Y+10, r19	; 0x0a
    1e78:	29 87       	std	Y+9, r18	; 0x09
    1e7a:	89 85       	ldd	r24, Y+9	; 0x09
    1e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	c9 f0       	breq	.+50     	; 0x1eb4 <DIO_SetPinDirection+0x136>
    1e82:	29 85       	ldd	r18, Y+9	; 0x09
    1e84:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e86:	21 30       	cpi	r18, 0x01	; 1
    1e88:	31 05       	cpc	r19, r1
    1e8a:	49 f5       	brne	.+82     	; 0x1ede <DIO_SetPinDirection+0x160>
				{
					case DIO_OUTPUT:SET_BIT(DIO_DDRB_R, PinId);break;
    1e8c:	a7 e3       	ldi	r26, 0x37	; 55
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e7 e3       	ldi	r30, 0x37	; 55
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	48 2f       	mov	r20, r24
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	02 2e       	mov	r0, r18
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <DIO_SetPinDirection+0x12c>
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	0a 94       	dec	r0
    1eac:	e2 f7       	brpl	.-8      	; 0x1ea6 <DIO_SetPinDirection+0x128>
    1eae:	84 2b       	or	r24, r20
    1eb0:	8c 93       	st	X, r24
    1eb2:	87 c0       	rjmp	.+270    	; 0x1fc2 <DIO_SetPinDirection+0x244>
					case DIO_INPUT :CLR_BIT(DIO_DDRB_R, PinId);break;
    1eb4:	a7 e3       	ldi	r26, 0x37	; 55
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e7 e3       	ldi	r30, 0x37	; 55
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	48 2f       	mov	r20, r24
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	02 2e       	mov	r0, r18
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <DIO_SetPinDirection+0x154>
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	0a 94       	dec	r0
    1ed4:	e2 f7       	brpl	.-8      	; 0x1ece <DIO_SetPinDirection+0x150>
    1ed6:	80 95       	com	r24
    1ed8:	84 23       	and	r24, r20
    1eda:	8c 93       	st	X, r24
    1edc:	72 c0       	rjmp	.+228    	; 0x1fc2 <DIO_SetPinDirection+0x244>
					default : Local_FunctionStatus = E_NOT_OK;
    1ede:	19 82       	std	Y+1, r1	; 0x01
    1ee0:	70 c0       	rjmp	.+224    	; 0x1fc2 <DIO_SetPinDirection+0x244>
				}
				break;
			case DIO_PORTC:
				switch (PinDirection)
    1ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	38 87       	std	Y+8, r19	; 0x08
    1eea:	2f 83       	std	Y+7, r18	; 0x07
    1eec:	8f 81       	ldd	r24, Y+7	; 0x07
    1eee:	98 85       	ldd	r25, Y+8	; 0x08
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	d1 f0       	breq	.+52     	; 0x1f28 <DIO_SetPinDirection+0x1aa>
    1ef4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ef6:	38 85       	ldd	r19, Y+8	; 0x08
    1ef8:	21 30       	cpi	r18, 0x01	; 1
    1efa:	31 05       	cpc	r19, r1
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <DIO_SetPinDirection+0x182>
    1efe:	61 c0       	rjmp	.+194    	; 0x1fc2 <DIO_SetPinDirection+0x244>
				{
					case DIO_OUTPUT:SET_BIT(DIO_DDRC_R, PinId);break;
    1f00:	a4 e3       	ldi	r26, 0x34	; 52
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e4 e3       	ldi	r30, 0x34	; 52
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	48 2f       	mov	r20, r24
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	02 2e       	mov	r0, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <DIO_SetPinDirection+0x1a0>
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	0a 94       	dec	r0
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <DIO_SetPinDirection+0x19c>
    1f22:	84 2b       	or	r24, r20
    1f24:	8c 93       	st	X, r24
    1f26:	4d c0       	rjmp	.+154    	; 0x1fc2 <DIO_SetPinDirection+0x244>
					case DIO_INPUT :CLR_BIT(DIO_DDRC_R, PinId);break;
    1f28:	a4 e3       	ldi	r26, 0x34	; 52
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e4 e3       	ldi	r30, 0x34	; 52
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	48 2f       	mov	r20, r24
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	02 2e       	mov	r0, r18
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <DIO_SetPinDirection+0x1c8>
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	0a 94       	dec	r0
    1f48:	e2 f7       	brpl	.-8      	; 0x1f42 <DIO_SetPinDirection+0x1c4>
    1f4a:	80 95       	com	r24
    1f4c:	84 23       	and	r24, r20
    1f4e:	8c 93       	st	X, r24
    1f50:	38 c0       	rjmp	.+112    	; 0x1fc2 <DIO_SetPinDirection+0x244>
					Local_FunctionStatus = E_NOT_OK;
				}
				break;
			case DIO_PORTD:
				switch (PinDirection)
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	3e 83       	std	Y+6, r19	; 0x06
    1f5a:	2d 83       	std	Y+5, r18	; 0x05
    1f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	c9 f0       	breq	.+50     	; 0x1f96 <DIO_SetPinDirection+0x218>
    1f64:	2d 81       	ldd	r18, Y+5	; 0x05
    1f66:	3e 81       	ldd	r19, Y+6	; 0x06
    1f68:	21 30       	cpi	r18, 0x01	; 1
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	51 f5       	brne	.+84     	; 0x1fc2 <DIO_SetPinDirection+0x244>
				{
					case DIO_OUTPUT:SET_BIT(DIO_DDRD_R, PinId);break;
    1f6e:	a1 e3       	ldi	r26, 0x31	; 49
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e1 e3       	ldi	r30, 0x31	; 49
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	48 2f       	mov	r20, r24
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	02 2e       	mov	r0, r18
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <DIO_SetPinDirection+0x20e>
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	0a 94       	dec	r0
    1f8e:	e2 f7       	brpl	.-8      	; 0x1f88 <DIO_SetPinDirection+0x20a>
    1f90:	84 2b       	or	r24, r20
    1f92:	8c 93       	st	X, r24
    1f94:	16 c0       	rjmp	.+44     	; 0x1fc2 <DIO_SetPinDirection+0x244>
					case DIO_INPUT :CLR_BIT(DIO_DDRD_R, PinId);break;
    1f96:	a1 e3       	ldi	r26, 0x31	; 49
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e1 e3       	ldi	r30, 0x31	; 49
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	48 2f       	mov	r20, r24
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	02 2e       	mov	r0, r18
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <DIO_SetPinDirection+0x236>
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	0a 94       	dec	r0
    1fb6:	e2 f7       	brpl	.-8      	; 0x1fb0 <DIO_SetPinDirection+0x232>
    1fb8:	80 95       	com	r24
    1fba:	84 23       	and	r24, r20
    1fbc:	8c 93       	st	X, r24
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <DIO_SetPinDirection+0x244>
				break;
		}
	}
	else
	{
		Local_FunctionStatus = E_NOT_OK;
    1fc0:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_FunctionStatus;
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1fc4:	2e 96       	adiw	r28, 0x0e	; 14
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <DIO_SetPinValue>:

Std_ReturnType DIO_SetPinValue(u8 PortId, u8 PinId,u8 PinValue)
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	2e 97       	sbiw	r28, 0x0e	; 14
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	8a 83       	std	Y+2, r24	; 0x02
    1fec:	6b 83       	std	Y+3, r22	; 0x03
    1fee:	4c 83       	std	Y+4, r20	; 0x04
	Std_ReturnType Local_FunctionStatus = E_OK;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	89 83       	std	Y+1, r24	; 0x01

	if(PinId < 8)
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	88 30       	cpi	r24, 0x08	; 8
    1ff8:	08 f0       	brcs	.+2      	; 0x1ffc <DIO_SetPinValue+0x26>
    1ffa:	08 c1       	rjmp	.+528    	; 0x220c <DIO_SetPinValue+0x236>
	{
		switch (PortId)
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	3e 87       	std	Y+14, r19	; 0x0e
    2004:	2d 87       	std	Y+13, r18	; 0x0d
    2006:	8d 85       	ldd	r24, Y+13	; 0x0d
    2008:	9e 85       	ldd	r25, Y+14	; 0x0e
    200a:	81 30       	cpi	r24, 0x01	; 1
    200c:	91 05       	cpc	r25, r1
    200e:	09 f4       	brne	.+2      	; 0x2012 <DIO_SetPinValue+0x3c>
    2010:	50 c0       	rjmp	.+160    	; 0x20b2 <DIO_SetPinValue+0xdc>
    2012:	2d 85       	ldd	r18, Y+13	; 0x0d
    2014:	3e 85       	ldd	r19, Y+14	; 0x0e
    2016:	22 30       	cpi	r18, 0x02	; 2
    2018:	31 05       	cpc	r19, r1
    201a:	2c f4       	brge	.+10     	; 0x2026 <DIO_SetPinValue+0x50>
    201c:	8d 85       	ldd	r24, Y+13	; 0x0d
    201e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	71 f0       	breq	.+28     	; 0x2040 <DIO_SetPinValue+0x6a>
    2024:	f1 c0       	rjmp	.+482    	; 0x2208 <DIO_SetPinValue+0x232>
    2026:	2d 85       	ldd	r18, Y+13	; 0x0d
    2028:	3e 85       	ldd	r19, Y+14	; 0x0e
    202a:	22 30       	cpi	r18, 0x02	; 2
    202c:	31 05       	cpc	r19, r1
    202e:	09 f4       	brne	.+2      	; 0x2032 <DIO_SetPinValue+0x5c>
    2030:	79 c0       	rjmp	.+242    	; 0x2124 <DIO_SetPinValue+0x14e>
    2032:	8d 85       	ldd	r24, Y+13	; 0x0d
    2034:	9e 85       	ldd	r25, Y+14	; 0x0e
    2036:	83 30       	cpi	r24, 0x03	; 3
    2038:	91 05       	cpc	r25, r1
    203a:	09 f4       	brne	.+2      	; 0x203e <DIO_SetPinValue+0x68>
    203c:	ac c0       	rjmp	.+344    	; 0x2196 <DIO_SetPinValue+0x1c0>
    203e:	e4 c0       	rjmp	.+456    	; 0x2208 <DIO_SetPinValue+0x232>
		{
			case DIO_PORTA:
				switch(PinValue)
    2040:	8c 81       	ldd	r24, Y+4	; 0x04
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	3c 87       	std	Y+12, r19	; 0x0c
    2048:	2b 87       	std	Y+11, r18	; 0x0b
    204a:	8b 85       	ldd	r24, Y+11	; 0x0b
    204c:	9c 85       	ldd	r25, Y+12	; 0x0c
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	c9 f0       	breq	.+50     	; 0x2084 <DIO_SetPinValue+0xae>
    2052:	2b 85       	ldd	r18, Y+11	; 0x0b
    2054:	3c 85       	ldd	r19, Y+12	; 0x0c
    2056:	21 30       	cpi	r18, 0x01	; 1
    2058:	31 05       	cpc	r19, r1
    205a:	49 f5       	brne	.+82     	; 0x20ae <DIO_SetPinValue+0xd8>
				{	
					case DIO_HIGH: SET_BIT(DIO_PORTA_R, PinId);break;
    205c:	ab e3       	ldi	r26, 0x3B	; 59
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	eb e3       	ldi	r30, 0x3B	; 59
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	48 2f       	mov	r20, r24
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	02 2e       	mov	r0, r18
    2074:	02 c0       	rjmp	.+4      	; 0x207a <DIO_SetPinValue+0xa4>
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	0a 94       	dec	r0
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <DIO_SetPinValue+0xa0>
    207e:	84 2b       	or	r24, r20
    2080:	8c 93       	st	X, r24
    2082:	c5 c0       	rjmp	.+394    	; 0x220e <DIO_SetPinValue+0x238>
					case DIO_LOW : CLR_BIT(DIO_PORTA_R, PinId);break;
    2084:	ab e3       	ldi	r26, 0x3B	; 59
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	eb e3       	ldi	r30, 0x3B	; 59
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	48 2f       	mov	r20, r24
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	28 2f       	mov	r18, r24
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	02 2e       	mov	r0, r18
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <DIO_SetPinValue+0xcc>
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	0a 94       	dec	r0
    20a4:	e2 f7       	brpl	.-8      	; 0x209e <DIO_SetPinValue+0xc8>
    20a6:	80 95       	com	r24
    20a8:	84 23       	and	r24, r20
    20aa:	8c 93       	st	X, r24
    20ac:	b0 c0       	rjmp	.+352    	; 0x220e <DIO_SetPinValue+0x238>
					default: Local_FunctionStatus = E_NOT_OK;
    20ae:	19 82       	std	Y+1, r1	; 0x01
    20b0:	ae c0       	rjmp	.+348    	; 0x220e <DIO_SetPinValue+0x238>
				}
				break;
			case DIO_PORTB:
				switch(PinValue)
    20b2:	8c 81       	ldd	r24, Y+4	; 0x04
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	3a 87       	std	Y+10, r19	; 0x0a
    20ba:	29 87       	std	Y+9, r18	; 0x09
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	c9 f0       	breq	.+50     	; 0x20f6 <DIO_SetPinValue+0x120>
    20c4:	29 85       	ldd	r18, Y+9	; 0x09
    20c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    20c8:	21 30       	cpi	r18, 0x01	; 1
    20ca:	31 05       	cpc	r19, r1
    20cc:	49 f5       	brne	.+82     	; 0x2120 <DIO_SetPinValue+0x14a>
				{
					case DIO_HIGH: SET_BIT(DIO_PORTB_R, PinId);break;
    20ce:	a8 e3       	ldi	r26, 0x38	; 56
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e8 e3       	ldi	r30, 0x38	; 56
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	48 2f       	mov	r20, r24
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	02 2e       	mov	r0, r18
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <DIO_SetPinValue+0x116>
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	0a 94       	dec	r0
    20ee:	e2 f7       	brpl	.-8      	; 0x20e8 <DIO_SetPinValue+0x112>
    20f0:	84 2b       	or	r24, r20
    20f2:	8c 93       	st	X, r24
    20f4:	8c c0       	rjmp	.+280    	; 0x220e <DIO_SetPinValue+0x238>
					case DIO_LOW : CLR_BIT(DIO_PORTB_R, PinId);break;
    20f6:	a8 e3       	ldi	r26, 0x38	; 56
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e8 e3       	ldi	r30, 0x38	; 56
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	48 2f       	mov	r20, r24
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	28 2f       	mov	r18, r24
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	02 2e       	mov	r0, r18
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <DIO_SetPinValue+0x13e>
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	0a 94       	dec	r0
    2116:	e2 f7       	brpl	.-8      	; 0x2110 <DIO_SetPinValue+0x13a>
    2118:	80 95       	com	r24
    211a:	84 23       	and	r24, r20
    211c:	8c 93       	st	X, r24
    211e:	77 c0       	rjmp	.+238    	; 0x220e <DIO_SetPinValue+0x238>
					default: Local_FunctionStatus = E_NOT_OK;
    2120:	19 82       	std	Y+1, r1	; 0x01
    2122:	75 c0       	rjmp	.+234    	; 0x220e <DIO_SetPinValue+0x238>
				}
				break;
			case DIO_PORTC:
				switch(PinValue)
    2124:	8c 81       	ldd	r24, Y+4	; 0x04
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	38 87       	std	Y+8, r19	; 0x08
    212c:	2f 83       	std	Y+7, r18	; 0x07
    212e:	8f 81       	ldd	r24, Y+7	; 0x07
    2130:	98 85       	ldd	r25, Y+8	; 0x08
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	c9 f0       	breq	.+50     	; 0x2168 <DIO_SetPinValue+0x192>
    2136:	2f 81       	ldd	r18, Y+7	; 0x07
    2138:	38 85       	ldd	r19, Y+8	; 0x08
    213a:	21 30       	cpi	r18, 0x01	; 1
    213c:	31 05       	cpc	r19, r1
    213e:	49 f5       	brne	.+82     	; 0x2192 <DIO_SetPinValue+0x1bc>
				{
					case DIO_HIGH: SET_BIT(DIO_PORTC_R, PinId);break;
    2140:	a5 e3       	ldi	r26, 0x35	; 53
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e5 e3       	ldi	r30, 0x35	; 53
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	48 2f       	mov	r20, r24
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	02 2e       	mov	r0, r18
    2158:	02 c0       	rjmp	.+4      	; 0x215e <DIO_SetPinValue+0x188>
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	0a 94       	dec	r0
    2160:	e2 f7       	brpl	.-8      	; 0x215a <DIO_SetPinValue+0x184>
    2162:	84 2b       	or	r24, r20
    2164:	8c 93       	st	X, r24
    2166:	53 c0       	rjmp	.+166    	; 0x220e <DIO_SetPinValue+0x238>
					case DIO_LOW : CLR_BIT(DIO_PORTC_R, PinId);break;
    2168:	a5 e3       	ldi	r26, 0x35	; 53
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e5 e3       	ldi	r30, 0x35	; 53
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	48 2f       	mov	r20, r24
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	28 2f       	mov	r18, r24
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	02 2e       	mov	r0, r18
    2180:	02 c0       	rjmp	.+4      	; 0x2186 <DIO_SetPinValue+0x1b0>
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	0a 94       	dec	r0
    2188:	e2 f7       	brpl	.-8      	; 0x2182 <DIO_SetPinValue+0x1ac>
    218a:	80 95       	com	r24
    218c:	84 23       	and	r24, r20
    218e:	8c 93       	st	X, r24
    2190:	3e c0       	rjmp	.+124    	; 0x220e <DIO_SetPinValue+0x238>
					default: Local_FunctionStatus = E_NOT_OK;
    2192:	19 82       	std	Y+1, r1	; 0x01
    2194:	3c c0       	rjmp	.+120    	; 0x220e <DIO_SetPinValue+0x238>
				}
				break;
			case DIO_PORTD:
				switch(PinValue)
    2196:	8c 81       	ldd	r24, Y+4	; 0x04
    2198:	28 2f       	mov	r18, r24
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	3e 83       	std	Y+6, r19	; 0x06
    219e:	2d 83       	std	Y+5, r18	; 0x05
    21a0:	8d 81       	ldd	r24, Y+5	; 0x05
    21a2:	9e 81       	ldd	r25, Y+6	; 0x06
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	c9 f0       	breq	.+50     	; 0x21da <DIO_SetPinValue+0x204>
    21a8:	2d 81       	ldd	r18, Y+5	; 0x05
    21aa:	3e 81       	ldd	r19, Y+6	; 0x06
    21ac:	21 30       	cpi	r18, 0x01	; 1
    21ae:	31 05       	cpc	r19, r1
    21b0:	49 f5       	brne	.+82     	; 0x2204 <DIO_SetPinValue+0x22e>
				{
					case DIO_HIGH: SET_BIT(DIO_PORTD_R, PinId);break;
    21b2:	a2 e3       	ldi	r26, 0x32	; 50
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e2 e3       	ldi	r30, 0x32	; 50
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	48 2f       	mov	r20, r24
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	28 2f       	mov	r18, r24
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	02 2e       	mov	r0, r18
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <DIO_SetPinValue+0x1fa>
    21cc:	88 0f       	add	r24, r24
    21ce:	99 1f       	adc	r25, r25
    21d0:	0a 94       	dec	r0
    21d2:	e2 f7       	brpl	.-8      	; 0x21cc <DIO_SetPinValue+0x1f6>
    21d4:	84 2b       	or	r24, r20
    21d6:	8c 93       	st	X, r24
    21d8:	1a c0       	rjmp	.+52     	; 0x220e <DIO_SetPinValue+0x238>
					case DIO_LOW : CLR_BIT(DIO_PORTD_R, PinId);break;
    21da:	a2 e3       	ldi	r26, 0x32	; 50
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e2 e3       	ldi	r30, 0x32	; 50
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	48 2f       	mov	r20, r24
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	02 2e       	mov	r0, r18
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <DIO_SetPinValue+0x222>
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	0a 94       	dec	r0
    21fa:	e2 f7       	brpl	.-8      	; 0x21f4 <DIO_SetPinValue+0x21e>
    21fc:	80 95       	com	r24
    21fe:	84 23       	and	r24, r20
    2200:	8c 93       	st	X, r24
    2202:	05 c0       	rjmp	.+10     	; 0x220e <DIO_SetPinValue+0x238>
					default: Local_FunctionStatus = E_NOT_OK;
    2204:	19 82       	std	Y+1, r1	; 0x01
    2206:	03 c0       	rjmp	.+6      	; 0x220e <DIO_SetPinValue+0x238>
				}
				break;
			default:
				Local_FunctionStatus = E_NOT_OK;
    2208:	19 82       	std	Y+1, r1	; 0x01
    220a:	01 c0       	rjmp	.+2      	; 0x220e <DIO_SetPinValue+0x238>
				break;
		}
	}
	else
	{
		Local_FunctionStatus = E_NOT_OK;
    220c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_FunctionStatus;
    220e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2210:	2e 96       	adiw	r28, 0x0e	; 14
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <DIO_GetPinValue>:

Std_ReturnType DIO_GetPinValue(u8 PortId, u8 PinId,u8 *ReturnedPinValue)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	27 97       	sbiw	r28, 0x07	; 7
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	8a 83       	std	Y+2, r24	; 0x02
    2238:	6b 83       	std	Y+3, r22	; 0x03
    223a:	5d 83       	std	Y+5, r21	; 0x05
    223c:	4c 83       	std	Y+4, r20	; 0x04
	Std_ReturnType Local_FunctionStatus = E_OK;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	89 83       	std	Y+1, r24	; 0x01

	if((PortId < 8) && (NULL != ReturnedPinValue))
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	88 30       	cpi	r24, 0x08	; 8
    2246:	08 f0       	brcs	.+2      	; 0x224a <DIO_GetPinValue+0x28>
    2248:	de c0       	rjmp	.+444    	; 0x2406 <DIO_GetPinValue+0x1e4>
    224a:	8c 81       	ldd	r24, Y+4	; 0x04
    224c:	9d 81       	ldd	r25, Y+5	; 0x05
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	09 f4       	brne	.+2      	; 0x2254 <DIO_GetPinValue+0x32>
    2252:	d9 c0       	rjmp	.+434    	; 0x2406 <DIO_GetPinValue+0x1e4>
	{
		switch (PortId)
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	3f 83       	std	Y+7, r19	; 0x07
    225c:	2e 83       	std	Y+6, r18	; 0x06
    225e:	4e 81       	ldd	r20, Y+6	; 0x06
    2260:	5f 81       	ldd	r21, Y+7	; 0x07
    2262:	41 30       	cpi	r20, 0x01	; 1
    2264:	51 05       	cpc	r21, r1
    2266:	09 f4       	brne	.+2      	; 0x226a <DIO_GetPinValue+0x48>
    2268:	45 c0       	rjmp	.+138    	; 0x22f4 <DIO_GetPinValue+0xd2>
    226a:	8e 81       	ldd	r24, Y+6	; 0x06
    226c:	9f 81       	ldd	r25, Y+7	; 0x07
    226e:	82 30       	cpi	r24, 0x02	; 2
    2270:	91 05       	cpc	r25, r1
    2272:	34 f4       	brge	.+12     	; 0x2280 <DIO_GetPinValue+0x5e>
    2274:	2e 81       	ldd	r18, Y+6	; 0x06
    2276:	3f 81       	ldd	r19, Y+7	; 0x07
    2278:	21 15       	cp	r18, r1
    227a:	31 05       	cpc	r19, r1
    227c:	71 f0       	breq	.+28     	; 0x229a <DIO_GetPinValue+0x78>
    227e:	c1 c0       	rjmp	.+386    	; 0x2402 <DIO_GetPinValue+0x1e0>
    2280:	4e 81       	ldd	r20, Y+6	; 0x06
    2282:	5f 81       	ldd	r21, Y+7	; 0x07
    2284:	42 30       	cpi	r20, 0x02	; 2
    2286:	51 05       	cpc	r21, r1
    2288:	09 f4       	brne	.+2      	; 0x228c <DIO_GetPinValue+0x6a>
    228a:	61 c0       	rjmp	.+194    	; 0x234e <DIO_GetPinValue+0x12c>
    228c:	8e 81       	ldd	r24, Y+6	; 0x06
    228e:	9f 81       	ldd	r25, Y+7	; 0x07
    2290:	83 30       	cpi	r24, 0x03	; 3
    2292:	91 05       	cpc	r25, r1
    2294:	09 f4       	brne	.+2      	; 0x2298 <DIO_GetPinValue+0x76>
    2296:	88 c0       	rjmp	.+272    	; 0x23a8 <DIO_GetPinValue+0x186>
    2298:	b4 c0       	rjmp	.+360    	; 0x2402 <DIO_GetPinValue+0x1e0>
		{
			case DIO_PORTA: *ReturnedPinValue = GET_BIT(DIO_PINA_R, PinId);
    229a:	e9 e3       	ldi	r30, 0x39	; 57
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	48 2f       	mov	r20, r24
    22a2:	50 e0       	ldi	r21, 0x00	; 0
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <DIO_GetPinValue+0x92>
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	2a 95       	dec	r18
    22b6:	e2 f7       	brpl	.-8      	; 0x22b0 <DIO_GetPinValue+0x8e>
    22b8:	9a 01       	movw	r18, r20
    22ba:	28 23       	and	r18, r24
    22bc:	39 23       	and	r19, r25
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	a9 01       	movw	r20, r18
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <DIO_GetPinValue+0xaa>
    22c8:	55 95       	asr	r21
    22ca:	47 95       	ror	r20
    22cc:	8a 95       	dec	r24
    22ce:	e2 f7       	brpl	.-8      	; 0x22c8 <DIO_GetPinValue+0xa6>
    22d0:	ca 01       	movw	r24, r20
    22d2:	ec 81       	ldd	r30, Y+4	; 0x04
    22d4:	fd 81       	ldd	r31, Y+5	; 0x05
    22d6:	80 83       	st	Z, r24
				if(*ReturnedPinValue == 0)
    22d8:	ec 81       	ldd	r30, Y+4	; 0x04
    22da:	fd 81       	ldd	r31, Y+5	; 0x05
    22dc:	80 81       	ld	r24, Z
    22de:	88 23       	and	r24, r24
    22e0:	21 f4       	brne	.+8      	; 0x22ea <DIO_GetPinValue+0xc8>
				{
					*ReturnedPinValue = DIO_LOW;
    22e2:	ec 81       	ldd	r30, Y+4	; 0x04
    22e4:	fd 81       	ldd	r31, Y+5	; 0x05
    22e6:	10 82       	st	Z, r1
    22e8:	8f c0       	rjmp	.+286    	; 0x2408 <DIO_GetPinValue+0x1e6>
				}
				else
				{
					*ReturnedPinValue = DIO_HIGH;
    22ea:	ec 81       	ldd	r30, Y+4	; 0x04
    22ec:	fd 81       	ldd	r31, Y+5	; 0x05
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	80 83       	st	Z, r24
    22f2:	8a c0       	rjmp	.+276    	; 0x2408 <DIO_GetPinValue+0x1e6>
				}
				break;
			case DIO_PORTB: *ReturnedPinValue = GET_BIT(DIO_PINB_R, PinId);
    22f4:	e6 e3       	ldi	r30, 0x36	; 54
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	48 2f       	mov	r20, r24
    22fc:	50 e0       	ldi	r21, 0x00	; 0
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	02 c0       	rjmp	.+4      	; 0x230e <DIO_GetPinValue+0xec>
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	2a 95       	dec	r18
    2310:	e2 f7       	brpl	.-8      	; 0x230a <DIO_GetPinValue+0xe8>
    2312:	9a 01       	movw	r18, r20
    2314:	28 23       	and	r18, r24
    2316:	39 23       	and	r19, r25
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	88 2f       	mov	r24, r24
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	a9 01       	movw	r20, r18
    2320:	02 c0       	rjmp	.+4      	; 0x2326 <DIO_GetPinValue+0x104>
    2322:	55 95       	asr	r21
    2324:	47 95       	ror	r20
    2326:	8a 95       	dec	r24
    2328:	e2 f7       	brpl	.-8      	; 0x2322 <DIO_GetPinValue+0x100>
    232a:	ca 01       	movw	r24, r20
    232c:	ec 81       	ldd	r30, Y+4	; 0x04
    232e:	fd 81       	ldd	r31, Y+5	; 0x05
    2330:	80 83       	st	Z, r24
				if(*ReturnedPinValue == 0)
    2332:	ec 81       	ldd	r30, Y+4	; 0x04
    2334:	fd 81       	ldd	r31, Y+5	; 0x05
    2336:	80 81       	ld	r24, Z
    2338:	88 23       	and	r24, r24
    233a:	21 f4       	brne	.+8      	; 0x2344 <DIO_GetPinValue+0x122>
				{
					*ReturnedPinValue = DIO_LOW;
    233c:	ec 81       	ldd	r30, Y+4	; 0x04
    233e:	fd 81       	ldd	r31, Y+5	; 0x05
    2340:	10 82       	st	Z, r1
    2342:	62 c0       	rjmp	.+196    	; 0x2408 <DIO_GetPinValue+0x1e6>
				}
				else
				{
					*ReturnedPinValue = DIO_HIGH;
    2344:	ec 81       	ldd	r30, Y+4	; 0x04
    2346:	fd 81       	ldd	r31, Y+5	; 0x05
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	80 83       	st	Z, r24
    234c:	5d c0       	rjmp	.+186    	; 0x2408 <DIO_GetPinValue+0x1e6>
				}
				break;
			case DIO_PORTC: *ReturnedPinValue = GET_BIT(DIO_PINC_R, PinId);
    234e:	e3 e3       	ldi	r30, 0x33	; 51
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	48 2f       	mov	r20, r24
    2356:	50 e0       	ldi	r21, 0x00	; 0
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <DIO_GetPinValue+0x146>
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	2a 95       	dec	r18
    236a:	e2 f7       	brpl	.-8      	; 0x2364 <DIO_GetPinValue+0x142>
    236c:	9a 01       	movw	r18, r20
    236e:	28 23       	and	r18, r24
    2370:	39 23       	and	r19, r25
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	88 2f       	mov	r24, r24
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a9 01       	movw	r20, r18
    237a:	02 c0       	rjmp	.+4      	; 0x2380 <DIO_GetPinValue+0x15e>
    237c:	55 95       	asr	r21
    237e:	47 95       	ror	r20
    2380:	8a 95       	dec	r24
    2382:	e2 f7       	brpl	.-8      	; 0x237c <DIO_GetPinValue+0x15a>
    2384:	ca 01       	movw	r24, r20
    2386:	ec 81       	ldd	r30, Y+4	; 0x04
    2388:	fd 81       	ldd	r31, Y+5	; 0x05
    238a:	80 83       	st	Z, r24
				if(*ReturnedPinValue == 0)
    238c:	ec 81       	ldd	r30, Y+4	; 0x04
    238e:	fd 81       	ldd	r31, Y+5	; 0x05
    2390:	80 81       	ld	r24, Z
    2392:	88 23       	and	r24, r24
    2394:	21 f4       	brne	.+8      	; 0x239e <DIO_GetPinValue+0x17c>
				{
					*ReturnedPinValue = DIO_LOW;
    2396:	ec 81       	ldd	r30, Y+4	; 0x04
    2398:	fd 81       	ldd	r31, Y+5	; 0x05
    239a:	10 82       	st	Z, r1
    239c:	35 c0       	rjmp	.+106    	; 0x2408 <DIO_GetPinValue+0x1e6>
				}
				else
				{
					*ReturnedPinValue = DIO_HIGH;
    239e:	ec 81       	ldd	r30, Y+4	; 0x04
    23a0:	fd 81       	ldd	r31, Y+5	; 0x05
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	80 83       	st	Z, r24
    23a6:	30 c0       	rjmp	.+96     	; 0x2408 <DIO_GetPinValue+0x1e6>
				}
				break;
			case DIO_PORTD: *ReturnedPinValue = GET_BIT(DIO_PIND_R, PinId);
    23a8:	e0 e3       	ldi	r30, 0x30	; 48
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	48 2f       	mov	r20, r24
    23b0:	50 e0       	ldi	r21, 0x00	; 0
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	28 2f       	mov	r18, r24
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <DIO_GetPinValue+0x1a0>
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	2a 95       	dec	r18
    23c4:	e2 f7       	brpl	.-8      	; 0x23be <DIO_GetPinValue+0x19c>
    23c6:	9a 01       	movw	r18, r20
    23c8:	28 23       	and	r18, r24
    23ca:	39 23       	and	r19, r25
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	a9 01       	movw	r20, r18
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <DIO_GetPinValue+0x1b8>
    23d6:	55 95       	asr	r21
    23d8:	47 95       	ror	r20
    23da:	8a 95       	dec	r24
    23dc:	e2 f7       	brpl	.-8      	; 0x23d6 <DIO_GetPinValue+0x1b4>
    23de:	ca 01       	movw	r24, r20
    23e0:	ec 81       	ldd	r30, Y+4	; 0x04
    23e2:	fd 81       	ldd	r31, Y+5	; 0x05
    23e4:	80 83       	st	Z, r24
			if(*ReturnedPinValue == 0)
    23e6:	ec 81       	ldd	r30, Y+4	; 0x04
    23e8:	fd 81       	ldd	r31, Y+5	; 0x05
    23ea:	80 81       	ld	r24, Z
    23ec:	88 23       	and	r24, r24
    23ee:	21 f4       	brne	.+8      	; 0x23f8 <DIO_GetPinValue+0x1d6>
			{
				*ReturnedPinValue = DIO_LOW;
    23f0:	ec 81       	ldd	r30, Y+4	; 0x04
    23f2:	fd 81       	ldd	r31, Y+5	; 0x05
    23f4:	10 82       	st	Z, r1
    23f6:	08 c0       	rjmp	.+16     	; 0x2408 <DIO_GetPinValue+0x1e6>
			}
			else
			{
				*ReturnedPinValue = DIO_HIGH;
    23f8:	ec 81       	ldd	r30, Y+4	; 0x04
    23fa:	fd 81       	ldd	r31, Y+5	; 0x05
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	80 83       	st	Z, r24
    2400:	03 c0       	rjmp	.+6      	; 0x2408 <DIO_GetPinValue+0x1e6>
			}
			break;
			default:
				Local_FunctionStatus = E_NOT_OK;
    2402:	19 82       	std	Y+1, r1	; 0x01
    2404:	01 c0       	rjmp	.+2      	; 0x2408 <DIO_GetPinValue+0x1e6>
				break;
		}
	}
	else
	{
		Local_FunctionStatus  =E_NOT_OK;
    2406:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_FunctionStatus;
    2408:	89 81       	ldd	r24, Y+1	; 0x01
}
    240a:	27 96       	adiw	r28, 0x07	; 7
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <DIO_SetPortDirection>:

Std_ReturnType DIO_SetPortDirection(u8 PortId, u8 PortDirection)
{
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	2d 97       	sbiw	r28, 0x0d	; 13
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	de bf       	out	0x3e, r29	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	cd bf       	out	0x3d, r28	; 61
    2430:	8a 83       	std	Y+2, r24	; 0x02
    2432:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType Local_FunctionStatus = E_OK;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	89 83       	std	Y+1, r24	; 0x01

	if(PortDirection == DIO_OUTPUT || PortDirection == DIO_INPUT)
    2438:	8b 81       	ldd	r24, Y+3	; 0x03
    243a:	81 30       	cpi	r24, 0x01	; 1
    243c:	21 f0       	breq	.+8      	; 0x2446 <DIO_SetPortDirection+0x2a>
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	88 23       	and	r24, r24
    2442:	09 f0       	breq	.+2      	; 0x2446 <DIO_SetPortDirection+0x2a>
    2444:	86 c0       	rjmp	.+268    	; 0x2552 <DIO_SetPortDirection+0x136>
	{
		switch(PortId)
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
    2448:	28 2f       	mov	r18, r24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	3d 87       	std	Y+13, r19	; 0x0d
    244e:	2c 87       	std	Y+12, r18	; 0x0c
    2450:	8c 85       	ldd	r24, Y+12	; 0x0c
    2452:	9d 85       	ldd	r25, Y+13	; 0x0d
    2454:	81 30       	cpi	r24, 0x01	; 1
    2456:	91 05       	cpc	r25, r1
    2458:	79 f1       	breq	.+94     	; 0x24b8 <DIO_SetPortDirection+0x9c>
    245a:	2c 85       	ldd	r18, Y+12	; 0x0c
    245c:	3d 85       	ldd	r19, Y+13	; 0x0d
    245e:	22 30       	cpi	r18, 0x02	; 2
    2460:	31 05       	cpc	r19, r1
    2462:	2c f4       	brge	.+10     	; 0x246e <DIO_SetPortDirection+0x52>
    2464:	8c 85       	ldd	r24, Y+12	; 0x0c
    2466:	9d 85       	ldd	r25, Y+13	; 0x0d
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	69 f0       	breq	.+26     	; 0x2486 <DIO_SetPortDirection+0x6a>
    246c:	70 c0       	rjmp	.+224    	; 0x254e <DIO_SetPortDirection+0x132>
    246e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2470:	3d 85       	ldd	r19, Y+13	; 0x0d
    2472:	22 30       	cpi	r18, 0x02	; 2
    2474:	31 05       	cpc	r19, r1
    2476:	c9 f1       	breq	.+114    	; 0x24ea <DIO_SetPortDirection+0xce>
    2478:	8c 85       	ldd	r24, Y+12	; 0x0c
    247a:	9d 85       	ldd	r25, Y+13	; 0x0d
    247c:	83 30       	cpi	r24, 0x03	; 3
    247e:	91 05       	cpc	r25, r1
    2480:	09 f4       	brne	.+2      	; 0x2484 <DIO_SetPortDirection+0x68>
    2482:	4c c0       	rjmp	.+152    	; 0x251c <DIO_SetPortDirection+0x100>
    2484:	64 c0       	rjmp	.+200    	; 0x254e <DIO_SetPortDirection+0x132>
		{
			case DIO_PORTA:
				switch(PortDirection)
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	28 2f       	mov	r18, r24
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	3b 87       	std	Y+11, r19	; 0x0b
    248e:	2a 87       	std	Y+10, r18	; 0x0a
    2490:	8a 85       	ldd	r24, Y+10	; 0x0a
    2492:	9b 85       	ldd	r25, Y+11	; 0x0b
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	51 f0       	breq	.+20     	; 0x24ac <DIO_SetPortDirection+0x90>
    2498:	2a 85       	ldd	r18, Y+10	; 0x0a
    249a:	3b 85       	ldd	r19, Y+11	; 0x0b
    249c:	21 30       	cpi	r18, 0x01	; 1
    249e:	31 05       	cpc	r19, r1
    24a0:	49 f4       	brne	.+18     	; 0x24b4 <DIO_SetPortDirection+0x98>
				{
					case DIO_OUTPUT:DIO_DDRA_R = 0XFF; break;
    24a2:	ea e3       	ldi	r30, 0x3A	; 58
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	8f ef       	ldi	r24, 0xFF	; 255
    24a8:	80 83       	st	Z, r24
    24aa:	54 c0       	rjmp	.+168    	; 0x2554 <DIO_SetPortDirection+0x138>
					case DIO_INPUT :DIO_DDRA_R = 0X00; break;
    24ac:	ea e3       	ldi	r30, 0x3A	; 58
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	10 82       	st	Z, r1
    24b2:	50 c0       	rjmp	.+160    	; 0x2554 <DIO_SetPortDirection+0x138>
					default: Local_FunctionStatus = E_NOT_OK; break;
    24b4:	19 82       	std	Y+1, r1	; 0x01
    24b6:	4e c0       	rjmp	.+156    	; 0x2554 <DIO_SetPortDirection+0x138>
				}
				break;
			case DIO_PORTB:
				switch(PortDirection)
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	39 87       	std	Y+9, r19	; 0x09
    24c0:	28 87       	std	Y+8, r18	; 0x08
    24c2:	88 85       	ldd	r24, Y+8	; 0x08
    24c4:	99 85       	ldd	r25, Y+9	; 0x09
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	51 f0       	breq	.+20     	; 0x24de <DIO_SetPortDirection+0xc2>
    24ca:	28 85       	ldd	r18, Y+8	; 0x08
    24cc:	39 85       	ldd	r19, Y+9	; 0x09
    24ce:	21 30       	cpi	r18, 0x01	; 1
    24d0:	31 05       	cpc	r19, r1
    24d2:	49 f4       	brne	.+18     	; 0x24e6 <DIO_SetPortDirection+0xca>
				{
					case DIO_OUTPUT:DIO_DDRB_R = 0XFF; break;
    24d4:	e7 e3       	ldi	r30, 0x37	; 55
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	8f ef       	ldi	r24, 0xFF	; 255
    24da:	80 83       	st	Z, r24
    24dc:	3b c0       	rjmp	.+118    	; 0x2554 <DIO_SetPortDirection+0x138>
					case DIO_INPUT :DIO_DDRB_R = 0X00; break;
    24de:	e7 e3       	ldi	r30, 0x37	; 55
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	10 82       	st	Z, r1
    24e4:	37 c0       	rjmp	.+110    	; 0x2554 <DIO_SetPortDirection+0x138>
					default: Local_FunctionStatus = E_NOT_OK; break;
    24e6:	19 82       	std	Y+1, r1	; 0x01
    24e8:	35 c0       	rjmp	.+106    	; 0x2554 <DIO_SetPortDirection+0x138>
				}
				break;
			case DIO_PORTC:
				switch(PortDirection)
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	28 2f       	mov	r18, r24
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	3f 83       	std	Y+7, r19	; 0x07
    24f2:	2e 83       	std	Y+6, r18	; 0x06
    24f4:	8e 81       	ldd	r24, Y+6	; 0x06
    24f6:	9f 81       	ldd	r25, Y+7	; 0x07
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	51 f0       	breq	.+20     	; 0x2510 <DIO_SetPortDirection+0xf4>
    24fc:	2e 81       	ldd	r18, Y+6	; 0x06
    24fe:	3f 81       	ldd	r19, Y+7	; 0x07
    2500:	21 30       	cpi	r18, 0x01	; 1
    2502:	31 05       	cpc	r19, r1
    2504:	49 f4       	brne	.+18     	; 0x2518 <DIO_SetPortDirection+0xfc>
				{
					case DIO_OUTPUT:DIO_DDRC_R = 0XFF; break;
    2506:	e4 e3       	ldi	r30, 0x34	; 52
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	8f ef       	ldi	r24, 0xFF	; 255
    250c:	80 83       	st	Z, r24
    250e:	22 c0       	rjmp	.+68     	; 0x2554 <DIO_SetPortDirection+0x138>
					case DIO_INPUT :DIO_DDRC_R = 0X00; break;
    2510:	e4 e3       	ldi	r30, 0x34	; 52
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	10 82       	st	Z, r1
    2516:	1e c0       	rjmp	.+60     	; 0x2554 <DIO_SetPortDirection+0x138>
					default: Local_FunctionStatus = E_NOT_OK; break;
    2518:	19 82       	std	Y+1, r1	; 0x01
    251a:	1c c0       	rjmp	.+56     	; 0x2554 <DIO_SetPortDirection+0x138>
				}
				break;
			case DIO_PORTD:
				switch(PortDirection)
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	3d 83       	std	Y+5, r19	; 0x05
    2524:	2c 83       	std	Y+4, r18	; 0x04
    2526:	8c 81       	ldd	r24, Y+4	; 0x04
    2528:	9d 81       	ldd	r25, Y+5	; 0x05
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	51 f0       	breq	.+20     	; 0x2542 <DIO_SetPortDirection+0x126>
    252e:	2c 81       	ldd	r18, Y+4	; 0x04
    2530:	3d 81       	ldd	r19, Y+5	; 0x05
    2532:	21 30       	cpi	r18, 0x01	; 1
    2534:	31 05       	cpc	r19, r1
    2536:	49 f4       	brne	.+18     	; 0x254a <DIO_SetPortDirection+0x12e>
				{
					case DIO_OUTPUT:DIO_DDRD_R = 0XFF; break;
    2538:	e1 e3       	ldi	r30, 0x31	; 49
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	8f ef       	ldi	r24, 0xFF	; 255
    253e:	80 83       	st	Z, r24
    2540:	09 c0       	rjmp	.+18     	; 0x2554 <DIO_SetPortDirection+0x138>
					case DIO_INPUT :DIO_DDRD_R = 0X00; break;
    2542:	e1 e3       	ldi	r30, 0x31	; 49
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	10 82       	st	Z, r1
    2548:	05 c0       	rjmp	.+10     	; 0x2554 <DIO_SetPortDirection+0x138>
					default: Local_FunctionStatus = E_NOT_OK; break;
    254a:	19 82       	std	Y+1, r1	; 0x01
    254c:	03 c0       	rjmp	.+6      	; 0x2554 <DIO_SetPortDirection+0x138>
				}
				break;
			default: Local_FunctionStatus = E_NOT_OK; break;
    254e:	19 82       	std	Y+1, r1	; 0x01
    2550:	01 c0       	rjmp	.+2      	; 0x2554 <DIO_SetPortDirection+0x138>
		}
	}
	else
	{
		Local_FunctionStatus = E_NOT_OK;
    2552:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_FunctionStatus;
    2554:	89 81       	ldd	r24, Y+1	; 0x01
}
    2556:	2d 96       	adiw	r28, 0x0d	; 13
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	08 95       	ret

00002568 <DIO_SetPortValue>:

Std_ReturnType DIO_SetPortValue(u8 PortId, u8 PortValue)
{
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	00 d0       	rcall	.+0      	; 0x256e <DIO_SetPortValue+0x6>
    256e:	00 d0       	rcall	.+0      	; 0x2570 <DIO_SetPortValue+0x8>
    2570:	0f 92       	push	r0
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	8a 83       	std	Y+2, r24	; 0x02
    2578:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType Local_FunctionStatus = E_OK;
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId)
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	3d 83       	std	Y+5, r19	; 0x05
    2586:	2c 83       	std	Y+4, r18	; 0x04
    2588:	8c 81       	ldd	r24, Y+4	; 0x04
    258a:	9d 81       	ldd	r25, Y+5	; 0x05
    258c:	81 30       	cpi	r24, 0x01	; 1
    258e:	91 05       	cpc	r25, r1
    2590:	d1 f0       	breq	.+52     	; 0x25c6 <DIO_SetPortValue+0x5e>
    2592:	2c 81       	ldd	r18, Y+4	; 0x04
    2594:	3d 81       	ldd	r19, Y+5	; 0x05
    2596:	22 30       	cpi	r18, 0x02	; 2
    2598:	31 05       	cpc	r19, r1
    259a:	2c f4       	brge	.+10     	; 0x25a6 <DIO_SetPortValue+0x3e>
    259c:	8c 81       	ldd	r24, Y+4	; 0x04
    259e:	9d 81       	ldd	r25, Y+5	; 0x05
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	61 f0       	breq	.+24     	; 0x25bc <DIO_SetPortValue+0x54>
    25a4:	1f c0       	rjmp	.+62     	; 0x25e4 <DIO_SetPortValue+0x7c>
    25a6:	2c 81       	ldd	r18, Y+4	; 0x04
    25a8:	3d 81       	ldd	r19, Y+5	; 0x05
    25aa:	22 30       	cpi	r18, 0x02	; 2
    25ac:	31 05       	cpc	r19, r1
    25ae:	81 f0       	breq	.+32     	; 0x25d0 <DIO_SetPortValue+0x68>
    25b0:	8c 81       	ldd	r24, Y+4	; 0x04
    25b2:	9d 81       	ldd	r25, Y+5	; 0x05
    25b4:	83 30       	cpi	r24, 0x03	; 3
    25b6:	91 05       	cpc	r25, r1
    25b8:	81 f0       	breq	.+32     	; 0x25da <DIO_SetPortValue+0x72>
    25ba:	14 c0       	rjmp	.+40     	; 0x25e4 <DIO_SetPortValue+0x7c>
	{
		case DIO_PORTA: DIO_PORTA_R = PortValue; break;
    25bc:	eb e3       	ldi	r30, 0x3B	; 59
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	80 83       	st	Z, r24
    25c4:	10 c0       	rjmp	.+32     	; 0x25e6 <DIO_SetPortValue+0x7e>
		case DIO_PORTB: DIO_PORTB_R = PortValue; break;
    25c6:	e8 e3       	ldi	r30, 0x38	; 56
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	80 83       	st	Z, r24
    25ce:	0b c0       	rjmp	.+22     	; 0x25e6 <DIO_SetPortValue+0x7e>
		case DIO_PORTC: DIO_PORTC_R = PortValue; break;
    25d0:	e5 e3       	ldi	r30, 0x35	; 53
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	8b 81       	ldd	r24, Y+3	; 0x03
    25d6:	80 83       	st	Z, r24
    25d8:	06 c0       	rjmp	.+12     	; 0x25e6 <DIO_SetPortValue+0x7e>
		case DIO_PORTD: DIO_PORTD_R = PortValue; break;
    25da:	e2 e3       	ldi	r30, 0x32	; 50
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	80 83       	st	Z, r24
    25e2:	01 c0       	rjmp	.+2      	; 0x25e6 <DIO_SetPortValue+0x7e>
		default: Local_FunctionStatus = E_NOT_OK; break;
    25e4:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_FunctionStatus;
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	cf 91       	pop	r28
    25f4:	df 91       	pop	r29
    25f6:	08 95       	ret

000025f8 <DIO_GetPortValue>:

Std_ReturnType DIO_GetPortValue(u8 Copy_u8portId, u8 *ReturnedPortValue)
{
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <DIO_GetPortValue+0x6>
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <DIO_GetPortValue+0x8>
    2600:	00 d0       	rcall	.+0      	; 0x2602 <DIO_GetPortValue+0xa>
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	8a 83       	std	Y+2, r24	; 0x02
    2608:	7c 83       	std	Y+4, r23	; 0x04
    260a:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType Local_FunctionStatus = E_OK;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	89 83       	std	Y+1, r24	; 0x01

	if(NULL != ReturnedPortValue)
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	9c 81       	ldd	r25, Y+4	; 0x04
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	e9 f1       	breq	.+122    	; 0x2692 <DIO_GetPortValue+0x9a>
	{
		switch(Copy_u8portId)
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	28 2f       	mov	r18, r24
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	3e 83       	std	Y+6, r19	; 0x06
    2620:	2d 83       	std	Y+5, r18	; 0x05
    2622:	8d 81       	ldd	r24, Y+5	; 0x05
    2624:	9e 81       	ldd	r25, Y+6	; 0x06
    2626:	81 30       	cpi	r24, 0x01	; 1
    2628:	91 05       	cpc	r25, r1
    262a:	e1 f0       	breq	.+56     	; 0x2664 <DIO_GetPortValue+0x6c>
    262c:	2d 81       	ldd	r18, Y+5	; 0x05
    262e:	3e 81       	ldd	r19, Y+6	; 0x06
    2630:	22 30       	cpi	r18, 0x02	; 2
    2632:	31 05       	cpc	r19, r1
    2634:	2c f4       	brge	.+10     	; 0x2640 <DIO_GetPortValue+0x48>
    2636:	8d 81       	ldd	r24, Y+5	; 0x05
    2638:	9e 81       	ldd	r25, Y+6	; 0x06
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	61 f0       	breq	.+24     	; 0x2656 <DIO_GetPortValue+0x5e>
    263e:	27 c0       	rjmp	.+78     	; 0x268e <DIO_GetPortValue+0x96>
    2640:	2d 81       	ldd	r18, Y+5	; 0x05
    2642:	3e 81       	ldd	r19, Y+6	; 0x06
    2644:	22 30       	cpi	r18, 0x02	; 2
    2646:	31 05       	cpc	r19, r1
    2648:	a1 f0       	breq	.+40     	; 0x2672 <DIO_GetPortValue+0x7a>
    264a:	8d 81       	ldd	r24, Y+5	; 0x05
    264c:	9e 81       	ldd	r25, Y+6	; 0x06
    264e:	83 30       	cpi	r24, 0x03	; 3
    2650:	91 05       	cpc	r25, r1
    2652:	b1 f0       	breq	.+44     	; 0x2680 <DIO_GetPortValue+0x88>
    2654:	1c c0       	rjmp	.+56     	; 0x268e <DIO_GetPortValue+0x96>
		{
			case DIO_PORTA: *ReturnedPortValue = DIO_PINA_R; break;
    2656:	e9 e3       	ldi	r30, 0x39	; 57
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	eb 81       	ldd	r30, Y+3	; 0x03
    265e:	fc 81       	ldd	r31, Y+4	; 0x04
    2660:	80 83       	st	Z, r24
    2662:	18 c0       	rjmp	.+48     	; 0x2694 <DIO_GetPortValue+0x9c>
			case DIO_PORTB: *ReturnedPortValue = DIO_PINB_R; break;
    2664:	e6 e3       	ldi	r30, 0x36	; 54
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	eb 81       	ldd	r30, Y+3	; 0x03
    266c:	fc 81       	ldd	r31, Y+4	; 0x04
    266e:	80 83       	st	Z, r24
    2670:	11 c0       	rjmp	.+34     	; 0x2694 <DIO_GetPortValue+0x9c>
			case DIO_PORTC: *ReturnedPortValue = DIO_PINC_R; break;
    2672:	e3 e3       	ldi	r30, 0x33	; 51
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	eb 81       	ldd	r30, Y+3	; 0x03
    267a:	fc 81       	ldd	r31, Y+4	; 0x04
    267c:	80 83       	st	Z, r24
    267e:	0a c0       	rjmp	.+20     	; 0x2694 <DIO_GetPortValue+0x9c>
			case DIO_PORTD: *ReturnedPortValue = DIO_PIND_R; break;
    2680:	e0 e3       	ldi	r30, 0x30	; 48
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	eb 81       	ldd	r30, Y+3	; 0x03
    2688:	fc 81       	ldd	r31, Y+4	; 0x04
    268a:	80 83       	st	Z, r24
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <DIO_GetPortValue+0x9c>
			default: Local_FunctionStatus = E_NOT_OK;
    268e:	19 82       	std	Y+1, r1	; 0x01
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <DIO_GetPortValue+0x9c>
		}
	}
	else
	{
		Local_FunctionStatus = E_NOT_OK;
    2692:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_FunctionStatus;
    2694:	89 81       	ldd	r24, Y+1	; 0x01
}
    2696:	26 96       	adiw	r28, 0x06	; 6
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <KPD_GetKeyState>:
 * Users need to specify the corresponding pins in the order of physical connection.
 */
const u8 KPD_colsPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};
/*****************************< Function Implementations *****************************/
Std_ReturnType KPD_GetKeyState(uint8_t *returnedKey)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	65 97       	sbiw	r28, 0x15	; 21
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	9d 8b       	std	Y+21, r25	; 0x15
    26be:	8c 8b       	std	Y+20, r24	; 0x14
    Std_ReturnType FunctionState = E_NOT_OK; /**< Initialize function state to "not OK" */
    26c0:	1a 8a       	std	Y+18, r1	; 0x12
    u8 rowsCounter = 0, colsCounter = 0, pinValue = 0, flag = 0; /**< Initialize loop counters and pin value */
    26c2:	19 8a       	std	Y+17, r1	; 0x11
    26c4:	18 8a       	std	Y+16, r1	; 0x10
    26c6:	1b 8a       	std	Y+19, r1	; 0x13
    26c8:	1f 86       	std	Y+15, r1	; 0x0f
    
    if (NULL != returnedKey) /**< Check if the returnedKey pointer is not NULL */
    26ca:	8c 89       	ldd	r24, Y+20	; 0x14
    26cc:	9d 89       	ldd	r25, Y+21	; 0x15
    26ce:	00 97       	sbiw	r24, 0x00	; 0
    26d0:	09 f4       	brne	.+2      	; 0x26d4 <KPD_GetKeyState+0x2c>
    26d2:	f3 c0       	rjmp	.+486    	; 0x28ba <KPD_GetKeyState+0x212>
    {   
        *returnedKey = KPD_KEY_NOT_PRESSED; /**< Set the returnedKey to indicate no key is pressed */
    26d4:	ec 89       	ldd	r30, Y+20	; 0x14
    26d6:	fd 89       	ldd	r31, Y+21	; 0x15
    26d8:	8f ef       	ldi	r24, 0xFF	; 255
    26da:	80 83       	st	Z, r24
        
        /**< Active Each Row => For loop on pins of the rows */
        for (rowsCounter = 0; rowsCounter < 4; rowsCounter++) /**< Loop through each row */
    26dc:	19 8a       	std	Y+17, r1	; 0x11
    26de:	e8 c0       	rjmp	.+464    	; 0x28b0 <KPD_GetKeyState+0x208>
        {
            DIO_SetPinValue(KPD_ROWS_PORT, KPD_rowsPins[rowsCounter], DIO_LOW); /**< Activate the current row */
    26e0:	89 89       	ldd	r24, Y+17	; 0x11
    26e2:	88 2f       	mov	r24, r24
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	fc 01       	movw	r30, r24
    26e8:	ed 55       	subi	r30, 0x5D	; 93
    26ea:	fe 4f       	sbci	r31, 0xFE	; 254
    26ec:	90 81       	ld	r25, Z
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	69 2f       	mov	r22, r25
    26f2:	40 e0       	ldi	r20, 0x00	; 0
    26f4:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_SetPinValue>
            
            /**< Check which input pin has a low value (i.e., which key is pressed) */
            for (colsCounter = 0; colsCounter < 4; colsCounter++) /**< Loop through each column */
    26f8:	18 8a       	std	Y+16, r1	; 0x10
    26fa:	c1 c0       	rjmp	.+386    	; 0x287e <KPD_GetKeyState+0x1d6>
            {
                DIO_GetPinValue(KPD_COLS_PORT, KPD_colsPins[colsCounter], &pinValue); /**< Read the value of the current column pin */
    26fc:	88 89       	ldd	r24, Y+16	; 0x10
    26fe:	88 2f       	mov	r24, r24
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	fc 01       	movw	r30, r24
    2704:	e9 55       	subi	r30, 0x59	; 89
    2706:	fe 4f       	sbci	r31, 0xFE	; 254
    2708:	90 81       	ld	r25, Z
    270a:	9e 01       	movw	r18, r28
    270c:	2d 5e       	subi	r18, 0xED	; 237
    270e:	3f 4f       	sbci	r19, 0xFF	; 255
    2710:	83 e0       	ldi	r24, 0x03	; 3
    2712:	69 2f       	mov	r22, r25
    2714:	a9 01       	movw	r20, r18
    2716:	0e 94 11 11 	call	0x2222	; 0x2222 <DIO_GetPinValue>
                if (pinValue == DIO_LOW) /**< Check if the pin value is low */
    271a:	8b 89       	ldd	r24, Y+19	; 0x13
    271c:	88 23       	and	r24, r24
    271e:	09 f0       	breq	.+2      	; 0x2722 <KPD_GetKeyState+0x7a>
    2720:	ab c0       	rjmp	.+342    	; 0x2878 <KPD_GetKeyState+0x1d0>
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	a0 ea       	ldi	r26, 0xA0	; 160
    2728:	b1 e4       	ldi	r27, 0x41	; 65
    272a:	8b 87       	std	Y+11, r24	; 0x0b
    272c:	9c 87       	std	Y+12, r25	; 0x0c
    272e:	ad 87       	std	Y+13, r26	; 0x0d
    2730:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2732:	6b 85       	ldd	r22, Y+11	; 0x0b
    2734:	7c 85       	ldd	r23, Y+12	; 0x0c
    2736:	8d 85       	ldd	r24, Y+13	; 0x0d
    2738:	9e 85       	ldd	r25, Y+14	; 0x0e
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	4a ef       	ldi	r20, 0xFA	; 250
    2740:	54 e4       	ldi	r21, 0x44	; 68
    2742:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	8f 83       	std	Y+7, r24	; 0x07
    274c:	98 87       	std	Y+8, r25	; 0x08
    274e:	a9 87       	std	Y+9, r26	; 0x09
    2750:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2752:	6f 81       	ldd	r22, Y+7	; 0x07
    2754:	78 85       	ldd	r23, Y+8	; 0x08
    2756:	89 85       	ldd	r24, Y+9	; 0x09
    2758:	9a 85       	ldd	r25, Y+10	; 0x0a
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e8       	ldi	r20, 0x80	; 128
    2760:	5f e3       	ldi	r21, 0x3F	; 63
    2762:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2766:	88 23       	and	r24, r24
    2768:	2c f4       	brge	.+10     	; 0x2774 <KPD_GetKeyState+0xcc>
		__ticks = 1;
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	9e 83       	std	Y+6, r25	; 0x06
    2770:	8d 83       	std	Y+5, r24	; 0x05
    2772:	3f c0       	rjmp	.+126    	; 0x27f2 <KPD_GetKeyState+0x14a>
	else if (__tmp > 65535)
    2774:	6f 81       	ldd	r22, Y+7	; 0x07
    2776:	78 85       	ldd	r23, Y+8	; 0x08
    2778:	89 85       	ldd	r24, Y+9	; 0x09
    277a:	9a 85       	ldd	r25, Y+10	; 0x0a
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	3f ef       	ldi	r19, 0xFF	; 255
    2780:	4f e7       	ldi	r20, 0x7F	; 127
    2782:	57 e4       	ldi	r21, 0x47	; 71
    2784:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2788:	18 16       	cp	r1, r24
    278a:	4c f5       	brge	.+82     	; 0x27de <KPD_GetKeyState+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278c:	6b 85       	ldd	r22, Y+11	; 0x0b
    278e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2790:	8d 85       	ldd	r24, Y+13	; 0x0d
    2792:	9e 85       	ldd	r25, Y+14	; 0x0e
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e2       	ldi	r20, 0x20	; 32
    279a:	51 e4       	ldi	r21, 0x41	; 65
    279c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9e 83       	std	Y+6, r25	; 0x06
    27b2:	8d 83       	std	Y+5, r24	; 0x05
    27b4:	0f c0       	rjmp	.+30     	; 0x27d4 <KPD_GetKeyState+0x12c>
    27b6:	88 ec       	ldi	r24, 0xC8	; 200
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	9c 83       	std	Y+4, r25	; 0x04
    27bc:	8b 83       	std	Y+3, r24	; 0x03
    27be:	8b 81       	ldd	r24, Y+3	; 0x03
    27c0:	9c 81       	ldd	r25, Y+4	; 0x04
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	f1 f7       	brne	.-4      	; 0x27c2 <KPD_GetKeyState+0x11a>
    27c6:	9c 83       	std	Y+4, r25	; 0x04
    27c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ca:	8d 81       	ldd	r24, Y+5	; 0x05
    27cc:	9e 81       	ldd	r25, Y+6	; 0x06
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	9e 83       	std	Y+6, r25	; 0x06
    27d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d4:	8d 81       	ldd	r24, Y+5	; 0x05
    27d6:	9e 81       	ldd	r25, Y+6	; 0x06
    27d8:	00 97       	sbiw	r24, 0x00	; 0
    27da:	69 f7       	brne	.-38     	; 0x27b6 <KPD_GetKeyState+0x10e>
    27dc:	14 c0       	rjmp	.+40     	; 0x2806 <KPD_GetKeyState+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27de:	6f 81       	ldd	r22, Y+7	; 0x07
    27e0:	78 85       	ldd	r23, Y+8	; 0x08
    27e2:	89 85       	ldd	r24, Y+9	; 0x09
    27e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	9e 83       	std	Y+6, r25	; 0x06
    27f0:	8d 83       	std	Y+5, r24	; 0x05
    27f2:	8d 81       	ldd	r24, Y+5	; 0x05
    27f4:	9e 81       	ldd	r25, Y+6	; 0x06
    27f6:	9a 83       	std	Y+2, r25	; 0x02
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	9a 81       	ldd	r25, Y+2	; 0x02
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	f1 f7       	brne	.-4      	; 0x27fe <KPD_GetKeyState+0x156>
    2802:	9a 83       	std	Y+2, r25	; 0x02
    2804:	89 83       	std	Y+1, r24	; 0x01
                {
                    /**< Debouncing */
                    _delay_ms(20); /**< Delay for debouncing */
                    DIO_GetPinValue(KPD_COLS_PORT, KPD_colsPins[colsCounter], &pinValue); /**< Get pin value again */
    2806:	88 89       	ldd	r24, Y+16	; 0x10
    2808:	88 2f       	mov	r24, r24
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	fc 01       	movw	r30, r24
    280e:	e9 55       	subi	r30, 0x59	; 89
    2810:	fe 4f       	sbci	r31, 0xFE	; 254
    2812:	90 81       	ld	r25, Z
    2814:	9e 01       	movw	r18, r28
    2816:	2d 5e       	subi	r18, 0xED	; 237
    2818:	3f 4f       	sbci	r19, 0xFF	; 255
    281a:	83 e0       	ldi	r24, 0x03	; 3
    281c:	69 2f       	mov	r22, r25
    281e:	a9 01       	movw	r20, r18
    2820:	0e 94 11 11 	call	0x2222	; 0x2222 <DIO_GetPinValue>
    2824:	0f c0       	rjmp	.+30     	; 0x2844 <KPD_GetKeyState+0x19c>
                    /**< check if the pin is still equal low */
                    while (pinValue == DIO_LOW) /**< Wait until the pin value becomes high (debounced) */
                    {
                        DIO_GetPinValue(KPD_COLS_PORT, KPD_colsPins[colsCounter], &pinValue); /**< Get pin value */
    2826:	88 89       	ldd	r24, Y+16	; 0x10
    2828:	88 2f       	mov	r24, r24
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	fc 01       	movw	r30, r24
    282e:	e9 55       	subi	r30, 0x59	; 89
    2830:	fe 4f       	sbci	r31, 0xFE	; 254
    2832:	90 81       	ld	r25, Z
    2834:	9e 01       	movw	r18, r28
    2836:	2d 5e       	subi	r18, 0xED	; 237
    2838:	3f 4f       	sbci	r19, 0xFF	; 255
    283a:	83 e0       	ldi	r24, 0x03	; 3
    283c:	69 2f       	mov	r22, r25
    283e:	a9 01       	movw	r20, r18
    2840:	0e 94 11 11 	call	0x2222	; 0x2222 <DIO_GetPinValue>
                {
                    /**< Debouncing */
                    _delay_ms(20); /**< Delay for debouncing */
                    DIO_GetPinValue(KPD_COLS_PORT, KPD_colsPins[colsCounter], &pinValue); /**< Get pin value again */
                    /**< check if the pin is still equal low */
                    while (pinValue == DIO_LOW) /**< Wait until the pin value becomes high (debounced) */
    2844:	8b 89       	ldd	r24, Y+19	; 0x13
    2846:	88 23       	and	r24, r24
    2848:	71 f3       	breq	.-36     	; 0x2826 <KPD_GetKeyState+0x17e>
                    {
                        DIO_GetPinValue(KPD_COLS_PORT, KPD_colsPins[colsCounter], &pinValue); /**< Get pin value */
                    }
                    *returnedKey = KPD_Keys[rowsCounter][colsCounter]; /**< Store the pressed key */
    284a:	89 89       	ldd	r24, Y+17	; 0x11
    284c:	48 2f       	mov	r20, r24
    284e:	50 e0       	ldi	r21, 0x00	; 0
    2850:	88 89       	ldd	r24, Y+16	; 0x10
    2852:	28 2f       	mov	r18, r24
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	ca 01       	movw	r24, r20
    2858:	88 0f       	add	r24, r24
    285a:	99 1f       	adc	r25, r25
    285c:	88 0f       	add	r24, r24
    285e:	99 1f       	adc	r25, r25
    2860:	82 0f       	add	r24, r18
    2862:	93 1f       	adc	r25, r19
    2864:	fc 01       	movw	r30, r24
    2866:	ed 56       	subi	r30, 0x6D	; 109
    2868:	fe 4f       	sbci	r31, 0xFE	; 254
    286a:	80 81       	ld	r24, Z
    286c:	ec 89       	ldd	r30, Y+20	; 0x14
    286e:	fd 89       	ldd	r31, Y+21	; 0x15
    2870:	80 83       	st	Z, r24
                    flag = 1; /**< Set flag to indicate that a key is pressed */
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	8f 87       	std	Y+15, r24	; 0x0f
    2876:	07 c0       	rjmp	.+14     	; 0x2886 <KPD_GetKeyState+0x1de>
        for (rowsCounter = 0; rowsCounter < 4; rowsCounter++) /**< Loop through each row */
        {
            DIO_SetPinValue(KPD_ROWS_PORT, KPD_rowsPins[rowsCounter], DIO_LOW); /**< Activate the current row */
            
            /**< Check which input pin has a low value (i.e., which key is pressed) */
            for (colsCounter = 0; colsCounter < 4; colsCounter++) /**< Loop through each column */
    2878:	88 89       	ldd	r24, Y+16	; 0x10
    287a:	8f 5f       	subi	r24, 0xFF	; 255
    287c:	88 8b       	std	Y+16, r24	; 0x10
    287e:	88 89       	ldd	r24, Y+16	; 0x10
    2880:	84 30       	cpi	r24, 0x04	; 4
    2882:	08 f4       	brcc	.+2      	; 0x2886 <KPD_GetKeyState+0x1de>
    2884:	3b cf       	rjmp	.-394    	; 0x26fc <KPD_GetKeyState+0x54>
                    break; /**< Exit the loop */
                }
            }
            
            /**< Deactivate Rows */
			DIO_SetPinValue(KPD_ROWS_PORT, KPD_rowsPins[rowsCounter], DIO_HIGH); /**< Deactivate the current row */
    2886:	89 89       	ldd	r24, Y+17	; 0x11
    2888:	88 2f       	mov	r24, r24
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	fc 01       	movw	r30, r24
    288e:	ed 55       	subi	r30, 0x5D	; 93
    2890:	fe 4f       	sbci	r31, 0xFE	; 254
    2892:	90 81       	ld	r25, Z
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	69 2f       	mov	r22, r25
    2898:	41 e0       	ldi	r20, 0x01	; 1
    289a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_SetPinValue>

            if (flag == 1) /**< Check if a key is pressed */
    289e:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a0:	81 30       	cpi	r24, 0x01	; 1
    28a2:	19 f4       	brne	.+6      	; 0x28aa <KPD_GetKeyState+0x202>
            {
            	FunctionState = E_OK;
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	8a 8b       	std	Y+18, r24	; 0x12
    28a8:	09 c0       	rjmp	.+18     	; 0x28bc <KPD_GetKeyState+0x214>
    if (NULL != returnedKey) /**< Check if the returnedKey pointer is not NULL */
    {   
        *returnedKey = KPD_KEY_NOT_PRESSED; /**< Set the returnedKey to indicate no key is pressed */
        
        /**< Active Each Row => For loop on pins of the rows */
        for (rowsCounter = 0; rowsCounter < 4; rowsCounter++) /**< Loop through each row */
    28aa:	89 89       	ldd	r24, Y+17	; 0x11
    28ac:	8f 5f       	subi	r24, 0xFF	; 255
    28ae:	89 8b       	std	Y+17, r24	; 0x11
    28b0:	89 89       	ldd	r24, Y+17	; 0x11
    28b2:	84 30       	cpi	r24, 0x04	; 4
    28b4:	08 f4       	brcc	.+2      	; 0x28b8 <KPD_GetKeyState+0x210>
    28b6:	14 cf       	rjmp	.-472    	; 0x26e0 <KPD_GetKeyState+0x38>
    28b8:	01 c0       	rjmp	.+2      	; 0x28bc <KPD_GetKeyState+0x214>
            }
        }
    }
    else
    {
        FunctionState = E_NOT_OK; /**< Set function state to "not OK" if returnedKey pointer is NULL */
    28ba:	1a 8a       	std	Y+18, r1	; 0x12
    }
    
    return FunctionState; /**< Return the function state */
    28bc:	8a 89       	ldd	r24, Y+18	; 0x12
}
    28be:	65 96       	adiw	r28, 0x15	; 21
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	cf 91       	pop	r28
    28cc:	df 91       	pop	r29
    28ce:	08 95       	ret

000028d0 <add>:
 *
 * @param num1 The first integer operand.
 * @param num2 The second integer operand.
 * @return The result of the addition operation.
 */
int add(int num1, int num2) {
    28d0:	df 93       	push	r29
    28d2:	cf 93       	push	r28
    28d4:	00 d0       	rcall	.+0      	; 0x28d6 <add+0x6>
    28d6:	00 d0       	rcall	.+0      	; 0x28d8 <add+0x8>
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	9a 83       	std	Y+2, r25	; 0x02
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	7c 83       	std	Y+4, r23	; 0x04
    28e2:	6b 83       	std	Y+3, r22	; 0x03
    return num1 + num2;
    28e4:	29 81       	ldd	r18, Y+1	; 0x01
    28e6:	3a 81       	ldd	r19, Y+2	; 0x02
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	9c 81       	ldd	r25, Y+4	; 0x04
    28ec:	82 0f       	add	r24, r18
    28ee:	93 1f       	adc	r25, r19
}
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	cf 91       	pop	r28
    28fa:	df 91       	pop	r29
    28fc:	08 95       	ret

000028fe <subtract>:
 *
 * @param num1 The first integer operand (minuend).
 * @param num2 The second integer operand (subtrahend).
 * @return The result of the subtraction operation.
 */
int subtract(int num1, int num2) {
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	00 d0       	rcall	.+0      	; 0x2904 <subtract+0x6>
    2904:	00 d0       	rcall	.+0      	; 0x2906 <subtract+0x8>
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	9a 83       	std	Y+2, r25	; 0x02
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	7c 83       	std	Y+4, r23	; 0x04
    2910:	6b 83       	std	Y+3, r22	; 0x03
    return num1 - num2;
    2912:	29 81       	ldd	r18, Y+1	; 0x01
    2914:	3a 81       	ldd	r19, Y+2	; 0x02
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	9c 81       	ldd	r25, Y+4	; 0x04
    291a:	a9 01       	movw	r20, r18
    291c:	48 1b       	sub	r20, r24
    291e:	59 0b       	sbc	r21, r25
    2920:	ca 01       	movw	r24, r20
}
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <multiply>:
 *
 * @param num1 The first integer operand.
 * @param num2 The second integer operand.
 * @return The result of the multiplication operation.
 */
int multiply(int num1, int num2) {
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	00 d0       	rcall	.+0      	; 0x2936 <multiply+0x6>
    2936:	00 d0       	rcall	.+0      	; 0x2938 <multiply+0x8>
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	9a 83       	std	Y+2, r25	; 0x02
    293e:	89 83       	std	Y+1, r24	; 0x01
    2940:	7c 83       	std	Y+4, r23	; 0x04
    2942:	6b 83       	std	Y+3, r22	; 0x03
    return num1 * num2;
    2944:	29 81       	ldd	r18, Y+1	; 0x01
    2946:	3a 81       	ldd	r19, Y+2	; 0x02
    2948:	8b 81       	ldd	r24, Y+3	; 0x03
    294a:	9c 81       	ldd	r25, Y+4	; 0x04
    294c:	ac 01       	movw	r20, r24
    294e:	24 9f       	mul	r18, r20
    2950:	c0 01       	movw	r24, r0
    2952:	25 9f       	mul	r18, r21
    2954:	90 0d       	add	r25, r0
    2956:	34 9f       	mul	r19, r20
    2958:	90 0d       	add	r25, r0
    295a:	11 24       	eor	r1, r1
}
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	cf 91       	pop	r28
    2966:	df 91       	pop	r29
    2968:	08 95       	ret

0000296a <divide>:
 *
 * @param num1 The dividend.
 * @param num2 The divisor.
 * @return The result of the division operation, or an error value if division by zero occurs.
 */
double divide(int num1, int num2) {
    296a:	ef 92       	push	r14
    296c:	ff 92       	push	r15
    296e:	0f 93       	push	r16
    2970:	1f 93       	push	r17
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	28 97       	sbiw	r28, 0x08	; 8
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61
    2986:	9a 83       	std	Y+2, r25	; 0x02
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	7c 83       	std	Y+4, r23	; 0x04
    298c:	6b 83       	std	Y+3, r22	; 0x03
    if (num2 != 0) {
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	9c 81       	ldd	r25, Y+4	; 0x04
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	19 f1       	breq	.+70     	; 0x29dc <divide+0x72>
        return ((double)num1 / num2);
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	9a 81       	ldd	r25, Y+2	; 0x02
    299a:	aa 27       	eor	r26, r26
    299c:	97 fd       	sbrc	r25, 7
    299e:	a0 95       	com	r26
    29a0:	ba 2f       	mov	r27, r26
    29a2:	bc 01       	movw	r22, r24
    29a4:	cd 01       	movw	r24, r26
    29a6:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    29aa:	7b 01       	movw	r14, r22
    29ac:	8c 01       	movw	r16, r24
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	9c 81       	ldd	r25, Y+4	; 0x04
    29b2:	aa 27       	eor	r26, r26
    29b4:	97 fd       	sbrc	r25, 7
    29b6:	a0 95       	com	r26
    29b8:	ba 2f       	mov	r27, r26
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    29c2:	9b 01       	movw	r18, r22
    29c4:	ac 01       	movw	r20, r24
    29c6:	c8 01       	movw	r24, r16
    29c8:	b7 01       	movw	r22, r14
    29ca:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	8d 83       	std	Y+5, r24	; 0x05
    29d4:	9e 83       	std	Y+6, r25	; 0x06
    29d6:	af 83       	std	Y+7, r26	; 0x07
    29d8:	b8 87       	std	Y+8, r27	; 0x08
    29da:	08 c0       	rjmp	.+16     	; 0x29ec <divide+0x82>
    } else {
        /**< Division by zero, handle error */
        return -1; /**< Return a suitable error value */
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	a0 e8       	ldi	r26, 0x80	; 128
    29e2:	bf eb       	ldi	r27, 0xBF	; 191
    29e4:	8d 83       	std	Y+5, r24	; 0x05
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	af 83       	std	Y+7, r26	; 0x07
    29ea:	b8 87       	std	Y+8, r27	; 0x08
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	9e 81       	ldd	r25, Y+6	; 0x06
    29f0:	af 81       	ldd	r26, Y+7	; 0x07
    29f2:	b8 85       	ldd	r27, Y+8	; 0x08
    }
}
    29f4:	bc 01       	movw	r22, r24
    29f6:	cd 01       	movw	r24, r26
    29f8:	28 96       	adiw	r28, 0x08	; 8
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
    2a0c:	ff 90       	pop	r15
    2a0e:	ef 90       	pop	r14
    2a10:	08 95       	ret

00002a12 <main>:
#include "KPD_interface.h"
/*****************************< APP *****************************/
#include "main.h"
#include "arithmetic_operations.h"
/*****************************< Business Logic *****************************/
int main(void) {
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	e8 97       	sbiw	r28, 0x38	; 56
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
	/**<--------------------< LCD Configuration --------------------*/
	// Declare an instance of LCD configuration structure.
	LCD_Config_t lcd1;

	// Set the mode of operation to 4-bit mode.
	lcd1.mode = LCD_4BitMode;
    2a26:	84 e0       	ldi	r24, 0x04	; 4
    2a28:	8a a7       	std	Y+42, r24	; 0x2a

	// Configure data pins for 4-bit mode operation.
	for (u8 i = 0; i < 4; i++) {
    2a2a:	18 a2       	std	Y+32, r1	; 0x20
    2a2c:	23 c0       	rjmp	.+70     	; 0x2a74 <main+0x62>
	    // Set the port ID for data pin i to DIO_PORTA.
	    lcd1.dataPins[i].LCD_PortId = DIO_PORTA;
    2a2e:	88 a1       	ldd	r24, Y+32	; 0x20
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	ce 01       	movw	r24, r28
    2a36:	8b 96       	adiw	r24, 0x2b	; 43
    2a38:	fc 01       	movw	r30, r24
    2a3a:	e2 0f       	add	r30, r18
    2a3c:	f3 1f       	adc	r31, r19
    2a3e:	80 81       	ld	r24, Z
    2a40:	8c 7f       	andi	r24, 0xFC	; 252
    2a42:	80 83       	st	Z, r24
	    // Set the pin ID for data pin i using DIO_PIN3 - i.
	    lcd1.dataPins[i].LCD_PinId = DIO_PIN3 + i;
    2a44:	88 a1       	ldd	r24, Y+32	; 0x20
    2a46:	28 2f       	mov	r18, r24
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	88 a1       	ldd	r24, Y+32	; 0x20
    2a4c:	8d 5f       	subi	r24, 0xFD	; 253
    2a4e:	48 2f       	mov	r20, r24
    2a50:	4f 70       	andi	r20, 0x0F	; 15
    2a52:	ce 01       	movw	r24, r28
    2a54:	8b 96       	adiw	r24, 0x2b	; 43
    2a56:	fc 01       	movw	r30, r24
    2a58:	e2 0f       	add	r30, r18
    2a5a:	f3 1f       	adc	r31, r19
    2a5c:	84 2f       	mov	r24, r20
    2a5e:	8f 70       	andi	r24, 0x0F	; 15
    2a60:	98 2f       	mov	r25, r24
    2a62:	99 0f       	add	r25, r25
    2a64:	99 0f       	add	r25, r25
    2a66:	80 81       	ld	r24, Z
    2a68:	83 7c       	andi	r24, 0xC3	; 195
    2a6a:	89 2b       	or	r24, r25
    2a6c:	80 83       	st	Z, r24

	// Set the mode of operation to 4-bit mode.
	lcd1.mode = LCD_4BitMode;

	// Configure data pins for 4-bit mode operation.
	for (u8 i = 0; i < 4; i++) {
    2a6e:	88 a1       	ldd	r24, Y+32	; 0x20
    2a70:	8f 5f       	subi	r24, 0xFF	; 255
    2a72:	88 a3       	std	Y+32, r24	; 0x20
    2a74:	88 a1       	ldd	r24, Y+32	; 0x20
    2a76:	84 30       	cpi	r24, 0x04	; 4
    2a78:	d0 f2       	brcs	.-76     	; 0x2a2e <main+0x1c>
	    lcd1.dataPins[i].LCD_PinId = DIO_PIN3 + i;
	}

	// Configure enable pin.
	// Set the port ID for the enable pin to DIO_PORTA.
	lcd1.enablePin.LCD_PortId = DIO_PORTA;
    2a7a:	8d a9       	ldd	r24, Y+53	; 0x35
    2a7c:	8c 7f       	andi	r24, 0xFC	; 252
    2a7e:	8d ab       	std	Y+53, r24	; 0x35
	// Set the pin ID for the enable pin to DIO_PIN4.
	lcd1.enablePin.LCD_PinId = DIO_PIN2;
    2a80:	8d a9       	ldd	r24, Y+53	; 0x35
    2a82:	83 7c       	andi	r24, 0xC3	; 195
    2a84:	88 60       	ori	r24, 0x08	; 8
    2a86:	8d ab       	std	Y+53, r24	; 0x35

	// Configure rs pin.
	// Set the port ID for the rs pin to DIO_PORTA.
	lcd1.rsPin.LCD_PortId = DIO_PORTA;
    2a88:	8b a9       	ldd	r24, Y+51	; 0x33
    2a8a:	8c 7f       	andi	r24, 0xFC	; 252
    2a8c:	8b ab       	std	Y+51, r24	; 0x33
	// Set the pin ID for the rs pin to DIO_PIN5.
	lcd1.rsPin.LCD_PinId = DIO_PIN1;
    2a8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a90:	83 7c       	andi	r24, 0xC3	; 195
    2a92:	84 60       	ori	r24, 0x04	; 4
    2a94:	8b ab       	std	Y+51, r24	; 0x33

	// Initialize the LCD module with the configured settings.
	LCD_Init(&lcd1);
    2a96:	ce 01       	movw	r24, r28
    2a98:	8a 96       	adiw	r24, 0x2a	; 42
    2a9a:	0e 94 6d 07 	call	0xeda	; 0xeda <LCD_Init>
	LCD_Clear(&lcd1);
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	8a 96       	adiw	r24, 0x2a	; 42
    2aa2:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_Clear>

	/**< Display a welcome message */
	LCD_SendString(&lcd1, (uint8_t *)"Welcome to my");
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	8a 96       	adiw	r24, 0x2a	; 42
    2aaa:	20 e6       	ldi	r18, 0x60	; 96
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	b9 01       	movw	r22, r18
    2ab0:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_SendString>
	LCD_GoToXYPos(&lcd1, 0, 1);
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	8a 96       	adiw	r24, 0x2a	; 42
    2ab8:	60 e0       	ldi	r22, 0x00	; 0
    2aba:	41 e0       	ldi	r20, 0x01	; 1
    2abc:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_GoToXYPos>
	LCD_SendString(&lcd1, (uint8_t *)"Basic Calculator");
    2ac0:	ce 01       	movw	r24, r28
    2ac2:	8a 96       	adiw	r24, 0x2a	; 42
    2ac4:	2e e6       	ldi	r18, 0x6E	; 110
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	b9 01       	movw	r22, r18
    2aca:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_SendString>
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	aa e7       	ldi	r26, 0x7A	; 122
    2ad4:	b4 e4       	ldi	r27, 0x44	; 68
    2ad6:	89 8f       	std	Y+25, r24	; 0x19
    2ad8:	9a 8f       	std	Y+26, r25	; 0x1a
    2ada:	ab 8f       	std	Y+27, r26	; 0x1b
    2adc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ade:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	4a e7       	ldi	r20, 0x7A	; 122
    2aec:	55 e4       	ldi	r21, 0x45	; 69
    2aee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	8d 8b       	std	Y+21, r24	; 0x15
    2af8:	9e 8b       	std	Y+22, r25	; 0x16
    2afa:	af 8b       	std	Y+23, r26	; 0x17
    2afc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2afe:	6d 89       	ldd	r22, Y+21	; 0x15
    2b00:	7e 89       	ldd	r23, Y+22	; 0x16
    2b02:	8f 89       	ldd	r24, Y+23	; 0x17
    2b04:	98 8d       	ldd	r25, Y+24	; 0x18
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e8       	ldi	r20, 0x80	; 128
    2b0c:	5f e3       	ldi	r21, 0x3F	; 63
    2b0e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b12:	88 23       	and	r24, r24
    2b14:	2c f4       	brge	.+10     	; 0x2b20 <main+0x10e>
		__ticks = 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	9c 8b       	std	Y+20, r25	; 0x14
    2b1c:	8b 8b       	std	Y+19, r24	; 0x13
    2b1e:	3f c0       	rjmp	.+126    	; 0x2b9e <main+0x18c>
	else if (__tmp > 65535)
    2b20:	6d 89       	ldd	r22, Y+21	; 0x15
    2b22:	7e 89       	ldd	r23, Y+22	; 0x16
    2b24:	8f 89       	ldd	r24, Y+23	; 0x17
    2b26:	98 8d       	ldd	r25, Y+24	; 0x18
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	3f ef       	ldi	r19, 0xFF	; 255
    2b2c:	4f e7       	ldi	r20, 0x7F	; 127
    2b2e:	57 e4       	ldi	r21, 0x47	; 71
    2b30:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b34:	18 16       	cp	r1, r24
    2b36:	4c f5       	brge	.+82     	; 0x2b8a <main+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b38:	69 8d       	ldd	r22, Y+25	; 0x19
    2b3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e2       	ldi	r20, 0x20	; 32
    2b46:	51 e4       	ldi	r21, 0x41	; 65
    2b48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	bc 01       	movw	r22, r24
    2b52:	cd 01       	movw	r24, r26
    2b54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	9c 8b       	std	Y+20, r25	; 0x14
    2b5e:	8b 8b       	std	Y+19, r24	; 0x13
    2b60:	0f c0       	rjmp	.+30     	; 0x2b80 <main+0x16e>
    2b62:	80 e9       	ldi	r24, 0x90	; 144
    2b64:	91 e0       	ldi	r25, 0x01	; 1
    2b66:	9a 8b       	std	Y+18, r25	; 0x12
    2b68:	89 8b       	std	Y+17, r24	; 0x11
    2b6a:	89 89       	ldd	r24, Y+17	; 0x11
    2b6c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <main+0x15c>
    2b72:	9a 8b       	std	Y+18, r25	; 0x12
    2b74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b76:	8b 89       	ldd	r24, Y+19	; 0x13
    2b78:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	9c 8b       	std	Y+20, r25	; 0x14
    2b7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b80:	8b 89       	ldd	r24, Y+19	; 0x13
    2b82:	9c 89       	ldd	r25, Y+20	; 0x14
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	69 f7       	brne	.-38     	; 0x2b62 <main+0x150>
    2b88:	14 c0       	rjmp	.+40     	; 0x2bb2 <main+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b90:	98 8d       	ldd	r25, Y+24	; 0x18
    2b92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	9c 8b       	std	Y+20, r25	; 0x14
    2b9c:	8b 8b       	std	Y+19, r24	; 0x13
    2b9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba2:	98 8b       	std	Y+16, r25	; 0x10
    2ba4:	8f 87       	std	Y+15, r24	; 0x0f
    2ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba8:	98 89       	ldd	r25, Y+16	; 0x10
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	f1 f7       	brne	.-4      	; 0x2baa <main+0x198>
    2bae:	98 8b       	std	Y+16, r25	; 0x10
    2bb0:	8f 87       	std	Y+15, r24	; 0x0f

	// Add a short delay (e.g., 5 milliseconds)
	_delay_ms(1000);

	// Clear the LCD display
	LCD_Clear(&lcd1);
    2bb2:	ce 01       	movw	r24, r28
    2bb4:	8a 96       	adiw	r24, 0x2a	; 42
    2bb6:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_Clear>


	/**<--------------------< KPD Configuration --------------------*/
	// Configure data pins for rows and columns
	for (u8 i = 0; i < 4; i++) {
    2bba:	1f 8e       	std	Y+31, r1	; 0x1f
    2bbc:	13 c0       	rjmp	.+38     	; 0x2be4 <main+0x1d2>
	    // Set the direction of the pin corresponding to the row to OUTPUT
	    DIO_SetPinDirection(DIO_PORTB, DIO_PIN4 + i, DIO_OUTPUT); // Rows
    2bbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bc0:	98 2f       	mov	r25, r24
    2bc2:	9c 5f       	subi	r25, 0xFC	; 252
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	69 2f       	mov	r22, r25
    2bc8:	41 e0       	ldi	r20, 0x01	; 1
    2bca:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_SetPinDirection>
	    // Set the direction of the pin corresponding to the column to INPUT
	    DIO_SetPinDirection(DIO_PORTD, DIO_PIN2 + i, DIO_INPUT); // Columns
    2bce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bd0:	98 2f       	mov	r25, r24
    2bd2:	9e 5f       	subi	r25, 0xFE	; 254
    2bd4:	83 e0       	ldi	r24, 0x03	; 3
    2bd6:	69 2f       	mov	r22, r25
    2bd8:	40 e0       	ldi	r20, 0x00	; 0
    2bda:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_SetPinDirection>
	LCD_Clear(&lcd1);


	/**<--------------------< KPD Configuration --------------------*/
	// Configure data pins for rows and columns
	for (u8 i = 0; i < 4; i++) {
    2bde:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2be0:	8f 5f       	subi	r24, 0xFF	; 255
    2be2:	8f 8f       	std	Y+31, r24	; 0x1f
    2be4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2be6:	84 30       	cpi	r24, 0x04	; 4
    2be8:	50 f3       	brcs	.-44     	; 0x2bbe <main+0x1ac>
	    // Set the direction of the pin corresponding to the column to INPUT
	    DIO_SetPinDirection(DIO_PORTD, DIO_PIN2 + i, DIO_INPUT); // Columns
	}

	// Variable to store the currently pressed key on the keypad
	uint8_t pressedKey = '\0';
    2bea:	1e aa       	std	Y+54, r1	; 0x36

    // Variable to store the result of the operation
    double result = 0;
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	a0 e0       	ldi	r26, 0x00	; 0
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	8e a3       	std	Y+38, r24	; 0x26
    2bf6:	9f a3       	std	Y+39, r25	; 0x27
    2bf8:	a8 a7       	std	Y+40, r26	; 0x28
    2bfa:	b9 a7       	std	Y+41, r27	; 0x29

    // Variable to store the operator
    char operator;

    // Variable to store the first and second operands
    int firstOperand = 0, secondOperand = 0;
    2bfc:	1c a2       	std	Y+36, r1	; 0x24
    2bfe:	1b a2       	std	Y+35, r1	; 0x23
    2c00:	1a a2       	std	Y+34, r1	; 0x22
    2c02:	19 a2       	std	Y+33, r1	; 0x21

    // Loop indefinitely
    while (1) {
        // Check if a key is pressed
        if (KPD_GetKeyState(&pressedKey) == E_OK) {
    2c04:	ce 01       	movw	r24, r28
    2c06:	c6 96       	adiw	r24, 0x36	; 54
    2c08:	0e 94 54 13 	call	0x26a8	; 0x26a8 <KPD_GetKeyState>
    2c0c:	81 30       	cpi	r24, 0x01	; 1
    2c0e:	d1 f7       	brne	.-12     	; 0x2c04 <main+0x1f2>
            // If a key is pressed, send its value to the LCD module
            LCD_SendString(&lcd1, (uint8_t *)&pressedKey);
    2c10:	ce 01       	movw	r24, r28
    2c12:	8a 96       	adiw	r24, 0x2a	; 42
    2c14:	9e 01       	movw	r18, r28
    2c16:	2a 5c       	subi	r18, 0xCA	; 202
    2c18:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1a:	b9 01       	movw	r22, r18
    2c1c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_SendString>

            // Check if the pressed key is 'c' (clear)
            if (pressedKey == 'c') {
    2c20:	8e a9       	ldd	r24, Y+54	; 0x36
    2c22:	83 36       	cpi	r24, 0x63	; 99
    2c24:	09 f0       	breq	.+2      	; 0x2c28 <main+0x216>
    2c26:	87 c0       	rjmp	.+270    	; 0x2d36 <main+0x324>
               // Clear the LCD display
               LCD_Clear(&lcd1);
    2c28:	ce 01       	movw	r24, r28
    2c2a:	8a 96       	adiw	r24, 0x2a	; 42
    2c2c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_Clear>

               // Write new content to the LCD
               LCD_SendString(&lcd1, (uint8_t *)"Clearing...");
    2c30:	ce 01       	movw	r24, r28
    2c32:	8a 96       	adiw	r24, 0x2a	; 42
    2c34:	2f e7       	ldi	r18, 0x7F	; 127
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	b9 01       	movw	r22, r18
    2c3a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_SendString>
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	aa e7       	ldi	r26, 0x7A	; 122
    2c44:	b4 e4       	ldi	r27, 0x44	; 68
    2c46:	8b 87       	std	Y+11, r24	; 0x0b
    2c48:	9c 87       	std	Y+12, r25	; 0x0c
    2c4a:	ad 87       	std	Y+13, r26	; 0x0d
    2c4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	4a e7       	ldi	r20, 0x7A	; 122
    2c5c:	55 e4       	ldi	r21, 0x45	; 69
    2c5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	8f 83       	std	Y+7, r24	; 0x07
    2c68:	98 87       	std	Y+8, r25	; 0x08
    2c6a:	a9 87       	std	Y+9, r26	; 0x09
    2c6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c70:	78 85       	ldd	r23, Y+8	; 0x08
    2c72:	89 85       	ldd	r24, Y+9	; 0x09
    2c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e8       	ldi	r20, 0x80	; 128
    2c7c:	5f e3       	ldi	r21, 0x3F	; 63
    2c7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c82:	88 23       	and	r24, r24
    2c84:	2c f4       	brge	.+10     	; 0x2c90 <main+0x27e>
		__ticks = 1;
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	9e 83       	std	Y+6, r25	; 0x06
    2c8c:	8d 83       	std	Y+5, r24	; 0x05
    2c8e:	3f c0       	rjmp	.+126    	; 0x2d0e <main+0x2fc>
	else if (__tmp > 65535)
    2c90:	6f 81       	ldd	r22, Y+7	; 0x07
    2c92:	78 85       	ldd	r23, Y+8	; 0x08
    2c94:	89 85       	ldd	r24, Y+9	; 0x09
    2c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	3f ef       	ldi	r19, 0xFF	; 255
    2c9c:	4f e7       	ldi	r20, 0x7F	; 127
    2c9e:	57 e4       	ldi	r21, 0x47	; 71
    2ca0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ca4:	18 16       	cp	r1, r24
    2ca6:	4c f5       	brge	.+82     	; 0x2cfa <main+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2caa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e2       	ldi	r20, 0x20	; 32
    2cb6:	51 e4       	ldi	r21, 0x41	; 65
    2cb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	bc 01       	movw	r22, r24
    2cc2:	cd 01       	movw	r24, r26
    2cc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	9e 83       	std	Y+6, r25	; 0x06
    2cce:	8d 83       	std	Y+5, r24	; 0x05
    2cd0:	0f c0       	rjmp	.+30     	; 0x2cf0 <main+0x2de>
    2cd2:	80 e9       	ldi	r24, 0x90	; 144
    2cd4:	91 e0       	ldi	r25, 0x01	; 1
    2cd6:	9c 83       	std	Y+4, r25	; 0x04
    2cd8:	8b 83       	std	Y+3, r24	; 0x03
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	f1 f7       	brne	.-4      	; 0x2cde <main+0x2cc>
    2ce2:	9c 83       	std	Y+4, r25	; 0x04
    2ce4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	9e 83       	std	Y+6, r25	; 0x06
    2cee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf4:	00 97       	sbiw	r24, 0x00	; 0
    2cf6:	69 f7       	brne	.-38     	; 0x2cd2 <main+0x2c0>
    2cf8:	14 c0       	rjmp	.+40     	; 0x2d22 <main+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfc:	78 85       	ldd	r23, Y+8	; 0x08
    2cfe:	89 85       	ldd	r24, Y+9	; 0x09
    2d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	9e 83       	std	Y+6, r25	; 0x06
    2d0c:	8d 83       	std	Y+5, r24	; 0x05
    2d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d10:	9e 81       	ldd	r25, Y+6	; 0x06
    2d12:	9a 83       	std	Y+2, r25	; 0x02
    2d14:	89 83       	std	Y+1, r24	; 0x01
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	f1 f7       	brne	.-4      	; 0x2d1a <main+0x308>
    2d1e:	9a 83       	std	Y+2, r25	; 0x02
    2d20:	89 83       	std	Y+1, r24	; 0x01
               // Add a short delay (e.g., 5 milliseconds)
			  _delay_ms(1000);

               // Clear the LCD display
               LCD_Clear(&lcd1);
    2d22:	ce 01       	movw	r24, r28
    2d24:	8a 96       	adiw	r24, 0x2a	; 42
    2d26:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_Clear>

               // Reset the operands and operator for the next calculation
			   firstOperand = 0;
    2d2a:	1c a2       	std	Y+36, r1	; 0x24
    2d2c:	1b a2       	std	Y+35, r1	; 0x23
			   secondOperand = 0;
    2d2e:	1a a2       	std	Y+34, r1	; 0x22
    2d30:	19 a2       	std	Y+33, r1	; 0x21
			   operator = '\0';
    2d32:	1d a2       	std	Y+37, r1	; 0x25
    2d34:	67 cf       	rjmp	.-306    	; 0x2c04 <main+0x1f2>
            } else if (pressedKey >= '0' && pressedKey <= '9') {
    2d36:	8e a9       	ldd	r24, Y+54	; 0x36
    2d38:	80 33       	cpi	r24, 0x30	; 48
    2d3a:	88 f1       	brcs	.+98     	; 0x2d9e <main+0x38c>
    2d3c:	8e a9       	ldd	r24, Y+54	; 0x36
    2d3e:	8a 33       	cpi	r24, 0x3A	; 58
    2d40:	70 f5       	brcc	.+92     	; 0x2d9e <main+0x38c>
                /**< If the pressed key is a numeric digit, handle it as before */
                // Convert the ASCII character to its numeric value
                int numericValue = ascii_to_numeric(pressedKey);
    2d42:	8e a9       	ldd	r24, Y+54	; 0x36
    2d44:	0e 94 6f 17 	call	0x2ede	; 0x2ede <ascii_to_numeric>
    2d48:	9e 8f       	std	Y+30, r25	; 0x1e
    2d4a:	8d 8f       	std	Y+29, r24	; 0x1d

                // Update the operands based on the entered digits
                if (operator == '\0') {
    2d4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d4e:	88 23       	and	r24, r24
    2d50:	99 f4       	brne	.+38     	; 0x2d78 <main+0x366>
                    // If no operator is entered yet, update the first operand
                    firstOperand = (firstOperand * 10) + numericValue;
    2d52:	8b a1       	ldd	r24, Y+35	; 0x23
    2d54:	9c a1       	ldd	r25, Y+36	; 0x24
    2d56:	9c 01       	movw	r18, r24
    2d58:	22 0f       	add	r18, r18
    2d5a:	33 1f       	adc	r19, r19
    2d5c:	c9 01       	movw	r24, r18
    2d5e:	88 0f       	add	r24, r24
    2d60:	99 1f       	adc	r25, r25
    2d62:	88 0f       	add	r24, r24
    2d64:	99 1f       	adc	r25, r25
    2d66:	28 0f       	add	r18, r24
    2d68:	39 1f       	adc	r19, r25
    2d6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d6e:	82 0f       	add	r24, r18
    2d70:	93 1f       	adc	r25, r19
    2d72:	9c a3       	std	Y+36, r25	; 0x24
    2d74:	8b a3       	std	Y+35, r24	; 0x23
    2d76:	46 cf       	rjmp	.-372    	; 0x2c04 <main+0x1f2>
                } else {
                    // If an operator is entered, update the second operand
                    secondOperand = (secondOperand * 10) + numericValue;
    2d78:	89 a1       	ldd	r24, Y+33	; 0x21
    2d7a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d7c:	9c 01       	movw	r18, r24
    2d7e:	22 0f       	add	r18, r18
    2d80:	33 1f       	adc	r19, r19
    2d82:	c9 01       	movw	r24, r18
    2d84:	88 0f       	add	r24, r24
    2d86:	99 1f       	adc	r25, r25
    2d88:	88 0f       	add	r24, r24
    2d8a:	99 1f       	adc	r25, r25
    2d8c:	28 0f       	add	r18, r24
    2d8e:	39 1f       	adc	r19, r25
    2d90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d94:	82 0f       	add	r24, r18
    2d96:	93 1f       	adc	r25, r19
    2d98:	9a a3       	std	Y+34, r25	; 0x22
    2d9a:	89 a3       	std	Y+33, r24	; 0x21
    2d9c:	33 cf       	rjmp	.-410    	; 0x2c04 <main+0x1f2>
                }
            } else if (pressedKey == '+' || pressedKey == '-' || pressedKey == '*' || pressedKey == '/') {
    2d9e:	8e a9       	ldd	r24, Y+54	; 0x36
    2da0:	8b 32       	cpi	r24, 0x2B	; 43
    2da2:	49 f0       	breq	.+18     	; 0x2db6 <main+0x3a4>
    2da4:	8e a9       	ldd	r24, Y+54	; 0x36
    2da6:	8d 32       	cpi	r24, 0x2D	; 45
    2da8:	31 f0       	breq	.+12     	; 0x2db6 <main+0x3a4>
    2daa:	8e a9       	ldd	r24, Y+54	; 0x36
    2dac:	8a 32       	cpi	r24, 0x2A	; 42
    2dae:	19 f0       	breq	.+6      	; 0x2db6 <main+0x3a4>
    2db0:	8e a9       	ldd	r24, Y+54	; 0x36
    2db2:	8f 32       	cpi	r24, 0x2F	; 47
    2db4:	19 f4       	brne	.+6      	; 0x2dbc <main+0x3aa>
                // If the pressed key is an operator (+, -, *, /), update the operator
                operator = pressedKey;
    2db6:	8e a9       	ldd	r24, Y+54	; 0x36
    2db8:	8d a3       	std	Y+37, r24	; 0x25
    2dba:	24 cf       	rjmp	.-440    	; 0x2c04 <main+0x1f2>
            } else if (pressedKey == '=') {
    2dbc:	8e a9       	ldd	r24, Y+54	; 0x36
    2dbe:	8d 33       	cpi	r24, 0x3D	; 61
    2dc0:	09 f0       	breq	.+2      	; 0x2dc4 <main+0x3b2>
    2dc2:	20 cf       	rjmp	.-448    	; 0x2c04 <main+0x1f2>
                // If the pressed key is '=', perform the calculation based on the operator
                switch (operator) {
    2dc4:	8d a1       	ldd	r24, Y+37	; 0x25
    2dc6:	28 2f       	mov	r18, r24
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	38 af       	std	Y+56, r19	; 0x38
    2dcc:	2f ab       	std	Y+55, r18	; 0x37
    2dce:	8f a9       	ldd	r24, Y+55	; 0x37
    2dd0:	98 ad       	ldd	r25, Y+56	; 0x38
    2dd2:	8b 32       	cpi	r24, 0x2B	; 43
    2dd4:	91 05       	cpc	r25, r1
    2dd6:	b9 f0       	breq	.+46     	; 0x2e06 <main+0x3f4>
    2dd8:	2f a9       	ldd	r18, Y+55	; 0x37
    2dda:	38 ad       	ldd	r19, Y+56	; 0x38
    2ddc:	2c 32       	cpi	r18, 0x2C	; 44
    2dde:	31 05       	cpc	r19, r1
    2de0:	34 f4       	brge	.+12     	; 0x2dee <main+0x3dc>
    2de2:	8f a9       	ldd	r24, Y+55	; 0x37
    2de4:	98 ad       	ldd	r25, Y+56	; 0x38
    2de6:	8a 32       	cpi	r24, 0x2A	; 42
    2de8:	91 05       	cpc	r25, r1
    2dea:	c9 f1       	breq	.+114    	; 0x2e5e <main+0x44c>
    2dec:	5c c0       	rjmp	.+184    	; 0x2ea6 <main+0x494>
    2dee:	2f a9       	ldd	r18, Y+55	; 0x37
    2df0:	38 ad       	ldd	r19, Y+56	; 0x38
    2df2:	2d 32       	cpi	r18, 0x2D	; 45
    2df4:	31 05       	cpc	r19, r1
    2df6:	e9 f0       	breq	.+58     	; 0x2e32 <main+0x420>
    2df8:	8f a9       	ldd	r24, Y+55	; 0x37
    2dfa:	98 ad       	ldd	r25, Y+56	; 0x38
    2dfc:	8f 32       	cpi	r24, 0x2F	; 47
    2dfe:	91 05       	cpc	r25, r1
    2e00:	09 f4       	brne	.+2      	; 0x2e04 <main+0x3f2>
    2e02:	43 c0       	rjmp	.+134    	; 0x2e8a <main+0x478>
    2e04:	50 c0       	rjmp	.+160    	; 0x2ea6 <main+0x494>
                    case '+':
                        result = add(firstOperand, secondOperand);
    2e06:	8b a1       	ldd	r24, Y+35	; 0x23
    2e08:	9c a1       	ldd	r25, Y+36	; 0x24
    2e0a:	29 a1       	ldd	r18, Y+33	; 0x21
    2e0c:	3a a1       	ldd	r19, Y+34	; 0x22
    2e0e:	b9 01       	movw	r22, r18
    2e10:	0e 94 68 14 	call	0x28d0	; 0x28d0 <add>
    2e14:	aa 27       	eor	r26, r26
    2e16:	97 fd       	sbrc	r25, 7
    2e18:	a0 95       	com	r26
    2e1a:	ba 2f       	mov	r27, r26
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	8e a3       	std	Y+38, r24	; 0x26
    2e2a:	9f a3       	std	Y+39, r25	; 0x27
    2e2c:	a8 a7       	std	Y+40, r26	; 0x28
    2e2e:	b9 a7       	std	Y+41, r27	; 0x29
    2e30:	42 c0       	rjmp	.+132    	; 0x2eb6 <main+0x4a4>
                        break;
                    case '-':
                        result = subtract(firstOperand, secondOperand);
    2e32:	8b a1       	ldd	r24, Y+35	; 0x23
    2e34:	9c a1       	ldd	r25, Y+36	; 0x24
    2e36:	29 a1       	ldd	r18, Y+33	; 0x21
    2e38:	3a a1       	ldd	r19, Y+34	; 0x22
    2e3a:	b9 01       	movw	r22, r18
    2e3c:	0e 94 7f 14 	call	0x28fe	; 0x28fe <subtract>
    2e40:	aa 27       	eor	r26, r26
    2e42:	97 fd       	sbrc	r25, 7
    2e44:	a0 95       	com	r26
    2e46:	ba 2f       	mov	r27, r26
    2e48:	bc 01       	movw	r22, r24
    2e4a:	cd 01       	movw	r24, r26
    2e4c:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	8e a3       	std	Y+38, r24	; 0x26
    2e56:	9f a3       	std	Y+39, r25	; 0x27
    2e58:	a8 a7       	std	Y+40, r26	; 0x28
    2e5a:	b9 a7       	std	Y+41, r27	; 0x29
    2e5c:	2c c0       	rjmp	.+88     	; 0x2eb6 <main+0x4a4>
                        break;
                    case '*':
                        result = multiply(firstOperand, secondOperand);
    2e5e:	8b a1       	ldd	r24, Y+35	; 0x23
    2e60:	9c a1       	ldd	r25, Y+36	; 0x24
    2e62:	29 a1       	ldd	r18, Y+33	; 0x21
    2e64:	3a a1       	ldd	r19, Y+34	; 0x22
    2e66:	b9 01       	movw	r22, r18
    2e68:	0e 94 98 14 	call	0x2930	; 0x2930 <multiply>
    2e6c:	aa 27       	eor	r26, r26
    2e6e:	97 fd       	sbrc	r25, 7
    2e70:	a0 95       	com	r26
    2e72:	ba 2f       	mov	r27, r26
    2e74:	bc 01       	movw	r22, r24
    2e76:	cd 01       	movw	r24, r26
    2e78:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	8e a3       	std	Y+38, r24	; 0x26
    2e82:	9f a3       	std	Y+39, r25	; 0x27
    2e84:	a8 a7       	std	Y+40, r26	; 0x28
    2e86:	b9 a7       	std	Y+41, r27	; 0x29
    2e88:	16 c0       	rjmp	.+44     	; 0x2eb6 <main+0x4a4>
                        break;
                    case '/':
                        result = divide(firstOperand, secondOperand);
    2e8a:	8b a1       	ldd	r24, Y+35	; 0x23
    2e8c:	9c a1       	ldd	r25, Y+36	; 0x24
    2e8e:	29 a1       	ldd	r18, Y+33	; 0x21
    2e90:	3a a1       	ldd	r19, Y+34	; 0x22
    2e92:	b9 01       	movw	r22, r18
    2e94:	0e 94 b5 14 	call	0x296a	; 0x296a <divide>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	8e a3       	std	Y+38, r24	; 0x26
    2e9e:	9f a3       	std	Y+39, r25	; 0x27
    2ea0:	a8 a7       	std	Y+40, r26	; 0x28
    2ea2:	b9 a7       	std	Y+41, r27	; 0x29
    2ea4:	08 c0       	rjmp	.+16     	; 0x2eb6 <main+0x4a4>
                        break;
                    default:
                        // Handle invalid operator
                        result = -1; // Return a suitable error value
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	a0 e8       	ldi	r26, 0x80	; 128
    2eac:	bf eb       	ldi	r27, 0xBF	; 191
    2eae:	8e a3       	std	Y+38, r24	; 0x26
    2eb0:	9f a3       	std	Y+39, r25	; 0x27
    2eb2:	a8 a7       	std	Y+40, r26	; 0x28
    2eb4:	b9 a7       	std	Y+41, r27	; 0x29
                        break;
                }
                // Display the result on the LCD using the appropriate function
                LCD_Clear(&lcd1);
    2eb6:	ce 01       	movw	r24, r28
    2eb8:	8a 96       	adiw	r24, 0x2a	; 42
    2eba:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_Clear>
                LCD_SendNumber(&lcd1, result); // Or LCD_SendIntegerNumber(&lcd1, result) for int result
    2ebe:	ce 01       	movw	r24, r28
    2ec0:	8a 96       	adiw	r24, 0x2a	; 42
    2ec2:	2e a1       	ldd	r18, Y+38	; 0x26
    2ec4:	3f a1       	ldd	r19, Y+39	; 0x27
    2ec6:	48 a5       	ldd	r20, Y+40	; 0x28
    2ec8:	59 a5       	ldd	r21, Y+41	; 0x29
    2eca:	ba 01       	movw	r22, r20
    2ecc:	a9 01       	movw	r20, r18
    2ece:	0e 94 32 0b 	call	0x1664	; 0x1664 <LCD_SendNumber>

                // Reset the operands and operator for the next calculation
                firstOperand = 0;
    2ed2:	1c a2       	std	Y+36, r1	; 0x24
    2ed4:	1b a2       	std	Y+35, r1	; 0x23
                secondOperand = 0;
    2ed6:	1a a2       	std	Y+34, r1	; 0x22
    2ed8:	19 a2       	std	Y+33, r1	; 0x21
                operator = '\0';
    2eda:	1d a2       	std	Y+37, r1	; 0x25
    2edc:	93 ce       	rjmp	.-730    	; 0x2c04 <main+0x1f2>

00002ede <ascii_to_numeric>:
        }
    }
}

/*****************************< Function Implementations *****************************/
int ascii_to_numeric(char ascii_char) {
    2ede:	df 93       	push	r29
    2ee0:	cf 93       	push	r28
    2ee2:	00 d0       	rcall	.+0      	; 0x2ee4 <ascii_to_numeric+0x6>
    2ee4:	0f 92       	push	r0
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	89 83       	std	Y+1, r24	; 0x01
    if (ascii_char >= '0' && ascii_char <= '9') {
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	80 33       	cpi	r24, 0x30	; 48
    2ef0:	60 f0       	brcs	.+24     	; 0x2f0a <ascii_to_numeric+0x2c>
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	8a 33       	cpi	r24, 0x3A	; 58
    2ef6:	48 f4       	brcc	.+18     	; 0x2f0a <ascii_to_numeric+0x2c>
        return ascii_char - '0';
    2ef8:	89 81       	ldd	r24, Y+1	; 0x01
    2efa:	88 2f       	mov	r24, r24
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	9c 01       	movw	r18, r24
    2f00:	20 53       	subi	r18, 0x30	; 48
    2f02:	30 40       	sbci	r19, 0x00	; 0
    2f04:	3b 83       	std	Y+3, r19	; 0x03
    2f06:	2a 83       	std	Y+2, r18	; 0x02
    2f08:	04 c0       	rjmp	.+8      	; 0x2f12 <ascii_to_numeric+0x34>
    } else {
        // Handle error or invalid input
        return -1; // Return a suitable error value
    2f0a:	8f ef       	ldi	r24, 0xFF	; 255
    2f0c:	9f ef       	ldi	r25, 0xFF	; 255
    2f0e:	9b 83       	std	Y+3, r25	; 0x03
    2f10:	8a 83       	std	Y+2, r24	; 0x02
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	9b 81       	ldd	r25, Y+3	; 0x03
    }
}
    2f16:	0f 90       	pop	r0
    2f18:	0f 90       	pop	r0
    2f1a:	0f 90       	pop	r0
    2f1c:	cf 91       	pop	r28
    2f1e:	df 91       	pop	r29
    2f20:	08 95       	ret

00002f22 <__divmodsi4>:
    2f22:	97 fb       	bst	r25, 7
    2f24:	09 2e       	mov	r0, r25
    2f26:	05 26       	eor	r0, r21
    2f28:	0e d0       	rcall	.+28     	; 0x2f46 <__divmodsi4_neg1>
    2f2a:	57 fd       	sbrc	r21, 7
    2f2c:	04 d0       	rcall	.+8      	; 0x2f36 <__divmodsi4_neg2>
    2f2e:	14 d0       	rcall	.+40     	; 0x2f58 <__udivmodsi4>
    2f30:	0a d0       	rcall	.+20     	; 0x2f46 <__divmodsi4_neg1>
    2f32:	00 1c       	adc	r0, r0
    2f34:	38 f4       	brcc	.+14     	; 0x2f44 <__divmodsi4_exit>

00002f36 <__divmodsi4_neg2>:
    2f36:	50 95       	com	r21
    2f38:	40 95       	com	r20
    2f3a:	30 95       	com	r19
    2f3c:	21 95       	neg	r18
    2f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f40:	4f 4f       	sbci	r20, 0xFF	; 255
    2f42:	5f 4f       	sbci	r21, 0xFF	; 255

00002f44 <__divmodsi4_exit>:
    2f44:	08 95       	ret

00002f46 <__divmodsi4_neg1>:
    2f46:	f6 f7       	brtc	.-4      	; 0x2f44 <__divmodsi4_exit>
    2f48:	90 95       	com	r25
    2f4a:	80 95       	com	r24
    2f4c:	70 95       	com	r23
    2f4e:	61 95       	neg	r22
    2f50:	7f 4f       	sbci	r23, 0xFF	; 255
    2f52:	8f 4f       	sbci	r24, 0xFF	; 255
    2f54:	9f 4f       	sbci	r25, 0xFF	; 255
    2f56:	08 95       	ret

00002f58 <__udivmodsi4>:
    2f58:	a1 e2       	ldi	r26, 0x21	; 33
    2f5a:	1a 2e       	mov	r1, r26
    2f5c:	aa 1b       	sub	r26, r26
    2f5e:	bb 1b       	sub	r27, r27
    2f60:	fd 01       	movw	r30, r26
    2f62:	0d c0       	rjmp	.+26     	; 0x2f7e <__udivmodsi4_ep>

00002f64 <__udivmodsi4_loop>:
    2f64:	aa 1f       	adc	r26, r26
    2f66:	bb 1f       	adc	r27, r27
    2f68:	ee 1f       	adc	r30, r30
    2f6a:	ff 1f       	adc	r31, r31
    2f6c:	a2 17       	cp	r26, r18
    2f6e:	b3 07       	cpc	r27, r19
    2f70:	e4 07       	cpc	r30, r20
    2f72:	f5 07       	cpc	r31, r21
    2f74:	20 f0       	brcs	.+8      	; 0x2f7e <__udivmodsi4_ep>
    2f76:	a2 1b       	sub	r26, r18
    2f78:	b3 0b       	sbc	r27, r19
    2f7a:	e4 0b       	sbc	r30, r20
    2f7c:	f5 0b       	sbc	r31, r21

00002f7e <__udivmodsi4_ep>:
    2f7e:	66 1f       	adc	r22, r22
    2f80:	77 1f       	adc	r23, r23
    2f82:	88 1f       	adc	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	1a 94       	dec	r1
    2f88:	69 f7       	brne	.-38     	; 0x2f64 <__udivmodsi4_loop>
    2f8a:	60 95       	com	r22
    2f8c:	70 95       	com	r23
    2f8e:	80 95       	com	r24
    2f90:	90 95       	com	r25
    2f92:	9b 01       	movw	r18, r22
    2f94:	ac 01       	movw	r20, r24
    2f96:	bd 01       	movw	r22, r26
    2f98:	cf 01       	movw	r24, r30
    2f9a:	08 95       	ret

00002f9c <__prologue_saves__>:
    2f9c:	2f 92       	push	r2
    2f9e:	3f 92       	push	r3
    2fa0:	4f 92       	push	r4
    2fa2:	5f 92       	push	r5
    2fa4:	6f 92       	push	r6
    2fa6:	7f 92       	push	r7
    2fa8:	8f 92       	push	r8
    2faa:	9f 92       	push	r9
    2fac:	af 92       	push	r10
    2fae:	bf 92       	push	r11
    2fb0:	cf 92       	push	r12
    2fb2:	df 92       	push	r13
    2fb4:	ef 92       	push	r14
    2fb6:	ff 92       	push	r15
    2fb8:	0f 93       	push	r16
    2fba:	1f 93       	push	r17
    2fbc:	cf 93       	push	r28
    2fbe:	df 93       	push	r29
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	ca 1b       	sub	r28, r26
    2fc6:	db 0b       	sbc	r29, r27
    2fc8:	0f b6       	in	r0, 0x3f	; 63
    2fca:	f8 94       	cli
    2fcc:	de bf       	out	0x3e, r29	; 62
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	cd bf       	out	0x3d, r28	; 61
    2fd2:	09 94       	ijmp

00002fd4 <__epilogue_restores__>:
    2fd4:	2a 88       	ldd	r2, Y+18	; 0x12
    2fd6:	39 88       	ldd	r3, Y+17	; 0x11
    2fd8:	48 88       	ldd	r4, Y+16	; 0x10
    2fda:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fdc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fde:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fe0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fe2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fe4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fe6:	b9 84       	ldd	r11, Y+9	; 0x09
    2fe8:	c8 84       	ldd	r12, Y+8	; 0x08
    2fea:	df 80       	ldd	r13, Y+7	; 0x07
    2fec:	ee 80       	ldd	r14, Y+6	; 0x06
    2fee:	fd 80       	ldd	r15, Y+5	; 0x05
    2ff0:	0c 81       	ldd	r16, Y+4	; 0x04
    2ff2:	1b 81       	ldd	r17, Y+3	; 0x03
    2ff4:	aa 81       	ldd	r26, Y+2	; 0x02
    2ff6:	b9 81       	ldd	r27, Y+1	; 0x01
    2ff8:	ce 0f       	add	r28, r30
    2ffa:	d1 1d       	adc	r29, r1
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61
    3006:	ed 01       	movw	r28, r26
    3008:	08 95       	ret

0000300a <_exit>:
    300a:	f8 94       	cli

0000300c <__stop_program>:
    300c:	ff cf       	rjmp	.-2      	; 0x300c <__stop_program>
